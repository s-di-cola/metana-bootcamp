/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ForgeryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "alchemyTokens"
      | "burn"
      | "canForgeNow"
      | "forgeBasicToken"
      | "forgeCompoundToken"
      | "getBalances"
      | "getLastMintedTime"
      | "getTokenURI"
      | "getTokensMinted"
      | "trade"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "alchemyTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canForgeNow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forgeBasicToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forgeCompoundToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastMintedTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenURI",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensMinted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "alchemyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canForgeNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forgeBasicToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forgeCompoundToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastMintedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
}

export interface Forgery extends BaseContract {
  connect(runner?: ContractRunner | null): Forgery;
  waitForDeployment(): Promise<this>;

  interface: ForgeryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  alchemyTokens: TypedContractMethod<[], [string], "view">;

  burn: TypedContractMethod<
    [_token: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  canForgeNow: TypedContractMethod<[], [boolean], "view">;

  forgeBasicToken: TypedContractMethod<
    [_token: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  forgeCompoundToken: TypedContractMethod<
    [_token: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBalances: TypedContractMethod<[_of: AddressLike], [bigint[]], "view">;

  getLastMintedTime: TypedContractMethod<[], [bigint], "view">;

  getTokenURI: TypedContractMethod<
    [tokenType: BigNumberish, tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTokensMinted: TypedContractMethod<
    [tokenType: BigNumberish],
    [bigint],
    "view"
  >;

  trade: TypedContractMethod<
    [_from: BigNumberish, _to: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "alchemyTokens"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [_token: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canForgeNow"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "forgeBasicToken"
  ): TypedContractMethod<
    [_token: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forgeCompoundToken"
  ): TypedContractMethod<
    [_token: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBalances"
  ): TypedContractMethod<[_of: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getLastMintedTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenURI"
  ): TypedContractMethod<
    [tokenType: BigNumberish, tokenId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokensMinted"
  ): TypedContractMethod<[tokenType: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "trade"
  ): TypedContractMethod<
    [_from: BigNumberish, _to: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
