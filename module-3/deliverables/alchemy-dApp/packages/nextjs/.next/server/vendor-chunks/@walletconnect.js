/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@walletconnect";
exports.ids = ["vendor-chunks/@walletconnect"];
exports.modules = {

/***/ "(ssr)/./node_modules/@walletconnect/core/dist/index.es.js":
/*!***********************************************************!*\
  !*** ./node_modules/@walletconnect/core/dist/index.es.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CORE_CONTEXT: () => (/* binding */ ne),\n/* harmony export */   CORE_DEFAULT: () => (/* binding */ nt),\n/* harmony export */   CORE_PROTOCOL: () => (/* binding */ fe),\n/* harmony export */   CORE_STORAGE_OPTIONS: () => (/* binding */ ot),\n/* harmony export */   CORE_STORAGE_PREFIX: () => (/* binding */ O),\n/* harmony export */   CORE_VERSION: () => (/* binding */ _e),\n/* harmony export */   CRYPTO_CLIENT_SEED: () => (/* binding */ Ee),\n/* harmony export */   CRYPTO_CONTEXT: () => (/* binding */ at),\n/* harmony export */   CRYPTO_JWT_TTL: () => (/* binding */ ht),\n/* harmony export */   Core: () => (/* binding */ vn),\n/* harmony export */   Crypto: () => (/* binding */ Vt),\n/* harmony export */   ECHO_CONTEXT: () => (/* binding */ $t),\n/* harmony export */   ECHO_URL: () => (/* binding */ Ft),\n/* harmony export */   EVENTS_CLIENT_API_URL: () => (/* binding */ kt),\n/* harmony export */   EVENTS_STORAGE_CLEANUP_INTERVAL: () => (/* binding */ Mt),\n/* harmony export */   EVENTS_STORAGE_CONTEXT: () => (/* binding */ Kt),\n/* harmony export */   EVENTS_STORAGE_VERSION: () => (/* binding */ Ut),\n/* harmony export */   EVENT_CLIENT_AUTHENTICATE_ERRORS: () => (/* binding */ jr),\n/* harmony export */   EVENT_CLIENT_AUTHENTICATE_TRACES: () => (/* binding */ Vr),\n/* harmony export */   EVENT_CLIENT_CONTEXT: () => (/* binding */ Mr),\n/* harmony export */   EVENT_CLIENT_PAIRING_ERRORS: () => (/* binding */ F),\n/* harmony export */   EVENT_CLIENT_PAIRING_TRACES: () => (/* binding */ L),\n/* harmony export */   EVENT_CLIENT_SESSION_ERRORS: () => (/* binding */ Br),\n/* harmony export */   EVENT_CLIENT_SESSION_TRACES: () => (/* binding */ kr),\n/* harmony export */   EXPIRER_CONTEXT: () => (/* binding */ xt),\n/* harmony export */   EXPIRER_DEFAULT_TTL: () => (/* binding */ Ur),\n/* harmony export */   EXPIRER_EVENTS: () => (/* binding */ R),\n/* harmony export */   EXPIRER_STORAGE_VERSION: () => (/* binding */ Ot),\n/* harmony export */   EchoClient: () => (/* binding */ oi),\n/* harmony export */   EventClient: () => (/* binding */ ci),\n/* harmony export */   Expirer: () => (/* binding */ si),\n/* harmony export */   HISTORY_CONTEXT: () => (/* binding */ Pt),\n/* harmony export */   HISTORY_EVENTS: () => (/* binding */ P),\n/* harmony export */   HISTORY_STORAGE_VERSION: () => (/* binding */ Rt),\n/* harmony export */   JsonRpcHistory: () => (/* binding */ ii),\n/* harmony export */   KEYCHAIN_CONTEXT: () => (/* binding */ ct),\n/* harmony export */   KEYCHAIN_STORAGE_VERSION: () => (/* binding */ lt),\n/* harmony export */   KeyChain: () => (/* binding */ Bt),\n/* harmony export */   MESSAGES_CONTEXT: () => (/* binding */ ut),\n/* harmony export */   MESSAGES_STORAGE_VERSION: () => (/* binding */ dt),\n/* harmony export */   MessageTracker: () => (/* binding */ jt),\n/* harmony export */   PAIRING_CONTEXT: () => (/* binding */ Ct),\n/* harmony export */   PAIRING_DEFAULT_TTL: () => (/* binding */ Fr),\n/* harmony export */   PAIRING_EVENTS: () => (/* binding */ J),\n/* harmony export */   PAIRING_RPC_OPTS: () => (/* binding */ V),\n/* harmony export */   PAIRING_STORAGE_VERSION: () => (/* binding */ St),\n/* harmony export */   PENDING_SUB_RESOLUTION_TIMEOUT: () => (/* binding */ Tt),\n/* harmony export */   PUBLISHER_CONTEXT: () => (/* binding */ pt),\n/* harmony export */   PUBLISHER_DEFAULT_TTL: () => (/* binding */ gt),\n/* harmony export */   Pairing: () => (/* binding */ ti),\n/* harmony export */   RELAYER_CONTEXT: () => (/* binding */ bt),\n/* harmony export */   RELAYER_DEFAULT_LOGGER: () => (/* binding */ Dt),\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: () => (/* binding */ yt),\n/* harmony export */   RELAYER_DEFAULT_RELAY_URL: () => (/* binding */ ve),\n/* harmony export */   RELAYER_EVENTS: () => (/* binding */ w),\n/* harmony export */   RELAYER_PROVIDER_EVENTS: () => (/* binding */ I),\n/* harmony export */   RELAYER_RECONNECT_TIMEOUT: () => (/* binding */ ft),\n/* harmony export */   RELAYER_SDK_VERSION: () => (/* binding */ we),\n/* harmony export */   RELAYER_STORAGE_OPTIONS: () => (/* binding */ Lr),\n/* harmony export */   RELAYER_SUBSCRIBER_SUFFIX: () => (/* binding */ mt),\n/* harmony export */   RELAYER_TRANSPORT_CUTOFF: () => (/* binding */ _t),\n/* harmony export */   Relayer: () => (/* binding */ Wt),\n/* harmony export */   STORE_STORAGE_VERSION: () => (/* binding */ Et),\n/* harmony export */   SUBSCRIBER_CONTEXT: () => (/* binding */ wt),\n/* harmony export */   SUBSCRIBER_DEFAULT_TTL: () => (/* binding */ $r),\n/* harmony export */   SUBSCRIBER_EVENTS: () => (/* binding */ A),\n/* harmony export */   SUBSCRIBER_STORAGE_VERSION: () => (/* binding */ It),\n/* harmony export */   Store: () => (/* binding */ ei),\n/* harmony export */   Subscriber: () => (/* binding */ Ht),\n/* harmony export */   TRUSTED_VERIFY_URLS: () => (/* binding */ Lt),\n/* harmony export */   VERIFY_CONTEXT: () => (/* binding */ At),\n/* harmony export */   VERIFY_SERVER: () => (/* binding */ W),\n/* harmony export */   VERIFY_SERVER_V3: () => (/* binding */ zt),\n/* harmony export */   Verify: () => (/* binding */ ni),\n/* harmony export */   WALLETCONNECT_CLIENT_ID: () => (/* binding */ vt),\n/* harmony export */   \"default\": () => (/* binding */ oe)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_keyvaluestorage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/keyvaluestorage */ \"(ssr)/./node_modules/@walletconnect/keyvaluestorage/dist/index.es.js\");\n/* harmony import */ var _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/heartbeat */ \"(ssr)/./node_modules/@walletconnect/heartbeat/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/logger */ \"(ssr)/./node_modules/@walletconnect/logger/dist/index.es.js\");\n/* harmony import */ var _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @walletconnect/types */ \"(ssr)/./node_modules/@walletconnect/types/dist/index.es.js\");\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/relay-auth */ \"(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uint8arrays */ \"(ssr)/./node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_ws_connection__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @walletconnect/jsonrpc-ws-connection */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js\");\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash.isequal */ \"(ssr)/./node_modules/lodash.isequal/index.js\");\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash_isequal__WEBPACK_IMPORTED_MODULE_11__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction us(o, e) {\n    if (o.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var t = new Uint8Array(256), s = 0; s < t.length; s++)t[s] = 255;\n    for(var i = 0; i < o.length; i++){\n        var r = o.charAt(i), n = r.charCodeAt(0);\n        if (t[n] !== 255) throw new TypeError(r + \" is ambiguous\");\n        t[n] = i;\n    }\n    var a = o.length, h = o.charAt(0), c = Math.log(a) / Math.log(256), d = Math.log(256) / Math.log(a);\n    function g(l) {\n        if (l instanceof Uint8Array || (ArrayBuffer.isView(l) ? l = new Uint8Array(l.buffer, l.byteOffset, l.byteLength) : Array.isArray(l) && (l = Uint8Array.from(l))), !(l instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (l.length === 0) return \"\";\n        for(var p = 0, _ = 0, D = 0, E = l.length; D !== E && l[D] === 0;)D++, p++;\n        for(var N = (E - D) * d + 1 >>> 0, T = new Uint8Array(N); D !== E;){\n            for(var z = l[D], U = 0, x = N - 1; (z !== 0 || U < _) && x !== -1; x--, U++)z += 256 * T[x] >>> 0, T[x] = z % a >>> 0, z = z / a >>> 0;\n            if (z !== 0) throw new Error(\"Non-zero carry\");\n            _ = U, D++;\n        }\n        for(var $ = N - _; $ !== N && T[$] === 0;)$++;\n        for(var Q = h.repeat(p); $ < N; ++$)Q += o.charAt(T[$]);\n        return Q;\n    }\n    function b(l) {\n        if (typeof l != \"string\") throw new TypeError(\"Expected String\");\n        if (l.length === 0) return new Uint8Array;\n        var p = 0;\n        if (l[p] !== \" \") {\n            for(var _ = 0, D = 0; l[p] === h;)_++, p++;\n            for(var E = (l.length - p) * c + 1 >>> 0, N = new Uint8Array(E); l[p];){\n                var T = t[l.charCodeAt(p)];\n                if (T === 255) return;\n                for(var z = 0, U = E - 1; (T !== 0 || z < D) && U !== -1; U--, z++)T += a * N[U] >>> 0, N[U] = T % 256 >>> 0, T = T / 256 >>> 0;\n                if (T !== 0) throw new Error(\"Non-zero carry\");\n                D = z, p++;\n            }\n            if (l[p] !== \" \") {\n                for(var x = E - D; x !== E && N[x] === 0;)x++;\n                for(var $ = new Uint8Array(_ + (E - x)), Q = _; x !== E;)$[Q++] = N[x++];\n                return $;\n            }\n        }\n    }\n    function m(l) {\n        var p = b(l);\n        if (p) return p;\n        throw new Error(`Non-${e} character`);\n    }\n    return {\n        encode: g,\n        decodeUnsafe: b,\n        decode: m\n    };\n}\nvar ds = us, gs = ds;\nconst Ve = (o)=>{\n    if (o instanceof Uint8Array && o.constructor.name === \"Uint8Array\") return o;\n    if (o instanceof ArrayBuffer) return new Uint8Array(o);\n    if (ArrayBuffer.isView(o)) return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n}, ps = (o)=>new TextEncoder().encode(o), ys = (o)=>new TextDecoder().decode(o);\nclass Ds {\n    constructor(e, t, s){\n        this.name = e, this.prefix = t, this.baseEncode = s;\n    }\n    encode(e) {\n        if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;\n        throw Error(\"Unknown type, must be binary type\");\n    }\n}\nclass bs {\n    constructor(e, t, s){\n        if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = t.codePointAt(0), this.baseDecode = s;\n    }\n    decode(e) {\n        if (typeof e == \"string\") {\n            if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            return this.baseDecode(e.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(e) {\n        return je(this, e);\n    }\n}\nclass ms {\n    constructor(e){\n        this.decoders = e;\n    }\n    or(e) {\n        return je(this, e);\n    }\n    decode(e) {\n        const t = e[0], s = this.decoders[t];\n        if (s) return s.decode(e);\n        throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n}\nconst je = (o, e)=>new ms({\n        ...o.decoders || {\n            [o.prefix]: o\n        },\n        ...e.decoders || {\n            [e.prefix]: e\n        }\n    });\nclass fs {\n    constructor(e, t, s, i){\n        this.name = e, this.prefix = t, this.baseEncode = s, this.baseDecode = i, this.encoder = new Ds(e, t, s), this.decoder = new bs(e, t, i);\n    }\n    encode(e) {\n        return this.encoder.encode(e);\n    }\n    decode(e) {\n        return this.decoder.decode(e);\n    }\n}\nconst re = ({ name: o, prefix: e, encode: t, decode: s })=>new fs(o, e, t, s), Y = ({ prefix: o, name: e, alphabet: t })=>{\n    const { encode: s, decode: i } = gs(t, e);\n    return re({\n        prefix: o,\n        name: e,\n        encode: s,\n        decode: (r)=>Ve(i(r))\n    });\n}, _s = (o, e, t, s)=>{\n    const i = {};\n    for(let d = 0; d < e.length; ++d)i[e[d]] = d;\n    let r = o.length;\n    for(; o[r - 1] === \"=\";)--r;\n    const n = new Uint8Array(r * t / 8 | 0);\n    let a = 0, h = 0, c = 0;\n    for(let d = 0; d < r; ++d){\n        const g = i[o[d]];\n        if (g === void 0) throw new SyntaxError(`Non-${s} character`);\n        h = h << t | g, a += t, a >= 8 && (a -= 8, n[c++] = 255 & h >> a);\n    }\n    if (a >= t || 255 & h << 8 - a) throw new SyntaxError(\"Unexpected end of data\");\n    return n;\n}, Es = (o, e, t)=>{\n    const s = e[e.length - 1] === \"=\", i = (1 << t) - 1;\n    let r = \"\", n = 0, a = 0;\n    for(let h = 0; h < o.length; ++h)for(a = a << 8 | o[h], n += 8; n > t;)n -= t, r += e[i & a >> n];\n    if (n && (r += e[i & a << t - n]), s) for(; r.length * t & 7;)r += \"=\";\n    return r;\n}, f = ({ name: o, prefix: e, bitsPerChar: t, alphabet: s })=>re({\n        prefix: e,\n        name: o,\n        encode (i) {\n            return Es(i, s, t);\n        },\n        decode (i) {\n            return _s(i, s, t, o);\n        }\n    }), vs = re({\n    prefix: \"\\x00\",\n    name: \"identity\",\n    encode: (o)=>ys(o),\n    decode: (o)=>ps(o)\n});\nvar ws = Object.freeze({\n    __proto__: null,\n    identity: vs\n});\nconst Is = f({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n});\nvar Ts = Object.freeze({\n    __proto__: null,\n    base2: Is\n});\nconst Cs = f({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n});\nvar Ss = Object.freeze({\n    __proto__: null,\n    base8: Cs\n});\nconst Ps = Y({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n});\nvar Rs = Object.freeze({\n    __proto__: null,\n    base10: Ps\n});\nconst xs = f({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), Os = f({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n});\nvar As = Object.freeze({\n    __proto__: null,\n    base16: xs,\n    base16upper: Os\n});\nconst Ns = f({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), zs = f({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), Ls = f({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), $s = f({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), Fs = f({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), Us = f({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), Ks = f({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), Ms = f({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), ks = f({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n});\nvar Bs = Object.freeze({\n    __proto__: null,\n    base32: Ns,\n    base32upper: zs,\n    base32pad: Ls,\n    base32padupper: $s,\n    base32hex: Fs,\n    base32hexupper: Us,\n    base32hexpad: Ks,\n    base32hexpadupper: Ms,\n    base32z: ks\n});\nconst Vs = Y({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), js = Y({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\nvar qs = Object.freeze({\n    __proto__: null,\n    base36: Vs,\n    base36upper: js\n});\nconst Gs = Y({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), Hs = Y({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\nvar Ys = Object.freeze({\n    __proto__: null,\n    base58btc: Gs,\n    base58flickr: Hs\n});\nconst Js = f({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), Ws = f({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), Xs = f({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), Zs = f({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n});\nvar Qs = Object.freeze({\n    __proto__: null,\n    base64: Js,\n    base64pad: Ws,\n    base64url: Xs,\n    base64urlpad: Zs\n});\nconst qe = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), er = qe.reduce((o, e, t)=>(o[t] = e, o), []), tr = qe.reduce((o, e, t)=>(o[e.codePointAt(0)] = t, o), []);\nfunction ir(o) {\n    return o.reduce((e, t)=>(e += er[t], e), \"\");\n}\nfunction sr(o) {\n    const e = [];\n    for (const t of o){\n        const s = tr[t.codePointAt(0)];\n        if (s === void 0) throw new Error(`Non-base256emoji character: ${t}`);\n        e.push(s);\n    }\n    return new Uint8Array(e);\n}\nconst rr = re({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: ir,\n    decode: sr\n});\nvar nr = Object.freeze({\n    __proto__: null,\n    base256emoji: rr\n}), or = He, Ge = 128, ar = 127, hr = ~ar, cr = Math.pow(2, 31);\nfunction He(o, e, t) {\n    e = e || [], t = t || 0;\n    for(var s = t; o >= cr;)e[t++] = o & 255 | Ge, o /= 128;\n    for(; o & hr;)e[t++] = o & 255 | Ge, o >>>= 7;\n    return e[t] = o | 0, He.bytes = t - s + 1, e;\n}\nvar lr = De, ur = 128, Ye = 127;\nfunction De(o, s) {\n    var t = 0, s = s || 0, i = 0, r = s, n, a = o.length;\n    do {\n        if (r >= a) throw De.bytes = 0, new RangeError(\"Could not decode varint\");\n        n = o[r++], t += i < 28 ? (n & Ye) << i : (n & Ye) * Math.pow(2, i), i += 7;\n    }while (n >= ur);\n    return De.bytes = r - s, t;\n}\nvar dr = Math.pow(2, 7), gr = Math.pow(2, 14), pr = Math.pow(2, 21), yr = Math.pow(2, 28), Dr = Math.pow(2, 35), br = Math.pow(2, 42), mr = Math.pow(2, 49), fr = Math.pow(2, 56), _r = Math.pow(2, 63), Er = function(o) {\n    return o < dr ? 1 : o < gr ? 2 : o < pr ? 3 : o < yr ? 4 : o < Dr ? 5 : o < br ? 6 : o < mr ? 7 : o < fr ? 8 : o < _r ? 9 : 10;\n}, vr = {\n    encode: or,\n    decode: lr,\n    encodingLength: Er\n}, Je = vr;\nconst We = (o, e, t = 0)=>(Je.encode(o, e, t), e), Xe = (o)=>Je.encodingLength(o), be = (o, e)=>{\n    const t = e.byteLength, s = Xe(o), i = s + Xe(t), r = new Uint8Array(i + t);\n    return We(o, r, 0), We(t, r, s), r.set(e, i), new wr(o, t, e, r);\n};\nclass wr {\n    constructor(e, t, s, i){\n        this.code = e, this.size = t, this.digest = s, this.bytes = i;\n    }\n}\nconst Ze = ({ name: o, code: e, encode: t })=>new Ir(o, e, t);\nclass Ir {\n    constructor(e, t, s){\n        this.name = e, this.code = t, this.encode = s;\n    }\n    digest(e) {\n        if (e instanceof Uint8Array) {\n            const t = this.encode(e);\n            return t instanceof Uint8Array ? be(this.code, t) : t.then((s)=>be(this.code, s));\n        } else throw Error(\"Unknown type, must be binary type\");\n    }\n}\nconst Qe = (o)=>async (e)=>new Uint8Array(await crypto.subtle.digest(o, e)), Tr = Ze({\n    name: \"sha2-256\",\n    code: 18,\n    encode: Qe(\"SHA-256\")\n}), Cr = Ze({\n    name: \"sha2-512\",\n    code: 19,\n    encode: Qe(\"SHA-512\")\n});\nvar Sr = Object.freeze({\n    __proto__: null,\n    sha256: Tr,\n    sha512: Cr\n});\nconst et = 0, Pr = \"identity\", tt = Ve, Rr = (o)=>be(et, tt(o)), xr = {\n    code: et,\n    name: Pr,\n    encode: tt,\n    digest: Rr\n};\nvar Or = Object.freeze({\n    __proto__: null,\n    identity: xr\n});\nnew TextEncoder, new TextDecoder;\nconst it = {\n    ...ws,\n    ...Ts,\n    ...Ss,\n    ...Rs,\n    ...As,\n    ...Bs,\n    ...qs,\n    ...Ys,\n    ...Qs,\n    ...nr\n};\n({\n    ...Sr,\n    ...Or\n});\nfunction Ar(o = 0) {\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(o) : new Uint8Array(o);\n}\nfunction st(o, e, t, s) {\n    return {\n        name: o,\n        prefix: e,\n        encoder: {\n            name: o,\n            prefix: e,\n            encode: t\n        },\n        decoder: {\n            decode: s\n        }\n    };\n}\nconst rt = st(\"utf8\", \"u\", (o)=>\"u\" + new TextDecoder(\"utf8\").decode(o), (o)=>new TextEncoder().encode(o.substring(1))), me = st(\"ascii\", \"a\", (o)=>{\n    let e = \"a\";\n    for(let t = 0; t < o.length; t++)e += String.fromCharCode(o[t]);\n    return e;\n}, (o)=>{\n    o = o.substring(1);\n    const e = Ar(o.length);\n    for(let t = 0; t < o.length; t++)e[t] = o.charCodeAt(t);\n    return e;\n}), Nr = {\n    utf8: rt,\n    \"utf-8\": rt,\n    hex: it.base16,\n    latin1: me,\n    ascii: me,\n    binary: me,\n    ...it\n};\nfunction zr(o, e = \"utf8\") {\n    const t = Nr[e];\n    if (!t) throw new Error(`Unsupported encoding \"${e}\"`);\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(o, \"utf8\") : t.decoder.decode(`${t.prefix}${o}`);\n}\nconst fe = \"wc\", _e = 2, ne = \"core\", O = `${fe}@2:${ne}:`, nt = {\n    name: ne,\n    logger: \"error\"\n}, ot = {\n    database: \":memory:\"\n}, at = \"crypto\", Ee = \"client_ed25519_seed\", ht = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY, ct = \"keychain\", lt = \"0.3\", ut = \"messages\", dt = \"0.3\", gt = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.SIX_HOURS, pt = \"publisher\", yt = \"irn\", Dt = \"error\", ve = \"wss://relay.walletconnect.org\", bt = \"relayer\", w = {\n    message: \"relayer_message\",\n    message_ack: \"relayer_message_ack\",\n    connect: \"relayer_connect\",\n    disconnect: \"relayer_disconnect\",\n    error: \"relayer_error\",\n    connection_stalled: \"relayer_connection_stalled\",\n    transport_closed: \"relayer_transport_closed\",\n    publish: \"relayer_publish\"\n}, mt = \"_subscription\", I = {\n    payload: \"payload\",\n    connect: \"connect\",\n    disconnect: \"disconnect\",\n    error: \"error\"\n}, ft = .1, Lr = {\n    database: \":memory:\"\n}, we = \"2.15.2\", _t = 1e4, Et = \"0.3\", vt = \"WALLETCONNECT_CLIENT_ID\", A = {\n    created: \"subscription_created\",\n    deleted: \"subscription_deleted\",\n    expired: \"subscription_expired\",\n    disabled: \"subscription_disabled\",\n    sync: \"subscription_sync\",\n    resubscribed: \"subscription_resubscribed\"\n}, $r = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS, wt = \"subscription\", It = \"0.3\", Tt = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_SECONDS * 1e3, Ct = \"pairing\", St = \"0.3\", Fr = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS, V = {\n    wc_pairingDelete: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 1e3\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 1001\n        }\n    },\n    wc_pairingPing: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1002\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1003\n        }\n    },\n    unregistered_method: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        }\n    }\n}, J = {\n    create: \"pairing_create\",\n    expire: \"pairing_expire\",\n    delete: \"pairing_delete\",\n    ping: \"pairing_ping\"\n}, P = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, Pt = \"history\", Rt = \"0.3\", xt = \"expirer\", R = {\n    created: \"expirer_created\",\n    deleted: \"expirer_deleted\",\n    expired: \"expirer_expired\",\n    sync: \"expirer_sync\"\n}, Ot = \"0.3\", Ur = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY, At = \"verify-api\", Kr = \"https://verify.walletconnect.com\", Nt = \"https://verify.walletconnect.org\", W = Nt, zt = `${W}/v3`, Lt = [\n    Kr,\n    Nt\n], $t = \"echo\", Ft = \"https://echo.walletconnect.com\", Mr = \"event-client\", L = {\n    pairing_started: \"pairing_started\",\n    pairing_uri_validation_success: \"pairing_uri_validation_success\",\n    pairing_uri_not_expired: \"pairing_uri_not_expired\",\n    store_new_pairing: \"store_new_pairing\",\n    subscribing_pairing_topic: \"subscribing_pairing_topic\",\n    subscribe_pairing_topic_success: \"subscribe_pairing_topic_success\",\n    existing_pairing: \"existing_pairing\",\n    pairing_not_expired: \"pairing_not_expired\",\n    emit_inactive_pairing: \"emit_inactive_pairing\",\n    emit_session_proposal: \"emit_session_proposal\",\n    subscribing_to_pairing_topic: \"subscribing_to_pairing_topic\"\n}, F = {\n    no_wss_connection: \"no_wss_connection\",\n    no_internet_connection: \"no_internet_connection\",\n    malformed_pairing_uri: \"malformed_pairing_uri\",\n    active_pairing_already_exists: \"active_pairing_already_exists\",\n    subscribe_pairing_topic_failure: \"subscribe_pairing_topic_failure\",\n    pairing_expired: \"pairing_expired\",\n    proposal_expired: \"proposal_expired\",\n    proposal_listener_not_found: \"proposal_listener_not_found\"\n}, kr = {\n    session_approve_started: \"session_approve_started\",\n    proposal_not_expired: \"proposal_not_expired\",\n    session_namespaces_validation_success: \"session_namespaces_validation_success\",\n    create_session_topic: \"create_session_topic\",\n    subscribing_session_topic: \"subscribing_session_topic\",\n    subscribe_session_topic_success: \"subscribe_session_topic_success\",\n    publishing_session_approve: \"publishing_session_approve\",\n    session_approve_publish_success: \"session_approve_publish_success\",\n    store_session: \"store_session\",\n    publishing_session_settle: \"publishing_session_settle\",\n    session_settle_publish_success: \"session_settle_publish_success\"\n}, Br = {\n    no_internet_connection: \"no_internet_connection\",\n    no_wss_connection: \"no_wss_connection\",\n    proposal_expired: \"proposal_expired\",\n    subscribe_session_topic_failure: \"subscribe_session_topic_failure\",\n    session_approve_publish_failure: \"session_approve_publish_failure\",\n    session_settle_publish_failure: \"session_settle_publish_failure\",\n    session_approve_namespace_validation_failure: \"session_approve_namespace_validation_failure\",\n    proposal_not_found: \"proposal_not_found\"\n}, Vr = {\n    authenticated_session_approve_started: \"authenticated_session_approve_started\",\n    authenticated_session_not_expired: \"authenticated_session_not_expired\",\n    chains_caip2_compliant: \"chains_caip2_compliant\",\n    chains_evm_compliant: \"chains_evm_compliant\",\n    create_authenticated_session_topic: \"create_authenticated_session_topic\",\n    cacaos_verified: \"cacaos_verified\",\n    store_authenticated_session: \"store_authenticated_session\",\n    subscribing_authenticated_session_topic: \"subscribing_authenticated_session_topic\",\n    subscribe_authenticated_session_topic_success: \"subscribe_authenticated_session_topic_success\",\n    publishing_authenticated_session_approve: \"publishing_authenticated_session_approve\",\n    authenticated_session_approve_publish_success: \"authenticated_session_approve_publish_success\"\n}, jr = {\n    no_internet_connection: \"no_internet_connection\",\n    no_wss_connection: \"no_wss_connection\",\n    missing_session_authenticate_request: \"missing_session_authenticate_request\",\n    session_authenticate_request_expired: \"session_authenticate_request_expired\",\n    chains_caip2_compliant_failure: \"chains_caip2_compliant_failure\",\n    chains_evm_compliant_failure: \"chains_evm_compliant_failure\",\n    invalid_cacao: \"invalid_cacao\",\n    subscribe_authenticated_session_topic_failure: \"subscribe_authenticated_session_topic_failure\",\n    authenticated_session_approve_publish_failure: \"authenticated_session_approve_publish_failure\",\n    authenticated_session_pending_request_not_found: \"authenticated_session_pending_request_not_found\"\n}, Ut = .1, Kt = \"event-client\", Mt = 86400, kt = \"https://pulse.walletconnect.com/batch\";\nclass Bt {\n    constructor(e, t){\n        this.core = e, this.logger = t, this.keychain = new Map, this.name = ct, this.version = lt, this.initialized = !1, this.storagePrefix = O, this.init = async ()=>{\n            if (!this.initialized) {\n                const s = await this.getKeyChain();\n                typeof s < \"u\" && (this.keychain = s), this.initialized = !0;\n            }\n        }, this.has = (s)=>(this.isInitialized(), this.keychain.has(s)), this.set = async (s, i)=>{\n            this.isInitialized(), this.keychain.set(s, i), await this.persist();\n        }, this.get = (s)=>{\n            this.isInitialized();\n            const i = this.keychain.get(s);\n            if (typeof i > \"u\") {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${s}`);\n                throw new Error(r);\n            }\n            return i;\n        }, this.del = async (s)=>{\n            this.isInitialized(), this.keychain.delete(s), await this.persist();\n        }, this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    async setKeyChain(e) {\n        await this.core.storage.setItem(this.storageKey, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.mapToObj)(e));\n    }\n    async getKeyChain() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.objToMap)(e) : void 0;\n    }\n    async persist() {\n        await this.setKeyChain(this.keychain);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass Vt {\n    constructor(e, t, s){\n        this.core = e, this.logger = t, this.name = at, this.randomSessionIdentifier = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.generateRandomBytes32)(), this.initialized = !1, this.init = async ()=>{\n            this.initialized || (await this.keychain.init(), this.initialized = !0);\n        }, this.hasKeys = (i)=>(this.isInitialized(), this.keychain.has(i)), this.getClientId = async ()=>{\n            this.isInitialized();\n            const i = await this.getClientSeed(), r = _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.generateKeyPair(i);\n            return _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.encodeIss(r.publicKey);\n        }, this.generateKeyPair = ()=>{\n            this.isInitialized();\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.generateKeyPair)();\n            return this.setPrivateKey(i.publicKey, i.privateKey);\n        }, this.signJWT = async (i)=>{\n            this.isInitialized();\n            const r = await this.getClientSeed(), n = _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.generateKeyPair(r), a = this.randomSessionIdentifier, h = ht;\n            return await _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.signJWT(a, i, h, n);\n        }, this.generateSharedKey = (i, r, n)=>{\n            this.isInitialized();\n            const a = this.getPrivateKey(i), h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.deriveSymKey)(a, r);\n            return this.setSymKey(h, n);\n        }, this.setSymKey = async (i, r)=>{\n            this.isInitialized();\n            const n = r || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.hashKey)(i);\n            return await this.keychain.set(n, i), n;\n        }, this.deleteKeyPair = async (i)=>{\n            this.isInitialized(), await this.keychain.del(i);\n        }, this.deleteSymKey = async (i)=>{\n            this.isInitialized(), await this.keychain.del(i);\n        }, this.encode = async (i, r, n)=>{\n            this.isInitialized();\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.validateEncoding)(n), h = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_4__.safeJsonStringify)(r);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isTypeOneEnvelope)(a)) {\n                const b = a.senderPublicKey, m = a.receiverPublicKey;\n                i = await this.generateSharedKey(b, m);\n            }\n            const c = this.getSymKey(i), { type: d, senderPublicKey: g } = a;\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.encrypt)({\n                type: d,\n                symKey: c,\n                message: h,\n                senderPublicKey: g\n            });\n        }, this.decode = async (i, r, n)=>{\n            this.isInitialized();\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.validateDecoding)(r, n);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isTypeOneEnvelope)(a)) {\n                const h = a.receiverPublicKey, c = a.senderPublicKey;\n                i = await this.generateSharedKey(h, c);\n            }\n            try {\n                const h = this.getSymKey(i), c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.decrypt)({\n                    symKey: h,\n                    encoded: r\n                });\n                return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_4__.safeJsonParse)(c);\n            } catch (h) {\n                this.logger.error(`Failed to decode message from topic: '${i}', clientId: '${await this.getClientId()}'`), this.logger.error(h);\n            }\n        }, this.getPayloadType = (i)=>{\n            const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.deserialize)(i);\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.decodeTypeByte)(r.type);\n        }, this.getPayloadSenderPublicKey = (i)=>{\n            const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.deserialize)(i);\n            return r.senderPublicKey ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_6__.toString)(r.senderPublicKey, _walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.BASE16) : void 0;\n        }, this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.keychain = s || new Bt(this.core, this.logger);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async setPrivateKey(e, t) {\n        return await this.keychain.set(e, t), e;\n    }\n    getPrivateKey(e) {\n        return this.keychain.get(e);\n    }\n    async getClientSeed() {\n        let e = \"\";\n        try {\n            e = this.keychain.get(Ee);\n        } catch  {\n            e = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.generateRandomBytes32)(), await this.keychain.set(Ee, e);\n        }\n        return zr(e, \"base16\");\n    }\n    getSymKey(e) {\n        return this.keychain.get(e);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass jt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IMessageTracker {\n    constructor(e, t){\n        super(e, t), this.logger = e, this.core = t, this.messages = new Map, this.name = ut, this.version = dt, this.initialized = !1, this.storagePrefix = O, this.init = async ()=>{\n            if (!this.initialized) {\n                this.logger.trace(\"Initialized\");\n                try {\n                    const s = await this.getRelayerMessages();\n                    typeof s < \"u\" && (this.messages = s), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({\n                        type: \"method\",\n                        method: \"restore\",\n                        size: this.messages.size\n                    });\n                } catch (s) {\n                    this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s);\n                } finally{\n                    this.initialized = !0;\n                }\n            }\n        }, this.set = async (s, i)=>{\n            this.isInitialized();\n            const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.hashMessage)(i);\n            let n = this.messages.get(s);\n            return typeof n > \"u\" && (n = {}), typeof n[r] < \"u\" || (n[r] = i, this.messages.set(s, n), await this.persist()), r;\n        }, this.get = (s)=>{\n            this.isInitialized();\n            let i = this.messages.get(s);\n            return typeof i > \"u\" && (i = {}), i;\n        }, this.has = (s, i)=>{\n            this.isInitialized();\n            const r = this.get(s), n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.hashMessage)(i);\n            return typeof r[n] < \"u\";\n        }, this.del = async (s)=>{\n            this.isInitialized(), this.messages.delete(s), await this.persist();\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(e, this.name), this.core = t;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    async setRelayerMessages(e) {\n        await this.core.storage.setItem(this.storageKey, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.mapToObj)(e));\n    }\n    async getRelayerMessages() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.objToMap)(e) : void 0;\n    }\n    async persist() {\n        await this.setRelayerMessages(this.messages);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass qr extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IPublisher {\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = pt, this.queue = new Map, this.publishTimeout = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_MINUTE), this.failedPublishTimeout = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_SECOND), this.needsTransportRestart = !1, this.publish = async (s, i, r)=>{\n            var n;\n            this.logger.debug(\"Publishing Payload\"), this.logger.trace({\n                type: \"method\",\n                method: \"publish\",\n                params: {\n                    topic: s,\n                    message: i,\n                    opts: r\n                }\n            });\n            const a = r?.ttl || gt, h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolName)(r), c = r?.prompt || !1, d = r?.tag || 0, g = r?.id || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.getBigIntRpcId)().toString(), b = {\n                topic: s,\n                message: i,\n                opts: {\n                    ttl: a,\n                    relay: h,\n                    prompt: c,\n                    tag: d,\n                    id: g,\n                    attestation: r?.attestation\n                }\n            }, m = `Failed to publish payload, please try again. id:${g} tag:${d}`, l = Date.now();\n            let p, _ = 1;\n            try {\n                for(; p === void 0;){\n                    if (Date.now() - l > this.publishTimeout) throw new Error(m);\n                    this.logger.trace({\n                        id: g,\n                        attempts: _\n                    }, `publisher.publish - attempt ${_}`), p = await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(this.rpcPublish(s, i, a, h, c, d, g, r?.attestation).catch((D)=>this.logger.warn(D)), this.publishTimeout, m), _++, p || await new Promise((D)=>setTimeout(D, this.failedPublishTimeout));\n                }\n                this.relayer.events.emit(w.publish, b), this.logger.debug(\"Successfully Published Payload\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"publish\",\n                    params: {\n                        id: g,\n                        topic: s,\n                        message: i,\n                        opts: r\n                    }\n                });\n            } catch (D) {\n                if (this.logger.debug(\"Failed to Publish Payload\"), this.logger.error(D), (n = r?.internal) != null && n.throwOnFailedPublish) throw D;\n                this.queue.set(g, b);\n            }\n        }, this.on = (s, i)=>{\n            this.events.on(s, i);\n        }, this.once = (s, i)=>{\n            this.events.once(s, i);\n        }, this.off = (s, i)=>{\n            this.events.off(s, i);\n        }, this.removeListener = (s, i)=>{\n            this.events.removeListener(s, i);\n        }, this.relayer = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.registerEventListeners();\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    rpcPublish(e, t, s, i, r, n, a, h) {\n        var c, d, g, b;\n        const m = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolApi)(i.protocol).publish,\n            params: {\n                topic: e,\n                message: t,\n                ttl: s,\n                prompt: r,\n                tag: n,\n                attestation: h\n            },\n            id: a\n        };\n        return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isUndefined)((c = m.params) == null ? void 0 : c.prompt) && ((d = m.params) == null || delete d.prompt), (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isUndefined)((g = m.params) == null ? void 0 : g.tag) && ((b = m.params) == null || delete b.tag), this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"message\",\n            direction: \"outgoing\",\n            request: m\n        }), this.relayer.request(m);\n    }\n    removeRequestFromQueue(e) {\n        this.queue.delete(e);\n    }\n    checkQueue() {\n        this.queue.forEach(async (e)=>{\n            const { topic: t, message: s, opts: i } = e;\n            await this.publish(t, s, i);\n        });\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, ()=>{\n            if (this.needsTransportRestart) {\n                this.needsTransportRestart = !1, this.relayer.events.emit(w.connection_stalled);\n                return;\n            }\n            this.checkQueue();\n        }), this.relayer.on(w.message_ack, (e)=>{\n            this.removeRequestFromQueue(e.id.toString());\n        });\n    }\n}\nclass Gr {\n    constructor(){\n        this.map = new Map, this.set = (e, t)=>{\n            const s = this.get(e);\n            this.exists(e, t) || this.map.set(e, [\n                ...s,\n                t\n            ]);\n        }, this.get = (e)=>this.map.get(e) || [], this.exists = (e, t)=>this.get(e).includes(t), this.delete = (e, t)=>{\n            if (typeof t > \"u\") {\n                this.map.delete(e);\n                return;\n            }\n            if (!this.map.has(e)) return;\n            const s = this.get(e);\n            if (!this.exists(e, t)) return;\n            const i = s.filter((r)=>r !== t);\n            if (!i.length) {\n                this.map.delete(e);\n                return;\n            }\n            this.map.set(e, i);\n        }, this.clear = ()=>{\n            this.map.clear();\n        };\n    }\n    get topics() {\n        return Array.from(this.map.keys());\n    }\n}\nvar Hr = Object.defineProperty, Yr = Object.defineProperties, Jr = Object.getOwnPropertyDescriptors, qt = Object.getOwnPropertySymbols, Wr = Object.prototype.hasOwnProperty, Xr = Object.prototype.propertyIsEnumerable, Gt = (o, e, t)=>e in o ? Hr(o, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : o[e] = t, X = (o, e)=>{\n    for(var t in e || (e = {}))Wr.call(e, t) && Gt(o, t, e[t]);\n    if (qt) for (var t of qt(e))Xr.call(e, t) && Gt(o, t, e[t]);\n    return o;\n}, Ie = (o, e)=>Yr(o, Jr(e));\nclass Ht extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.ISubscriber {\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, this.subscriptions = new Map, this.topicMap = new Gr, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = wt, this.version = It, this.pending = new Map, this.cached = [], this.initialized = !1, this.pendingSubscriptionWatchLabel = \"pending_sub_watch_label\", this.pollingInterval = 20, this.storagePrefix = O, this.subscribeTimeout = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_MINUTE), this.restartInProgress = !1, this.batchSubscribeTopicsLimit = 500, this.pendingBatchMessages = [], this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), this.registerEventListeners(), this.clientId = await this.relayer.core.crypto.getClientId());\n        }, this.subscribe = async (s, i)=>{\n            await this.restartToComplete(), this.isInitialized(), this.logger.debug(\"Subscribing Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"subscribe\",\n                params: {\n                    topic: s,\n                    opts: i\n                }\n            });\n            try {\n                const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolName)(i), n = {\n                    topic: s,\n                    relay: r\n                };\n                this.pending.set(s, n);\n                const a = await this.rpcSubscribe(s, r);\n                return typeof a == \"string\" && (this.onSubscribe(a, n), this.logger.debug(\"Successfully Subscribed Topic\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"subscribe\",\n                    params: {\n                        topic: s,\n                        opts: i\n                    }\n                })), a;\n            } catch (r) {\n                throw this.logger.debug(\"Failed to Subscribe Topic\"), this.logger.error(r), r;\n            }\n        }, this.unsubscribe = async (s, i)=>{\n            await this.restartToComplete(), this.isInitialized(), typeof i?.id < \"u\" ? await this.unsubscribeById(s, i.id, i) : await this.unsubscribeByTopic(s, i);\n        }, this.isSubscribed = async (s)=>{\n            if (this.topics.includes(s)) return !0;\n            const i = `${this.pendingSubscriptionWatchLabel}_${s}`;\n            return await new Promise((r, n)=>{\n                const a = new _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.Watch;\n                a.start(i);\n                const h = setInterval(()=>{\n                    !this.pending.has(s) && this.topics.includes(s) && (clearInterval(h), a.stop(i), r(!0)), a.elapsed(i) >= Tt && (clearInterval(h), a.stop(i), n(new Error(\"Subscription resolution timeout\")));\n                }, this.pollingInterval);\n            }).catch(()=>!1);\n        }, this.on = (s, i)=>{\n            this.events.on(s, i);\n        }, this.once = (s, i)=>{\n            this.events.once(s, i);\n        }, this.off = (s, i)=>{\n            this.events.off(s, i);\n        }, this.removeListener = (s, i)=>{\n            this.events.removeListener(s, i);\n        }, this.start = async ()=>{\n            await this.onConnect();\n        }, this.stop = async ()=>{\n            await this.onDisconnect();\n        }, this.restart = async ()=>{\n            this.restartInProgress = !0, await this.restore(), await this.reset(), this.restartInProgress = !1;\n        }, this.relayer = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.clientId = \"\";\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.subscriptions.size;\n    }\n    get ids() {\n        return Array.from(this.subscriptions.keys());\n    }\n    get values() {\n        return Array.from(this.subscriptions.values());\n    }\n    get topics() {\n        return this.topicMap.topics;\n    }\n    hasSubscription(e, t) {\n        let s = !1;\n        try {\n            s = this.getSubscription(e).topic === t;\n        } catch  {}\n        return s;\n    }\n    onEnable() {\n        this.cached = [], this.initialized = !0;\n    }\n    onDisable() {\n        this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();\n    }\n    async unsubscribeByTopic(e, t) {\n        const s = this.topicMap.get(e);\n        await Promise.all(s.map(async (i)=>await this.unsubscribeById(e, i, t)));\n    }\n    async unsubscribeById(e, t, s) {\n        this.logger.debug(\"Unsubscribing Topic\"), this.logger.trace({\n            type: \"method\",\n            method: \"unsubscribe\",\n            params: {\n                topic: e,\n                id: t,\n                opts: s\n            }\n        });\n        try {\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolName)(s);\n            await this.rpcUnsubscribe(e, t, i);\n            const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getSdkError)(\"USER_DISCONNECTED\", `${this.name}, ${e}`);\n            await this.onUnsubscribe(e, t, r), this.logger.debug(\"Successfully Unsubscribed Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"unsubscribe\",\n                params: {\n                    topic: e,\n                    id: t,\n                    opts: s\n                }\n            });\n        } catch (i) {\n            throw this.logger.debug(\"Failed to Unsubscribe Topic\"), this.logger.error(i), i;\n        }\n    }\n    async rpcSubscribe(e, t) {\n        const s = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolApi)(t.protocol).subscribe,\n            params: {\n                topic: e\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        });\n        try {\n            return await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(this.relayer.request(s).catch((i)=>this.logger.warn(i)), this.subscribeTimeout) ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.hashMessage)(e + this.clientId) : null;\n        } catch  {\n            this.logger.debug(\"Outgoing Relay Subscribe Payload stalled\"), this.relayer.events.emit(w.connection_stalled);\n        }\n        return null;\n    }\n    async rpcBatchSubscribe(e) {\n        if (!e.length) return;\n        const t = e[0].relay, s = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolApi)(t.protocol).batchSubscribe,\n            params: {\n                topics: e.map((i)=>i.topic)\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        });\n        try {\n            return await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(this.relayer.request(s).catch((i)=>this.logger.warn(i)), this.subscribeTimeout);\n        } catch  {\n            this.relayer.events.emit(w.connection_stalled);\n        }\n    }\n    async rpcBatchFetchMessages(e) {\n        if (!e.length) return;\n        const t = e[0].relay, s = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolApi)(t.protocol).batchFetchMessages,\n            params: {\n                topics: e.map((r)=>r.topic)\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        });\n        let i;\n        try {\n            i = await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(this.relayer.request(s).catch((r)=>this.logger.warn(r)), this.subscribeTimeout);\n        } catch  {\n            this.relayer.events.emit(w.connection_stalled);\n        }\n        return i;\n    }\n    rpcUnsubscribe(e, t, s) {\n        const i = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolApi)(s.protocol).unsubscribe,\n            params: {\n                topic: e,\n                id: t\n            }\n        };\n        return this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: i\n        }), this.relayer.request(i);\n    }\n    onSubscribe(e, t) {\n        this.setSubscription(e, Ie(X({}, t), {\n            id: e\n        })), this.pending.delete(t.topic);\n    }\n    onBatchSubscribe(e) {\n        e.length && e.forEach((t)=>{\n            this.setSubscription(t.id, X({}, t)), this.pending.delete(t.topic);\n        });\n    }\n    async onUnsubscribe(e, t, s) {\n        this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, s), await this.relayer.messages.del(e);\n    }\n    async setRelayerSubscriptions(e) {\n        await this.relayer.core.storage.setItem(this.storageKey, e);\n    }\n    async getRelayerSubscriptions() {\n        return await this.relayer.core.storage.getItem(this.storageKey);\n    }\n    setSubscription(e, t) {\n        this.logger.debug(\"Setting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"setSubscription\",\n            id: e,\n            subscription: t\n        }), this.addSubscription(e, t);\n    }\n    addSubscription(e, t) {\n        this.subscriptions.set(e, X({}, t)), this.topicMap.set(t.topic, e), this.events.emit(A.created, t);\n    }\n    getSubscription(e) {\n        this.logger.debug(\"Getting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"getSubscription\",\n            id: e\n        });\n        const t = this.subscriptions.get(e);\n        if (!t) {\n            const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw new Error(s);\n        }\n        return t;\n    }\n    deleteSubscription(e, t) {\n        this.logger.debug(\"Deleting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"deleteSubscription\",\n            id: e,\n            reason: t\n        });\n        const s = this.getSubscription(e);\n        this.subscriptions.delete(e), this.topicMap.delete(s.topic, e), this.events.emit(A.deleted, Ie(X({}, s), {\n            reason: t\n        }));\n    }\n    async persist() {\n        await this.setRelayerSubscriptions(this.values), this.events.emit(A.sync);\n    }\n    async reset() {\n        if (this.cached.length) {\n            const e = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);\n            for(let t = 0; t < e; t++){\n                const s = this.cached.splice(0, this.batchSubscribeTopicsLimit);\n                await this.batchFetchMessages(s), await this.batchSubscribe(s);\n            }\n        }\n        this.events.emit(A.resubscribed);\n    }\n    async restore() {\n        try {\n            const e = await this.getRelayerSubscriptions();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.subscriptions.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                subscriptions: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);\n        }\n    }\n    async batchSubscribe(e) {\n        if (!e.length) return;\n        const t = await this.rpcBatchSubscribe(e);\n        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidArray)(t) && this.onBatchSubscribe(t.map((s, i)=>Ie(X({}, e[i]), {\n                id: s\n            })));\n    }\n    async batchFetchMessages(e) {\n        if (!e.length) return;\n        this.logger.trace(`Fetching batch messages for ${e.length} subscriptions`);\n        const t = await this.rpcBatchFetchMessages(e);\n        t && t.messages && (this.pendingBatchMessages = this.pendingBatchMessages.concat(t.messages));\n    }\n    async onConnect() {\n        await this.restart(), this.onEnable();\n    }\n    onDisconnect() {\n        this.onDisable();\n    }\n    async checkPending() {\n        if (!this.initialized || !this.relayer.connected) return;\n        const e = [];\n        this.pending.forEach((t)=>{\n            e.push(t);\n        }), await this.batchSubscribe(e), this.pendingBatchMessages.length && (await this.relayer.handleBatchMessageEvents(this.pendingBatchMessages), this.pendingBatchMessages = []);\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, async ()=>{\n            await this.checkPending();\n        }), this.events.on(A.created, async (e)=>{\n            const t = A.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), await this.persist();\n        }), this.events.on(A.deleted, async (e)=>{\n            const t = A.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), await this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async restartToComplete() {\n        this.restartInProgress && await new Promise((e)=>{\n            const t = setInterval(()=>{\n                this.restartInProgress || (clearInterval(t), e());\n            }, this.pollingInterval);\n        });\n    }\n}\nvar Zr = Object.defineProperty, Yt = Object.getOwnPropertySymbols, Qr = Object.prototype.hasOwnProperty, en = Object.prototype.propertyIsEnumerable, Jt = (o, e, t)=>e in o ? Zr(o, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : o[e] = t, tn = (o, e)=>{\n    for(var t in e || (e = {}))Qr.call(e, t) && Jt(o, t, e[t]);\n    if (Yt) for (var t of Yt(e))en.call(e, t) && Jt(o, t, e[t]);\n    return o;\n};\nclass Wt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IRelayer {\n    constructor(e){\n        super(e), this.protocol = \"wc\", this.version = 2, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = bt, this.transportExplicitlyClosed = !1, this.initialized = !1, this.connectionAttemptInProgress = !1, this.connectionStatusPollingInterval = 20, this.staleConnectionErrors = [\n            \"socket hang up\",\n            \"stalled\",\n            \"interrupted\"\n        ], this.hasExperiencedNetworkDisruption = !1, this.requestsInFlight = new Map, this.heartBeatTimeout = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_SECONDS + _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_SECOND), this.request = async (t)=>{\n            var s, i;\n            this.logger.debug(\"Publishing Request Payload\");\n            const r = t.id || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.getBigIntRpcId)().toString();\n            await this.toEstablishConnection();\n            try {\n                const n = this.provider.request(t);\n                this.requestsInFlight.set(r, {\n                    promise: n,\n                    request: t\n                }), this.logger.trace({\n                    id: r,\n                    method: t.method,\n                    topic: (s = t.params) == null ? void 0 : s.topic\n                }, \"relayer.request - attempt to publish...\");\n                const a = await new Promise(async (h, c)=>{\n                    const d = ()=>{\n                        c(new Error(`relayer.request - publish interrupted, id: ${r}`));\n                    };\n                    this.provider.on(I.disconnect, d);\n                    const g = await n;\n                    this.provider.off(I.disconnect, d), h(g);\n                });\n                return this.logger.trace({\n                    id: r,\n                    method: t.method,\n                    topic: (i = t.params) == null ? void 0 : i.topic\n                }, \"relayer.request - published\"), a;\n            } catch (n) {\n                throw this.logger.debug(`Failed to Publish Request: ${r}`), n;\n            } finally{\n                this.requestsInFlight.delete(r);\n            }\n        }, this.resetPingTimeout = ()=>{\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isNode)()) try {\n                clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(()=>{\n                    var t, s, i;\n                    (i = (s = (t = this.provider) == null ? void 0 : t.connection) == null ? void 0 : s.socket) == null || i.terminate();\n                }, this.heartBeatTimeout);\n            } catch (t) {\n                this.logger.warn(t);\n            }\n        }, this.onPayloadHandler = (t)=>{\n            this.onProviderPayload(t), this.resetPingTimeout();\n        }, this.onConnectHandler = ()=>{\n            this.logger.trace(\"relayer connected\"), this.startPingTimeout(), this.events.emit(w.connect);\n        }, this.onDisconnectHandler = ()=>{\n            this.logger.trace(\"relayer disconnected\"), this.onProviderDisconnect();\n        }, this.onProviderErrorHandler = (t)=>{\n            this.logger.error(t), this.events.emit(w.error, t), this.logger.info(\"Fatal socket error received, closing transport\"), this.transportClose();\n        }, this.registerProviderListeners = ()=>{\n            this.provider.on(I.payload, this.onPayloadHandler), this.provider.on(I.connect, this.onConnectHandler), this.provider.on(I.disconnect, this.onDisconnectHandler), this.provider.on(I.error, this.onProviderErrorHandler);\n        }, this.core = e.core, this.logger = typeof e.logger < \"u\" && typeof e.logger != \"string\" ? (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(e.logger, this.name) : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getDefaultLoggerOptions)({\n            level: e.logger || Dt\n        })), this.messages = new jt(this.logger, e.core), this.subscriber = new Ht(this, this.logger), this.publisher = new qr(this, this.logger), this.relayUrl = e?.relayUrl || ve, this.projectId = e.projectId, this.bundleId = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getBundleId)(), this.provider = {};\n    }\n    async init() {\n        this.logger.trace(\"Initialized\"), this.registerEventListeners(), await Promise.all([\n            this.messages.init(),\n            this.subscriber.init()\n        ]), await this.transportOpen(), this.initialized = !0, setTimeout(async ()=>{\n            this.subscriber.topics.length === 0 && this.subscriber.pending.size === 0 && (this.logger.info(\"No topics subscribed to after init, closing transport\"), await this.transportClose(), this.transportExplicitlyClosed = !1);\n        }, _t);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get connected() {\n        var e, t, s;\n        return ((s = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : s.readyState) === 1;\n    }\n    get connecting() {\n        var e, t, s;\n        return ((s = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : s.readyState) === 0;\n    }\n    async publish(e, t, s) {\n        this.isInitialized(), await this.publisher.publish(e, t, s), await this.recordMessageEvent({\n            topic: e,\n            message: t,\n            publishedAt: Date.now()\n        });\n    }\n    async subscribe(e, t) {\n        var s;\n        this.isInitialized();\n        let i = ((s = this.subscriber.topicMap.get(e)) == null ? void 0 : s[0]) || \"\", r;\n        const n = (a)=>{\n            a.topic === e && (this.subscriber.off(A.created, n), r());\n        };\n        return await Promise.all([\n            new Promise((a)=>{\n                r = a, this.subscriber.on(A.created, n);\n            }),\n            new Promise(async (a)=>{\n                i = await this.subscriber.subscribe(e, t) || i, a();\n            })\n        ]), i;\n    }\n    async unsubscribe(e, t) {\n        this.isInitialized(), await this.subscriber.unsubscribe(e, t);\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async transportDisconnect() {\n        if (!this.hasExperiencedNetworkDisruption && this.connected && this.requestsInFlight.size > 0) try {\n            await Promise.all(Array.from(this.requestsInFlight.values()).map((e)=>e.promise));\n        } catch (e) {\n            this.logger.warn(e);\n        }\n        this.hasExperiencedNetworkDisruption || this.connected ? await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(this.provider.disconnect(), 2e3, \"provider.disconnect()\").catch(()=>this.onProviderDisconnect()) : this.onProviderDisconnect();\n    }\n    async transportClose() {\n        this.transportExplicitlyClosed = !0, await this.transportDisconnect();\n    }\n    async transportOpen(e) {\n        await this.confirmOnlineStateOrThrow(), e && e !== this.relayUrl && (this.relayUrl = e, await this.transportDisconnect()), await this.createProvider(), this.connectionAttemptInProgress = !0, this.transportExplicitlyClosed = !1;\n        try {\n            await new Promise(async (t, s)=>{\n                const i = ()=>{\n                    this.provider.off(I.disconnect, i), s(new Error(\"Connection interrupted while trying to subscribe\"));\n                };\n                this.provider.on(I.disconnect, i), await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(this.provider.connect(), (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_MINUTE), `Socket stalled when trying to connect to ${this.relayUrl}`).catch((r)=>{\n                    s(r);\n                }).finally(()=>{\n                    clearTimeout(this.reconnectTimeout), this.reconnectTimeout = void 0;\n                }), this.subscriber.start().catch((r)=>{\n                    this.logger.error(r), this.onDisconnectHandler();\n                }), this.hasExperiencedNetworkDisruption = !1, t();\n            });\n        } catch (t) {\n            this.logger.error(t);\n            const s = t;\n            if (this.hasExperiencedNetworkDisruption = !0, !this.isConnectionStalled(s.message)) throw t;\n        } finally{\n            this.connectionAttemptInProgress = !1;\n        }\n    }\n    async restartTransport(e) {\n        this.connectionAttemptInProgress || (this.relayUrl = e || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());\n    }\n    async confirmOnlineStateOrThrow() {\n        if (!await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isOnline)()) throw new Error(\"No internet connection detected. Please restart your network and try again.\");\n    }\n    async handleBatchMessageEvents(e) {\n        if (e?.length === 0) {\n            this.logger.trace(\"Batch message events is empty. Ignoring...\");\n            return;\n        }\n        const t = e.sort((s, i)=>s.publishedAt - i.publishedAt);\n        this.logger.trace(`Batch of ${t.length} message events sorted`);\n        for (const s of t)try {\n            await this.onMessageEvent(s);\n        } catch (i) {\n            this.logger.warn(i);\n        }\n        this.logger.trace(`Batch of ${t.length} message events processed`);\n    }\n    startPingTimeout() {\n        var e, t, s, i, r;\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isNode)()) try {\n            (t = (e = this.provider) == null ? void 0 : e.connection) != null && t.socket && ((r = (i = (s = this.provider) == null ? void 0 : s.connection) == null ? void 0 : i.socket) == null || r.once(\"ping\", ()=>{\n                this.resetPingTimeout();\n            })), this.resetPingTimeout();\n        } catch (n) {\n            this.logger.warn(n);\n        }\n    }\n    isConnectionStalled(e) {\n        return this.staleConnectionErrors.some((t)=>e.includes(t));\n    }\n    async createProvider() {\n        this.provider.connection && this.unregisterProviderListeners();\n        const e = await this.core.crypto.signJWT(this.relayUrl);\n        this.provider = new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_8__.JsonRpcProvider(new _walletconnect_jsonrpc_ws_connection__WEBPACK_IMPORTED_MODULE_10__[\"default\"]((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.formatRelayRpcUrl)({\n            sdkVersion: we,\n            protocol: this.protocol,\n            version: this.version,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId,\n            auth: e,\n            useOnCloseEvent: !0,\n            bundleId: this.bundleId\n        }))), this.registerProviderListeners();\n    }\n    async recordMessageEvent(e) {\n        const { topic: t, message: s } = e;\n        await this.messages.set(t, s);\n    }\n    async shouldIgnoreMessageEvent(e) {\n        const { topic: t, message: s } = e;\n        if (!s || s.length === 0) return this.logger.debug(`Ignoring invalid/empty message: ${s}`), !0;\n        if (!await this.subscriber.isSubscribed(t)) return this.logger.debug(`Ignoring message for non-subscribed topic ${t}`), !0;\n        const i = this.messages.has(t, s);\n        return i && this.logger.debug(`Ignoring duplicate message: ${s}`), i;\n    }\n    async onProviderPayload(e) {\n        if (this.logger.debug(\"Incoming Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"incoming\",\n            payload: e\n        }), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcRequest)(e)) {\n            if (!e.method.endsWith(mt)) return;\n            const t = e.params, { topic: s, message: i, publishedAt: r, attestation: n } = t.data, a = {\n                topic: s,\n                message: i,\n                publishedAt: r,\n                attestation: n\n            };\n            this.logger.debug(\"Emitting Relayer Payload\"), this.logger.trace(tn({\n                type: \"event\",\n                event: t.id\n            }, a)), this.events.emit(t.id, a), await this.acknowledgePayload(e), await this.onMessageEvent(a);\n        } else (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResponse)(e) && this.events.emit(w.message_ack, e);\n    }\n    async onMessageEvent(e) {\n        await this.shouldIgnoreMessageEvent(e) || (this.events.emit(w.message, e), await this.recordMessageEvent(e));\n    }\n    async acknowledgePayload(e) {\n        const t = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcResult)(e.id, !0);\n        await this.provider.connection.send(t);\n    }\n    unregisterProviderListeners() {\n        this.provider.off(I.payload, this.onPayloadHandler), this.provider.off(I.connect, this.onConnectHandler), this.provider.off(I.disconnect, this.onDisconnectHandler), this.provider.off(I.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);\n    }\n    async registerEventListeners() {\n        let e = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isOnline)();\n        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.subscribeToNetworkChange)(async (t)=>{\n            e !== t && (e = t, t ? await this.restartTransport().catch((s)=>this.logger.error(s)) : (this.hasExperiencedNetworkDisruption = !0, await this.transportDisconnect(), this.transportExplicitlyClosed = !1));\n        });\n    }\n    async onProviderDisconnect() {\n        await this.subscriber.stop(), this.requestsInFlight.clear(), clearTimeout(this.pingTimeout), this.events.emit(w.disconnect), this.connectionAttemptInProgress = !1, !this.transportExplicitlyClosed && (this.reconnectTimeout || (this.reconnectTimeout = setTimeout(async ()=>{\n            await this.transportOpen().catch((e)=>this.logger.error(e));\n        }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(ft))));\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async toEstablishConnection() {\n        await this.confirmOnlineStateOrThrow(), !this.connected && (this.connectionAttemptInProgress && await new Promise((e)=>{\n            const t = setInterval(()=>{\n                this.connected && (clearInterval(t), e());\n            }, this.connectionStatusPollingInterval);\n        }), await this.transportOpen());\n    }\n}\nvar sn = Object.defineProperty, Xt = Object.getOwnPropertySymbols, rn = Object.prototype.hasOwnProperty, nn = Object.prototype.propertyIsEnumerable, Zt = (o, e, t)=>e in o ? sn(o, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : o[e] = t, Qt = (o, e)=>{\n    for(var t in e || (e = {}))rn.call(e, t) && Zt(o, t, e[t]);\n    if (Xt) for (var t of Xt(e))nn.call(e, t) && Zt(o, t, e[t]);\n    return o;\n};\nclass ei extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IStore {\n    constructor(e, t, s, i = O, r = void 0){\n        super(e, t, s, i), this.core = e, this.logger = t, this.name = s, this.map = new Map, this.version = Et, this.cached = [], this.initialized = !1, this.storagePrefix = O, this.recentlyDeleted = [], this.recentlyDeletedLimit = 200, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((n)=>{\n                this.getKey && n !== null && !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isUndefined)(n) ? this.map.set(this.getKey(n), n) : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isProposalStruct)(n) ? this.map.set(n.id, n) : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isSessionStruct)(n) && this.map.set(n.topic, n);\n            }), this.cached = [], this.initialized = !0);\n        }, this.set = async (n, a)=>{\n            this.isInitialized(), this.map.has(n) ? await this.update(n, a) : (this.logger.debug(\"Setting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                key: n,\n                value: a\n            }), this.map.set(n, a), await this.persist());\n        }, this.get = (n)=>(this.isInitialized(), this.logger.debug(\"Getting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                key: n\n            }), this.getData(n)), this.getAll = (n)=>(this.isInitialized(), n ? this.values.filter((a)=>Object.keys(n).every((h)=>lodash_isequal__WEBPACK_IMPORTED_MODULE_11___default()(a[h], n[h]))) : this.values), this.update = async (n, a)=>{\n            this.isInitialized(), this.logger.debug(\"Updating value\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                key: n,\n                update: a\n            });\n            const h = Qt(Qt({}, this.getData(n)), a);\n            this.map.set(n, h), await this.persist();\n        }, this.delete = async (n, a)=>{\n            this.isInitialized(), this.map.has(n) && (this.logger.debug(\"Deleting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                key: n,\n                reason: a\n            }), this.map.delete(n), this.addToRecentlyDeleted(n), await this.persist());\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.storagePrefix = i, this.getKey = r;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.map.size;\n    }\n    get keys() {\n        return Array.from(this.map.keys());\n    }\n    get values() {\n        return Array.from(this.map.values());\n    }\n    addToRecentlyDeleted(e) {\n        this.recentlyDeleted.push(e), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);\n    }\n    async setDataStore(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getDataStore() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getData(e) {\n        const t = this.map.get(e);\n        if (!t) {\n            if (this.recentlyDeleted.includes(e)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", `Record was recently deleted - ${this.name}: ${e}`);\n                throw this.logger.error(i), new Error(i);\n            }\n            const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw this.logger.error(s), new Error(s);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setDataStore(this.values);\n    }\n    async restore() {\n        try {\n            const e = await this.getDataStore();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.map.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                value: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass ti {\n    constructor(e, t){\n        this.core = e, this.logger = t, this.name = Ct, this.version = St, this.events = new (events__WEBPACK_IMPORTED_MODULE_0___default()), this.initialized = !1, this.storagePrefix = O, this.ignoredPayloadTypes = [\n            _walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.TYPE_1\n        ], this.registeredMethods = [], this.init = async ()=>{\n            this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = !0, this.logger.trace(\"Initialized\"));\n        }, this.register = ({ methods: s })=>{\n            this.isInitialized(), this.registeredMethods = [\n                ...new Set([\n                    ...this.registeredMethods,\n                    ...s\n                ])\n            ];\n        }, this.create = async (s)=>{\n            this.isInitialized();\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.generateRandomBytes32)(), r = await this.core.crypto.setSymKey(i), n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_MINUTES), a = {\n                protocol: yt\n            }, h = {\n                topic: r,\n                expiry: n,\n                relay: a,\n                active: !1\n            }, c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.formatUri)({\n                protocol: this.core.protocol,\n                version: this.core.version,\n                topic: r,\n                symKey: i,\n                relay: a,\n                expiryTimestamp: n,\n                methods: s?.methods\n            });\n            return this.core.expirer.set(r, n), await this.pairings.set(r, h), await this.core.relayer.subscribe(r), {\n                topic: r,\n                uri: c\n            };\n        }, this.pair = async (s)=>{\n            this.isInitialized();\n            const i = this.core.eventClient.createEvent({\n                properties: {\n                    topic: s?.uri,\n                    trace: [\n                        L.pairing_started\n                    ]\n                }\n            });\n            this.isValidPair(s, i);\n            const { topic: r, symKey: n, relay: a, expiryTimestamp: h, methods: c } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.parseUri)(s.uri);\n            i.props.properties.topic = r, i.addTrace(L.pairing_uri_validation_success), i.addTrace(L.pairing_uri_not_expired);\n            let d;\n            if (this.pairings.keys.includes(r)) {\n                if (d = this.pairings.get(r), i.addTrace(L.existing_pairing), d.active) throw i.setError(F.active_pairing_already_exists), new Error(`Pairing already exists: ${r}. Please try again with a new connection URI.`);\n                i.addTrace(L.pairing_not_expired);\n            }\n            const g = h || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_MINUTES), b = {\n                topic: r,\n                relay: a,\n                expiry: g,\n                active: !1,\n                methods: c\n            };\n            this.core.expirer.set(r, g), await this.pairings.set(r, b), i.addTrace(L.store_new_pairing), s.activatePairing && await this.activate({\n                topic: r\n            }), this.events.emit(J.create, b), i.addTrace(L.emit_inactive_pairing), this.core.crypto.keychain.has(r) || await this.core.crypto.setSymKey(n, r), i.addTrace(L.subscribing_pairing_topic);\n            try {\n                await this.core.relayer.confirmOnlineStateOrThrow();\n            } catch  {\n                i.setError(F.no_internet_connection);\n            }\n            try {\n                await this.core.relayer.subscribe(r, {\n                    relay: a\n                });\n            } catch (m) {\n                throw i.setError(F.subscribe_pairing_topic_failure), m;\n            }\n            return i.addTrace(L.subscribe_pairing_topic_success), b;\n        }, this.activate = async ({ topic: s })=>{\n            this.isInitialized();\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS);\n            this.core.expirer.set(s, i), await this.pairings.update(s, {\n                active: !0,\n                expiry: i\n            });\n        }, this.ping = async (s)=>{\n            this.isInitialized(), await this.isValidPing(s);\n            const { topic: i } = s;\n            if (this.pairings.keys.includes(i)) {\n                const r = await this.sendRequest(i, \"wc_pairingPing\", {}), { done: n, resolve: a, reject: h } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createDelayedPromise)();\n                this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.engineEvent)(\"pairing_ping\", r), ({ error: c })=>{\n                    c ? h(c) : a();\n                }), await n();\n            }\n        }, this.updateExpiry = async ({ topic: s, expiry: i })=>{\n            this.isInitialized(), await this.pairings.update(s, {\n                expiry: i\n            });\n        }, this.updateMetadata = async ({ topic: s, metadata: i })=>{\n            this.isInitialized(), await this.pairings.update(s, {\n                peerMetadata: i\n            });\n        }, this.getPairings = ()=>(this.isInitialized(), this.pairings.values), this.disconnect = async (s)=>{\n            this.isInitialized(), await this.isValidDisconnect(s);\n            const { topic: i } = s;\n            this.pairings.keys.includes(i) && (await this.sendRequest(i, \"wc_pairingDelete\", (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getSdkError)(\"USER_DISCONNECTED\")), await this.deletePairing(i));\n        }, this.sendRequest = async (s, i, r)=>{\n            const n = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcRequest)(i, r), a = await this.core.crypto.encode(s, n), h = V[i].req;\n            return this.core.history.set(s, n), this.core.relayer.publish(s, a, h), n.id;\n        }, this.sendResult = async (s, i, r)=>{\n            const n = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcResult)(s, r), a = await this.core.crypto.encode(i, n), h = await this.core.history.get(i, s), c = V[h.request.method].res;\n            await this.core.relayer.publish(i, a, c), await this.core.history.resolve(n);\n        }, this.sendError = async (s, i, r)=>{\n            const n = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcError)(s, r), a = await this.core.crypto.encode(i, n), h = await this.core.history.get(i, s), c = V[h.request.method] ? V[h.request.method].res : V.unregistered_method.res;\n            await this.core.relayer.publish(i, a, c), await this.core.history.resolve(n);\n        }, this.deletePairing = async (s, i)=>{\n            await this.core.relayer.unsubscribe(s), await Promise.all([\n                this.pairings.delete(s, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getSdkError)(\"USER_DISCONNECTED\")),\n                this.core.crypto.deleteSymKey(s),\n                i ? Promise.resolve() : this.core.expirer.del(s)\n            ]);\n        }, this.cleanup = async ()=>{\n            const s = this.pairings.getAll().filter((i)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isExpired)(i.expiry));\n            await Promise.all(s.map((i)=>this.deletePairing(i.topic)));\n        }, this.onRelayEventRequest = (s)=>{\n            const { topic: i, payload: r } = s;\n            switch(r.method){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingRequest(i, r);\n                case \"wc_pairingDelete\":\n                    return this.onPairingDeleteRequest(i, r);\n                default:\n                    return this.onUnknownRpcMethodRequest(i, r);\n            }\n        }, this.onRelayEventResponse = async (s)=>{\n            const { topic: i, payload: r } = s, n = (await this.core.history.get(i, r.id)).request.method;\n            switch(n){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingResponse(i, r);\n                default:\n                    return this.onUnknownRpcMethodResponse(n);\n            }\n        }, this.onPairingPingRequest = async (s, i)=>{\n            const { id: r } = i;\n            try {\n                this.isValidPing({\n                    topic: s\n                }), await this.sendResult(r, s, !0), this.events.emit(J.ping, {\n                    id: r,\n                    topic: s\n                });\n            } catch (n) {\n                await this.sendError(r, s, n), this.logger.error(n);\n            }\n        }, this.onPairingPingResponse = (s, i)=>{\n            const { id: r } = i;\n            setTimeout(()=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResult)(i) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.engineEvent)(\"pairing_ping\", r), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcError)(i) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.engineEvent)(\"pairing_ping\", r), {\n                    error: i.error\n                });\n            }, 500);\n        }, this.onPairingDeleteRequest = async (s, i)=>{\n            const { id: r } = i;\n            try {\n                this.isValidDisconnect({\n                    topic: s\n                }), await this.deletePairing(s), this.events.emit(J.delete, {\n                    id: r,\n                    topic: s\n                });\n            } catch (n) {\n                await this.sendError(r, s, n), this.logger.error(n);\n            }\n        }, this.onUnknownRpcMethodRequest = async (s, i)=>{\n            const { id: r, method: n } = i;\n            try {\n                if (this.registeredMethods.includes(n)) return;\n                const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", n);\n                await this.sendError(r, s, a), this.logger.error(a);\n            } catch (a) {\n                await this.sendError(r, s, a), this.logger.error(a);\n            }\n        }, this.onUnknownRpcMethodResponse = (s)=>{\n            this.registeredMethods.includes(s) || this.logger.error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", s));\n        }, this.isValidPair = (s, i)=>{\n            var r;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidParams)(s)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", `pair() params: ${s}`);\n                throw i.setError(F.malformed_pairing_uri), new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidUrl)(s.uri)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", `pair() uri: ${s.uri}`);\n                throw i.setError(F.malformed_pairing_uri), new Error(a);\n            }\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.parseUri)(s?.uri);\n            if (!((r = n?.relay) != null && r.protocol)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri#relay-protocol\");\n                throw i.setError(F.malformed_pairing_uri), new Error(a);\n            }\n            if (!(n != null && n.symKey)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri#symKey\");\n                throw i.setError(F.malformed_pairing_uri), new Error(a);\n            }\n            if (n != null && n.expiryTimestamp && (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(n?.expiryTimestamp) < Date.now()) {\n                i.setError(F.pairing_expired);\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"EXPIRED\", \"pair() URI has expired. Please try again with a new connection URI.\");\n                throw new Error(a);\n            }\n        }, this.isValidPing = async (s)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidParams)(s)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", `ping() params: ${s}`);\n                throw new Error(r);\n            }\n            const { topic: i } = s;\n            await this.isValidPairingTopic(i);\n        }, this.isValidDisconnect = async (s)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidParams)(s)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", `disconnect() params: ${s}`);\n                throw new Error(r);\n            }\n            const { topic: i } = s;\n            await this.isValidPairingTopic(i);\n        }, this.isValidPairingTopic = async (s)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidString)(s, !1)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${s}`);\n                throw new Error(i);\n            }\n            if (!this.pairings.keys.includes(s)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${s}`);\n                throw new Error(i);\n            }\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isExpired)(this.pairings.get(s).expiry)) {\n                await this.deletePairing(s);\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"EXPIRED\", `pairing topic: ${s}`);\n                throw new Error(i);\n            }\n        }, this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.pairings = new ei(this.core, this.logger, this.name, this.storagePrefix);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    registerRelayerEvents() {\n        this.core.relayer.on(w.message, async (e)=>{\n            const { topic: t, message: s } = e;\n            if (!this.pairings.keys.includes(t) || this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s))) return;\n            const i = await this.core.crypto.decode(t, s);\n            try {\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcRequest)(i) ? (this.core.history.set(t, i), this.onRelayEventRequest({\n                    topic: t,\n                    payload: i\n                })) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResponse)(i) && (await this.core.history.resolve(i), await this.onRelayEventResponse({\n                    topic: t,\n                    payload: i\n                }), this.core.history.delete(t, i.id));\n            } catch (r) {\n                this.logger.error(r);\n            }\n        });\n    }\n    registerExpirerEvents() {\n        this.core.expirer.on(R.expired, async (e)=>{\n            const { topic: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.parseExpirerTarget)(e.target);\n            t && this.pairings.keys.includes(t) && (await this.deletePairing(t, !0), this.events.emit(J.expire, {\n                topic: t\n            }));\n        });\n    }\n}\nclass ii extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IJsonRpcHistory {\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, this.records = new Map, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = Pt, this.version = Rt, this.cached = [], this.initialized = !1, this.storagePrefix = O, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((s)=>this.records.set(s.id, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }, this.set = (s, i, r)=>{\n            if (this.isInitialized(), this.logger.debug(\"Setting JSON-RPC request history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                topic: s,\n                request: i,\n                chainId: r\n            }), this.records.has(i.id)) return;\n            const n = {\n                id: i.id,\n                topic: s,\n                request: {\n                    method: i.method,\n                    params: i.params || null\n                },\n                chainId: r,\n                expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS)\n            };\n            this.records.set(n.id, n), this.persist(), this.events.emit(P.created, n);\n        }, this.resolve = async (s)=>{\n            if (this.isInitialized(), this.logger.debug(\"Updating JSON-RPC response history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                response: s\n            }), !this.records.has(s.id)) return;\n            const i = await this.getRecord(s.id);\n            typeof i.response > \"u\" && (i.response = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcError)(s) ? {\n                error: s.error\n            } : {\n                result: s.result\n            }, this.records.set(i.id, i), this.persist(), this.events.emit(P.updated, i));\n        }, this.get = async (s, i)=>(this.isInitialized(), this.logger.debug(\"Getting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                topic: s,\n                id: i\n            }), await this.getRecord(i)), this.delete = (s, i)=>{\n            this.isInitialized(), this.logger.debug(\"Deleting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                id: i\n            }), this.values.forEach((r)=>{\n                if (r.topic === s) {\n                    if (typeof i < \"u\" && r.id !== i) return;\n                    this.records.delete(r.id), this.events.emit(P.deleted, r);\n                }\n            }), this.persist();\n        }, this.exists = async (s, i)=>(this.isInitialized(), this.records.has(i) ? (await this.getRecord(i)).topic === s : !1), this.on = (s, i)=>{\n            this.events.on(s, i);\n        }, this.once = (s, i)=>{\n            this.events.once(s, i);\n        }, this.off = (s, i)=>{\n            this.events.off(s, i);\n        }, this.removeListener = (s, i)=>{\n            this.events.removeListener(s, i);\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get size() {\n        return this.records.size;\n    }\n    get keys() {\n        return Array.from(this.records.keys());\n    }\n    get values() {\n        return Array.from(this.records.values());\n    }\n    get pending() {\n        const e = [];\n        return this.values.forEach((t)=>{\n            if (typeof t.response < \"u\") return;\n            const s = {\n                topic: t.topic,\n                request: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcRequest)(t.request.method, t.request.params, t.id),\n                chainId: t.chainId\n            };\n            return e.push(s);\n        }), e;\n    }\n    async setJsonRpcRecords(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getJsonRpcRecords() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getRecord(e) {\n        this.isInitialized();\n        const t = this.records.get(e);\n        if (!t) {\n            const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw new Error(s);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setJsonRpcRecords(this.values), this.events.emit(P.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getJsonRpcRecords();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.records.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                records: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);\n        }\n    }\n    registerEventListeners() {\n        this.events.on(P.created, (e)=>{\n            const t = P.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            });\n        }), this.events.on(P.updated, (e)=>{\n            const t = P.updated;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            });\n        }), this.events.on(P.deleted, (e)=>{\n            const t = P.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            });\n        }), this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, ()=>{\n            this.cleanup();\n        });\n    }\n    cleanup() {\n        try {\n            this.isInitialized();\n            let e = !1;\n            this.records.forEach((t)=>{\n                (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(t.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t.id}`), this.records.delete(t.id), this.events.emit(P.deleted, t, !1), e = !0);\n            }), e && this.persist();\n        } catch (e) {\n            this.logger.warn(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass si extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IExpirer {\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, this.expirations = new Map, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = xt, this.version = Ot, this.cached = [], this.initialized = !1, this.storagePrefix = O, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((s)=>this.expirations.set(s.target, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }, this.has = (s)=>{\n            try {\n                const i = this.formatTarget(s);\n                return typeof this.getExpiration(i) < \"u\";\n            } catch  {\n                return !1;\n            }\n        }, this.set = (s, i)=>{\n            this.isInitialized();\n            const r = this.formatTarget(s), n = {\n                target: r,\n                expiry: i\n            };\n            this.expirations.set(r, n), this.checkExpiry(r, n), this.events.emit(R.created, {\n                target: r,\n                expiration: n\n            });\n        }, this.get = (s)=>{\n            this.isInitialized();\n            const i = this.formatTarget(s);\n            return this.getExpiration(i);\n        }, this.del = (s)=>{\n            if (this.isInitialized(), this.has(s)) {\n                const i = this.formatTarget(s), r = this.getExpiration(i);\n                this.expirations.delete(i), this.events.emit(R.deleted, {\n                    target: i,\n                    expiration: r\n                });\n            }\n        }, this.on = (s, i)=>{\n            this.events.on(s, i);\n        }, this.once = (s, i)=>{\n            this.events.once(s, i);\n        }, this.off = (s, i)=>{\n            this.events.off(s, i);\n        }, this.removeListener = (s, i)=>{\n            this.events.removeListener(s, i);\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.expirations.size;\n    }\n    get keys() {\n        return Array.from(this.expirations.keys());\n    }\n    get values() {\n        return Array.from(this.expirations.values());\n    }\n    formatTarget(e) {\n        if (typeof e == \"string\") return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.formatTopicTarget)(e);\n        if (typeof e == \"number\") return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.formatIdTarget)(e);\n        const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"UNKNOWN_TYPE\", `Target type: ${typeof e}`);\n        throw new Error(t);\n    }\n    async setExpirations(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getExpirations() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    async persist() {\n        await this.setExpirations(this.values), this.events.emit(R.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getExpirations();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.expirations.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                expirations: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);\n        }\n    }\n    getExpiration(e) {\n        const t = this.expirations.get(e);\n        if (!t) {\n            const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw this.logger.warn(s), new Error(s);\n        }\n        return t;\n    }\n    checkExpiry(e, t) {\n        const { expiry: s } = t;\n        (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(s) - Date.now() <= 0 && this.expire(e, t);\n    }\n    expire(e, t) {\n        this.expirations.delete(e), this.events.emit(R.expired, {\n            target: e,\n            expiration: t\n        });\n    }\n    checkExpirations() {\n        this.core.relayer.connected && this.expirations.forEach((e, t)=>this.checkExpiry(t, e));\n    }\n    registerEventListeners() {\n        this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, ()=>this.checkExpirations()), this.events.on(R.created, (e)=>{\n            const t = R.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(R.expired, (e)=>{\n            const t = R.expired;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(R.deleted, (e)=>{\n            const t = R.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nvar y = {};\nObject.defineProperty(y, \"__esModule\", {\n    value: !0\n}), y.getLocalStorage = y.getLocalStorageOrThrow = y.getCrypto = y.getCryptoOrThrow = y.getLocation = y.getLocationOrThrow = y.getNavigator = y.getNavigatorOrThrow = ri = y.getDocument = y.getDocumentOrThrow = y.getFromWindowOrThrow = y.getFromWindow = void 0;\nfunction K(o) {\n    let e;\n    return  false && (0), e;\n}\ny.getFromWindow = K;\nfunction j(o) {\n    const e = K(o);\n    if (!e) throw new Error(`${o} is not defined in Window`);\n    return e;\n}\ny.getFromWindowOrThrow = j;\nfunction on() {\n    return j(\"document\");\n}\ny.getDocumentOrThrow = on;\nfunction an() {\n    return K(\"document\");\n}\nvar ri = y.getDocument = an;\nfunction hn() {\n    return j(\"navigator\");\n}\ny.getNavigatorOrThrow = hn;\nfunction cn() {\n    return K(\"navigator\");\n}\ny.getNavigator = cn;\nfunction ln() {\n    return j(\"location\");\n}\ny.getLocationOrThrow = ln;\nfunction un() {\n    return K(\"location\");\n}\ny.getLocation = un;\nfunction dn() {\n    return j(\"crypto\");\n}\ny.getCryptoOrThrow = dn;\nfunction gn() {\n    return K(\"crypto\");\n}\ny.getCrypto = gn;\nfunction pn() {\n    return j(\"localStorage\");\n}\ny.getLocalStorageOrThrow = pn;\nfunction yn() {\n    return K(\"localStorage\");\n}\ny.getLocalStorage = yn;\nclass ni extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IVerify {\n    constructor(e, t, s){\n        super(e, t, s), this.core = e, this.logger = t, this.store = s, this.name = At, this.verifyUrlV3 = zt, this.storagePrefix = O, this.version = _e, this.init = async ()=>{\n            var i;\n            this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)((i = this.publicKey) == null ? void 0 : i.expiresAt) < Date.now() && (this.logger.debug(\"verify v2 public key expired\"), await this.removePublicKey()), this.publicKey || await this.fetchAndPersistPublicKey());\n        }, this.register = async (i)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isBrowser)() || this.isDevEnv) return;\n            const r = window.location.origin, { id: n, decryptedId: a } = i, h = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${r}&id=${n}&decryptedId=${a}`;\n            try {\n                const c = ri(), d = this.startAbortTimer(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_SECOND * 5), g = await new Promise((b, m)=>{\n                    const l = ()=>{\n                        window.removeEventListener(\"message\", _), c.body.removeChild(p), m(\"attestation aborted\");\n                    };\n                    this.abortController.signal.addEventListener(\"abort\", l);\n                    const p = c.createElement(\"iframe\");\n                    p.src = h, p.style.display = \"none\", p.addEventListener(\"error\", l, {\n                        signal: this.abortController.signal\n                    });\n                    const _ = (D)=>{\n                        if (!D.data) return;\n                        const E = JSON.parse(D.data);\n                        if (E.type === \"verify_attestation\") {\n                            if ((0,_walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.decodeJWT)(E.attestation).payload.id !== n) return;\n                            clearInterval(d), c.body.removeChild(p), this.abortController.signal.removeEventListener(\"abort\", l), window.removeEventListener(\"message\", _), b(E.attestation === null ? \"\" : E.attestation);\n                        }\n                    };\n                    c.body.appendChild(p), window.addEventListener(\"message\", _, {\n                        signal: this.abortController.signal\n                    });\n                });\n                return this.logger.debug(\"jwt attestation\", g), g;\n            } catch (c) {\n                this.logger.warn(c);\n            }\n            return \"\";\n        }, this.resolve = async (i)=>{\n            if (this.isDevEnv) return \"\";\n            const { attestationId: r, hash: n, encryptedId: a } = i;\n            if (r === \"\") {\n                this.logger.debug(\"resolve: attestationId is empty, skipping\");\n                return;\n            }\n            if (r) {\n                if ((0,_walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.decodeJWT)(r).payload.id !== a) return;\n                const c = await this.isValidJwtAttestation(r);\n                if (c) return c;\n            }\n            if (!n) return;\n            const h = this.getVerifyUrl(i?.verifyUrl);\n            return this.fetchAttestation(n, h);\n        }, this.fetchAttestation = async (i, r)=>{\n            this.logger.debug(`resolving attestation: ${i} from url: ${r}`);\n            const n = this.startAbortTimer(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_SECOND * 5), a = await fetch(`${r}/attestation/${i}?v2Supported=true`, {\n                signal: this.abortController.signal\n            });\n            return clearTimeout(n), a.status === 200 ? await a.json() : void 0;\n        }, this.getVerifyUrl = (i)=>{\n            let r = i || W;\n            return Lt.includes(r) || (this.logger.info(`verify url: ${r}, not included in trusted list, assigning default: ${W}`), r = W), r;\n        }, this.fetchPublicKey = async ()=>{\n            try {\n                this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);\n                const i = this.startAbortTimer(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_SECONDS), r = await fetch(`${this.verifyUrlV3}/public-key`, {\n                    signal: this.abortController.signal\n                });\n                return clearTimeout(i), await r.json();\n            } catch (i) {\n                this.logger.warn(i);\n            }\n        }, this.persistPublicKey = async (i)=>{\n            this.logger.debug(\"persisting public key to local storage\", i), await this.store.setItem(this.storeKey, i), this.publicKey = i;\n        }, this.removePublicKey = async ()=>{\n            this.logger.debug(\"removing verify v2 public key from storage\"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;\n        }, this.isValidJwtAttestation = async (i)=>{\n            const r = await this.getPublicKey();\n            try {\n                if (r) return this.validateAttestation(i, r);\n            } catch (a) {\n                this.logger.error(a), this.logger.warn(\"error validating attestation\");\n            }\n            const n = await this.fetchAndPersistPublicKey();\n            try {\n                if (n) return this.validateAttestation(i, n);\n            } catch (a) {\n                this.logger.error(a), this.logger.warn(\"error validating attestation\");\n            }\n        }, this.getPublicKey = async ()=>this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey(), this.fetchAndPersistPublicKey = async ()=>{\n            if (this.fetchPromise) return await this.fetchPromise, this.publicKey;\n            this.fetchPromise = new Promise(async (r)=>{\n                const n = await this.fetchPublicKey();\n                n && (await this.persistPublicKey(n), r(n));\n            });\n            const i = await this.fetchPromise;\n            return this.fetchPromise = void 0, i;\n        }, this.validateAttestation = (i, r)=>{\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.verifyP256Jwt)(i, r.publicKey), a = {\n                hasExpired: (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(n.exp) < Date.now(),\n                payload: n\n            };\n            if (a.hasExpired) throw this.logger.warn(\"resolve: jwt attestation expired\"), new Error(\"JWT attestation expired\");\n            return {\n                origin: a.payload.origin,\n                isScam: a.payload.isScam\n            };\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.abortController = new AbortController, this.isDevEnv = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isNode)() && process.env.IS_VITEST, this.init();\n    }\n    get storeKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//verify:public:key\";\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    startAbortTimer(e) {\n        return this.abortController = new AbortController, setTimeout(()=>this.abortController.abort(), (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(e));\n    }\n}\nclass oi extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IEchoClient {\n    constructor(e, t){\n        super(e, t), this.projectId = e, this.logger = t, this.context = $t, this.registerDeviceToken = async (s)=>{\n            const { clientId: i, token: r, notificationType: n, enableEncrypted: a = !1 } = s, h = `${Ft}/${this.projectId}/clients`;\n            await fetch(h, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    client_id: i,\n                    type: n,\n                    token: r,\n                    always_raw: a\n                })\n            });\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.context);\n    }\n}\nvar Dn = Object.defineProperty, ai = Object.getOwnPropertySymbols, bn = Object.prototype.hasOwnProperty, mn = Object.prototype.propertyIsEnumerable, hi = (o, e, t)=>e in o ? Dn(o, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : o[e] = t, Z = (o, e)=>{\n    for(var t in e || (e = {}))bn.call(e, t) && hi(o, t, e[t]);\n    if (ai) for (var t of ai(e))mn.call(e, t) && hi(o, t, e[t]);\n    return o;\n};\nclass ci extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IEventClient {\n    constructor(e, t, s = !0){\n        super(e, t, s), this.core = e, this.logger = t, this.context = Kt, this.storagePrefix = O, this.storageVersion = Ut, this.events = new Map, this.shouldPersist = !1, this.createEvent = (i)=>{\n            const { event: r = \"ERROR\", type: n = \"\", properties: { topic: a, trace: h } } = i, c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.uuidv4)(), d = this.core.projectId || \"\", g = Date.now(), b = Z({\n                eventId: c,\n                bundleId: d,\n                timestamp: g,\n                props: {\n                    event: r,\n                    type: n,\n                    properties: {\n                        topic: a,\n                        trace: h\n                    }\n                }\n            }, this.setMethods(c));\n            return this.telemetryEnabled && (this.events.set(c, b), this.shouldPersist = !0), b;\n        }, this.getEvent = (i)=>{\n            const { eventId: r, topic: n } = i;\n            if (r) return this.events.get(r);\n            const a = Array.from(this.events.values()).find((h)=>h.props.properties.topic === n);\n            if (a) return Z(Z({}, a), this.setMethods(a.eventId));\n        }, this.deleteEvent = (i)=>{\n            const { eventId: r } = i;\n            this.events.delete(r), this.shouldPersist = !0;\n        }, this.setEventListeners = ()=>{\n            this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, async ()=>{\n                this.shouldPersist && await this.persist(), this.events.forEach((i)=>{\n                    (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.fromMiliseconds)(Date.now()) - (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.fromMiliseconds)(i.timestamp) > Mt && (this.events.delete(i.eventId), this.shouldPersist = !0);\n                });\n            });\n        }, this.setMethods = (i)=>({\n                addTrace: (r)=>this.addTrace(i, r),\n                setError: (r)=>this.setError(i, r)\n            }), this.addTrace = (i, r)=>{\n            const n = this.events.get(i);\n            n && (n.props.properties.trace.push(r), this.events.set(i, n), this.shouldPersist = !0);\n        }, this.setError = (i, r)=>{\n            const n = this.events.get(i);\n            n && (n.props.type = r, n.timestamp = Date.now(), this.events.set(i, n), this.shouldPersist = !0);\n        }, this.persist = async ()=>{\n            await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = !1;\n        }, this.restore = async ()=>{\n            try {\n                const i = await this.core.storage.getItem(this.storageKey) || [];\n                if (!i.length) return;\n                i.forEach((r)=>{\n                    this.events.set(r.eventId, Z(Z({}, r), this.setMethods(r.eventId)));\n                });\n            } catch (i) {\n                this.logger.warn(i);\n            }\n        }, this.submit = async ()=>{\n            if (!this.telemetryEnabled || this.events.size === 0) return;\n            const i = [];\n            for (const [r, n] of this.events)n.props.type && i.push(n);\n            if (i.length !== 0) try {\n                if ((await fetch(`${kt}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${we}`, {\n                    method: \"POST\",\n                    body: JSON.stringify(i)\n                })).ok) for (const r of i)this.events.delete(r.eventId), this.shouldPersist = !0;\n            } catch (r) {\n                this.logger.warn(r);\n            }\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.context), s ? this.restore().then(async ()=>{\n            await this.submit(), this.setEventListeners();\n        }) : this.persist();\n    }\n    get storageKey() {\n        return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + \"//\" + this.context;\n    }\n}\nvar fn = Object.defineProperty, li = Object.getOwnPropertySymbols, _n = Object.prototype.hasOwnProperty, En = Object.prototype.propertyIsEnumerable, ui = (o, e, t)=>e in o ? fn(o, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : o[e] = t, di = (o, e)=>{\n    for(var t in e || (e = {}))_n.call(e, t) && ui(o, t, e[t]);\n    if (li) for (var t of li(e))En.call(e, t) && ui(o, t, e[t]);\n    return o;\n};\nclass oe extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.ICore {\n    constructor(e){\n        var t;\n        super(e), this.protocol = fe, this.version = _e, this.name = ne, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.initialized = !1, this.on = (n, a)=>this.events.on(n, a), this.once = (n, a)=>this.events.once(n, a), this.off = (n, a)=>this.events.off(n, a), this.removeListener = (n, a)=>this.events.removeListener(n, a), this.projectId = e?.projectId, this.relayUrl = e?.relayUrl || ve, this.customStoragePrefix = e != null && e.customStoragePrefix ? `:${e.customStoragePrefix}` : \"\";\n        const s = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getDefaultLoggerOptions)({\n            level: typeof e?.logger == \"string\" && e.logger ? e.logger : nt.logger\n        }), { logger: i, chunkLoggerController: r } = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generatePlatformLogger)({\n            opts: s,\n            maxSizeInBytes: e?.maxLogBlobSizeInBytes,\n            loggerOverride: e?.logger\n        });\n        this.logChunkController = r, (t = this.logChunkController) != null && t.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async ()=>{\n            var n, a;\n            (n = this.logChunkController) != null && n.downloadLogsBlobInBrowser && ((a = this.logChunkController) == null || a.downloadLogsBlobInBrowser({\n                clientId: await this.crypto.getClientId()\n            }));\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(i, this.name), this.heartbeat = new _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HeartBeat, this.crypto = new Vt(this, this.logger, e?.keychain), this.history = new ii(this, this.logger), this.expirer = new si(this, this.logger), this.storage = e != null && e.storage ? e.storage : new _walletconnect_keyvaluestorage__WEBPACK_IMPORTED_MODULE_1__[\"default\"](di(di({}, ot), e?.storageOptions)), this.relayer = new Wt({\n            core: this,\n            logger: this.logger,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId\n        }), this.pairing = new ti(this, this.logger), this.verify = new ni(this, this.logger, this.storage), this.echoClient = new oi(this.projectId || \"\", this.logger), this.eventClient = new ci(this, this.logger, e?.telemetryEnabled);\n    }\n    static async init(e) {\n        const t = new oe(e);\n        await t.initialize();\n        const s = await t.crypto.getClientId();\n        return await t.storage.setItem(vt, s), t;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async start() {\n        this.initialized || await this.initialize();\n    }\n    async getLogsBlob() {\n        var e;\n        return (e = this.logChunkController) == null ? void 0 : e.logsToBlob({\n            clientId: await this.crypto.getClientId()\n        });\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.initialized = !0, this.logger.info(\"Core Initialization Success\");\n        } catch (e) {\n            throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e;\n        }\n    }\n}\nconst vn = oe;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/core/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/environment/dist/cjs/crypto.js":
/*!********************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/dist/cjs/crypto.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;\nfunction getBrowerCrypto() {\n    return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};\n}\nexports.getBrowerCrypto = getBrowerCrypto;\nfunction getSubtleCrypto() {\n    const browserCrypto = getBrowerCrypto();\n    return browserCrypto.subtle || browserCrypto.webkitSubtle;\n}\nexports.getSubtleCrypto = getSubtleCrypto;\nfunction isBrowserCryptoAvailable() {\n    return !!getBrowerCrypto() && !!getSubtleCrypto();\n}\nexports.isBrowserCryptoAvailable = isBrowserCryptoAvailable; //# sourceMappingURL=crypto.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvY3J5cHRvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQ0FBZ0MsR0FBR0EsdUJBQXVCLEdBQUdBLHVCQUF1QixHQUFHLEtBQUs7QUFDNUYsU0FBU0k7SUFDTCxPQUFPLENBQUNDLFdBQVcsUUFBUUEsV0FBVyxLQUFLLElBQUksS0FBSyxJQUFJQSxPQUFPQyxNQUFNLEtBQU1ELENBQUFBLFdBQVcsUUFBUUEsV0FBVyxLQUFLLElBQUksS0FBSyxJQUFJQSxPQUFPRSxRQUFRLEtBQUssQ0FBQztBQUNwSjtBQUNBUCx1QkFBdUIsR0FBR0k7QUFDMUIsU0FBU0Q7SUFDTCxNQUFNSyxnQkFBZ0JKO0lBQ3RCLE9BQU9JLGNBQWNDLE1BQU0sSUFBSUQsY0FBY0UsWUFBWTtBQUM3RDtBQUNBVix1QkFBdUIsR0FBR0c7QUFDMUIsU0FBU0Q7SUFDTCxPQUFPLENBQUMsQ0FBQ0UscUJBQXFCLENBQUMsQ0FBQ0Q7QUFDcEM7QUFDQUgsZ0NBQWdDLEdBQUdFLDBCQUNuQyxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvY3J5cHRvLmpzPzZkZDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSA9IGV4cG9ydHMuZ2V0U3VidGxlQ3J5cHRvID0gZXhwb3J0cy5nZXRCcm93ZXJDcnlwdG8gPSB2b2lkIDA7XG5mdW5jdGlvbiBnZXRCcm93ZXJDcnlwdG8oKSB7XG4gICAgcmV0dXJuIChnbG9iYWwgPT09IG51bGwgfHwgZ2xvYmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnbG9iYWwuY3J5cHRvKSB8fCAoZ2xvYmFsID09PSBudWxsIHx8IGdsb2JhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ2xvYmFsLm1zQ3J5cHRvKSB8fCB7fTtcbn1cbmV4cG9ydHMuZ2V0QnJvd2VyQ3J5cHRvID0gZ2V0QnJvd2VyQ3J5cHRvO1xuZnVuY3Rpb24gZ2V0U3VidGxlQ3J5cHRvKCkge1xuICAgIGNvbnN0IGJyb3dzZXJDcnlwdG8gPSBnZXRCcm93ZXJDcnlwdG8oKTtcbiAgICByZXR1cm4gYnJvd3NlckNyeXB0by5zdWJ0bGUgfHwgYnJvd3NlckNyeXB0by53ZWJraXRTdWJ0bGU7XG59XG5leHBvcnRzLmdldFN1YnRsZUNyeXB0byA9IGdldFN1YnRsZUNyeXB0bztcbmZ1bmN0aW9uIGlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSgpIHtcbiAgICByZXR1cm4gISFnZXRCcm93ZXJDcnlwdG8oKSAmJiAhIWdldFN1YnRsZUNyeXB0bygpO1xufVxuZXhwb3J0cy5pc0Jyb3dzZXJDcnlwdG9BdmFpbGFibGUgPSBpc0Jyb3dzZXJDcnlwdG9BdmFpbGFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG8uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNCcm93c2VyQ3J5cHRvQXZhaWxhYmxlIiwiZ2V0U3VidGxlQ3J5cHRvIiwiZ2V0QnJvd2VyQ3J5cHRvIiwiZ2xvYmFsIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJicm93c2VyQ3J5cHRvIiwic3VidGxlIiwid2Via2l0U3VidGxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/environment/dist/cjs/crypto.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/environment/dist/cjs/env.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/dist/cjs/env.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isBrowser = exports.isNode = exports.isReactNative = void 0;\nfunction isReactNative() {\n    return typeof document === \"undefined\" && typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\";\n}\nexports.isReactNative = isReactNative;\nfunction isNode() {\n    return typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\";\n}\nexports.isNode = isNode;\nfunction isBrowser() {\n    return !isReactNative() && !isNode();\n}\nexports.isBrowser = isBrowser; //# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvZW52LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBR0EsY0FBYyxHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBQ2xFLFNBQVNJO0lBQ0wsT0FBUSxPQUFPQyxhQUFhLGVBQ3hCLE9BQU9DLGNBQWMsZUFDckJBLFVBQVVDLE9BQU8sS0FBSztBQUM5QjtBQUNBUCxxQkFBcUIsR0FBR0k7QUFDeEIsU0FBU0Q7SUFDTCxPQUFRLE9BQU9LLFlBQVksZUFDdkIsT0FBT0EsUUFBUUMsUUFBUSxLQUFLLGVBQzVCLE9BQU9ELFFBQVFDLFFBQVEsQ0FBQ0MsSUFBSSxLQUFLO0FBQ3pDO0FBQ0FWLGNBQWMsR0FBR0c7QUFDakIsU0FBU0Q7SUFDTCxPQUFPLENBQUNFLG1CQUFtQixDQUFDRDtBQUNoQztBQUNBSCxpQkFBaUIsR0FBR0UsV0FDcEIsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2Vudmlyb25tZW50L2Rpc3QvY2pzL2Vudi5qcz80MzhkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0Jyb3dzZXIgPSBleHBvcnRzLmlzTm9kZSA9IGV4cG9ydHMuaXNSZWFjdE5hdGl2ZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzUmVhY3ROYXRpdmUoKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gXCJSZWFjdE5hdGl2ZVwiKTtcbn1cbmV4cG9ydHMuaXNSZWFjdE5hdGl2ZSA9IGlzUmVhY3ROYXRpdmU7XG5mdW5jdGlvbiBpc05vZGUoKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlICE9PSBcInVuZGVmaW5lZFwiKTtcbn1cbmV4cG9ydHMuaXNOb2RlID0gaXNOb2RlO1xuZnVuY3Rpb24gaXNCcm93c2VyKCkge1xuICAgIHJldHVybiAhaXNSZWFjdE5hdGl2ZSgpICYmICFpc05vZGUoKTtcbn1cbmV4cG9ydHMuaXNCcm93c2VyID0gaXNCcm93c2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzQnJvd3NlciIsImlzTm9kZSIsImlzUmVhY3ROYXRpdmUiLCJkb2N1bWVudCIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJwcm9jZXNzIiwidmVyc2lvbnMiLCJub2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/environment/dist/cjs/env.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/environment/dist/cjs/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/dist/cjs/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./crypto */ \"(ssr)/./node_modules/@walletconnect/environment/dist/cjs/crypto.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./env */ \"(ssr)/./node_modules/@walletconnect/environment/dist/cjs/env.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsVUFBVUMsbUJBQU9BLENBQUMsOEZBQU87QUFDL0JELFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsb0ZBQVUsR0FBR0g7QUFDMUNFLFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsOEVBQU8sR0FBR0gsVUFDdkMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2Vudmlyb25tZW50L2Rpc3QvY2pzL2luZGV4LmpzPzVjMjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY3J5cHRvXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VudlwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsIl9fZXhwb3J0U3RhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/environment/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nfunction __createBinding(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}\nfunction __exportStar(m, exports) {\n    for(var p in m)if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\nfunction __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\n;\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: n === \"return\"\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n        Object.defineProperty(cooked, \"raw\", {\n            value: raw\n        });\n    } else {\n        cooked.raw = raw;\n    }\n    return cooked;\n}\n;\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    }\n    result.default = mod;\n    return result;\n}\nfunction __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction __classPrivateFieldGet(receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js":
/*!************************************************************************!*\
  !*** ./node_modules/@walletconnect/ethereum-provider/dist/index.es.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EthereumProvider: () => (/* binding */ x),\n/* harmony export */   OPTIONAL_EVENTS: () => (/* binding */ b),\n/* harmony export */   OPTIONAL_METHODS: () => (/* binding */ y),\n/* harmony export */   REQUIRED_EVENTS: () => (/* binding */ g),\n/* harmony export */   REQUIRED_METHODS: () => (/* binding */ u),\n/* harmony export */   \"default\": () => (/* binding */ C)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/universal-provider */ \"(ssr)/./node_modules/@walletconnect/universal-provider/dist/index.es.js\");\n\n\n\nconst R = \"wc\", T = \"ethereum_provider\", $ = `${R}@2:${T}:`, j = \"https://rpc.walletconnect.com/v1/\", u = [\n    \"eth_sendTransaction\",\n    \"personal_sign\"\n], y = [\n    \"eth_accounts\",\n    \"eth_requestAccounts\",\n    \"eth_sendRawTransaction\",\n    \"eth_sign\",\n    \"eth_signTransaction\",\n    \"eth_signTypedData\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData_v4\",\n    \"eth_sendTransaction\",\n    \"personal_sign\",\n    \"wallet_switchEthereumChain\",\n    \"wallet_addEthereumChain\",\n    \"wallet_getPermissions\",\n    \"wallet_requestPermissions\",\n    \"wallet_registerOnboarding\",\n    \"wallet_watchAsset\",\n    \"wallet_scanQRCode\",\n    \"wallet_sendCalls\",\n    \"wallet_getCapabilities\",\n    \"wallet_getCallsStatus\",\n    \"wallet_showCallsStatus\"\n], g = [\n    \"chainChanged\",\n    \"accountsChanged\"\n], b = [\n    \"chainChanged\",\n    \"accountsChanged\",\n    \"message\",\n    \"disconnect\",\n    \"connect\"\n];\nvar q = Object.defineProperty, N = Object.defineProperties, D = Object.getOwnPropertyDescriptors, M = Object.getOwnPropertySymbols, U = Object.prototype.hasOwnProperty, Q = Object.prototype.propertyIsEnumerable, O = (a, t, s)=>t in a ? q(a, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: s\n    }) : a[t] = s, p = (a, t)=>{\n    for(var s in t || (t = {}))U.call(t, s) && O(a, s, t[s]);\n    if (M) for (var s of M(t))Q.call(t, s) && O(a, s, t[s]);\n    return a;\n}, E = (a, t)=>N(a, D(t));\nfunction m(a) {\n    return Number(a[0].split(\":\")[1]);\n}\nfunction v(a) {\n    return `0x${a.toString(16)}`;\n}\nfunction L(a) {\n    const { chains: t, optionalChains: s, methods: i, optionalMethods: e, events: n, optionalEvents: o, rpcMap: r } = a;\n    if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(t)) throw new Error(\"Invalid chains\");\n    const c = {\n        chains: t,\n        methods: i || u,\n        events: n || g,\n        rpcMap: p({}, t.length ? {\n            [m(t)]: r[m(t)]\n        } : {})\n    }, h = n?.filter((l)=>!g.includes(l)), d = i?.filter((l)=>!u.includes(l));\n    if (!s && !o && !e && !(h != null && h.length) && !(d != null && d.length)) return {\n        required: t.length ? c : void 0\n    };\n    const w = h?.length && d?.length || !s, I = {\n        chains: [\n            ...new Set(w ? c.chains.concat(s || []) : s)\n        ],\n        methods: [\n            ...new Set(c.methods.concat(e != null && e.length ? e : y))\n        ],\n        events: [\n            ...new Set(c.events.concat(o != null && o.length ? o : b))\n        ],\n        rpcMap: r\n    };\n    return {\n        required: t.length ? c : void 0,\n        optional: s.length ? I : void 0\n    };\n}\nclass C {\n    constructor(){\n        this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.namespace = \"eip155\", this.accounts = [], this.chainId = 1, this.STORAGE_KEY = $, this.on = (t, s)=>(this.events.on(t, s), this), this.once = (t, s)=>(this.events.once(t, s), this), this.removeListener = (t, s)=>(this.events.removeListener(t, s), this), this.off = (t, s)=>(this.events.off(t, s), this), this.parseAccount = (t)=>this.isCompatibleChainId(t) ? this.parseAccountId(t).address : t, this.signer = {}, this.rpc = {};\n    }\n    static async init(t) {\n        const s = new C;\n        return await s.initialize(t), s;\n    }\n    async request(t, s) {\n        return await this.signer.request(t, this.formatChainId(this.chainId), s);\n    }\n    sendAsync(t, s, i) {\n        this.signer.sendAsync(t, s, this.formatChainId(this.chainId), i);\n    }\n    get connected() {\n        return this.signer.client ? this.signer.client.core.relayer.connected : !1;\n    }\n    get connecting() {\n        return this.signer.client ? this.signer.client.core.relayer.connecting : !1;\n    }\n    async enable() {\n        return this.session || await this.connect(), await this.request({\n            method: \"eth_requestAccounts\"\n        });\n    }\n    async connect(t) {\n        if (!this.signer.client) throw new Error(\"Provider not initialized. Call init() first\");\n        this.loadConnectOpts(t);\n        const { required: s, optional: i } = L(this.rpc);\n        try {\n            const e = await new Promise(async (o, r)=>{\n                var c;\n                this.rpc.showQrModal && ((c = this.modal) == null || c.subscribeModal((h)=>{\n                    !h.open && !this.signer.session && (this.signer.abortPairingAttempt(), r(new Error(\"Connection request reset. Please try again.\")));\n                })), await this.signer.connect(E(p({\n                    namespaces: p({}, s && {\n                        [this.namespace]: s\n                    })\n                }, i && {\n                    optionalNamespaces: {\n                        [this.namespace]: i\n                    }\n                }), {\n                    pairingTopic: t?.pairingTopic\n                })).then((h)=>{\n                    o(h);\n                }).catch((h)=>{\n                    r(new Error(h.message));\n                });\n            });\n            if (!e) return;\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getAccountsFromNamespaces)(e.namespaces, [\n                this.namespace\n            ]);\n            this.setChainIds(this.rpc.chains.length ? this.rpc.chains : n), this.setAccounts(n), this.events.emit(\"connect\", {\n                chainId: v(this.chainId)\n            });\n        } catch (e) {\n            throw this.signer.logger.error(e), e;\n        } finally{\n            this.modal && this.modal.closeModal();\n        }\n    }\n    async authenticate(t) {\n        if (!this.signer.client) throw new Error(\"Provider not initialized. Call init() first\");\n        this.loadConnectOpts({\n            chains: t?.chains\n        });\n        try {\n            const s = await new Promise(async (e, n)=>{\n                var o;\n                this.rpc.showQrModal && ((o = this.modal) == null || o.subscribeModal((r)=>{\n                    !r.open && !this.signer.session && (this.signer.abortPairingAttempt(), n(new Error(\"Connection request reset. Please try again.\")));\n                })), await this.signer.authenticate(E(p({}, t), {\n                    chains: this.rpc.chains\n                })).then((r)=>{\n                    e(r);\n                }).catch((r)=>{\n                    n(new Error(r.message));\n                });\n            }), i = s.session;\n            if (i) {\n                const e = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getAccountsFromNamespaces)(i.namespaces, [\n                    this.namespace\n                ]);\n                this.setChainIds(this.rpc.chains.length ? this.rpc.chains : e), this.setAccounts(e), this.events.emit(\"connect\", {\n                    chainId: v(this.chainId)\n                });\n            }\n            return s;\n        } catch (s) {\n            throw this.signer.logger.error(s), s;\n        } finally{\n            this.modal && this.modal.closeModal();\n        }\n    }\n    async disconnect() {\n        this.session && await this.signer.disconnect(), this.reset();\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    get session() {\n        return this.signer.session;\n    }\n    registerEventListeners() {\n        this.signer.on(\"session_event\", (t)=>{\n            const { params: s } = t, { event: i } = s;\n            i.name === \"accountsChanged\" ? (this.accounts = this.parseAccounts(i.data), this.events.emit(\"accountsChanged\", this.accounts)) : i.name === \"chainChanged\" ? this.setChainId(this.formatChainId(i.data)) : this.events.emit(i.name, i.data), this.events.emit(\"session_event\", t);\n        }), this.signer.on(\"chainChanged\", (t)=>{\n            const s = parseInt(t);\n            this.chainId = s, this.events.emit(\"chainChanged\", v(this.chainId)), this.persist();\n        }), this.signer.on(\"session_update\", (t)=>{\n            this.events.emit(\"session_update\", t);\n        }), this.signer.on(\"session_delete\", (t)=>{\n            this.reset(), this.events.emit(\"session_delete\", t), this.events.emit(\"disconnect\", E(p({}, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getSdkError)(\"USER_DISCONNECTED\")), {\n                data: t.topic,\n                name: \"USER_DISCONNECTED\"\n            }));\n        }), this.signer.on(\"display_uri\", (t)=>{\n            var s, i;\n            this.rpc.showQrModal && ((s = this.modal) == null || s.closeModal(), (i = this.modal) == null || i.openModal({\n                uri: t\n            })), this.events.emit(\"display_uri\", t);\n        });\n    }\n    switchEthereumChain(t) {\n        this.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [\n                {\n                    chainId: t.toString(16)\n                }\n            ]\n        });\n    }\n    isCompatibleChainId(t) {\n        return typeof t == \"string\" ? t.startsWith(`${this.namespace}:`) : !1;\n    }\n    formatChainId(t) {\n        return `${this.namespace}:${t}`;\n    }\n    parseChainId(t) {\n        return Number(t.split(\":\")[1]);\n    }\n    setChainIds(t) {\n        const s = t.filter((i)=>this.isCompatibleChainId(i)).map((i)=>this.parseChainId(i));\n        s.length && (this.chainId = s[0], this.events.emit(\"chainChanged\", v(this.chainId)), this.persist());\n    }\n    setChainId(t) {\n        if (this.isCompatibleChainId(t)) {\n            const s = this.parseChainId(t);\n            this.chainId = s, this.switchEthereumChain(s);\n        }\n    }\n    parseAccountId(t) {\n        const [s, i, e] = t.split(\":\");\n        return {\n            chainId: `${s}:${i}`,\n            address: e\n        };\n    }\n    setAccounts(t) {\n        this.accounts = t.filter((s)=>this.parseChainId(this.parseAccountId(s).chainId) === this.chainId).map((s)=>this.parseAccountId(s).address), this.events.emit(\"accountsChanged\", this.accounts);\n    }\n    getRpcConfig(t) {\n        var s, i;\n        const e = (s = t?.chains) != null ? s : [], n = (i = t?.optionalChains) != null ? i : [], o = e.concat(n);\n        if (!o.length) throw new Error(\"No chains specified in either `chains` or `optionalChains`\");\n        const r = e.length ? t?.methods || u : [], c = e.length ? t?.events || g : [], h = t?.optionalMethods || [], d = t?.optionalEvents || [], w = t?.rpcMap || this.buildRpcMap(o, t.projectId), I = t?.qrModalOptions || void 0;\n        return {\n            chains: e?.map((l)=>this.formatChainId(l)),\n            optionalChains: n.map((l)=>this.formatChainId(l)),\n            methods: r,\n            events: c,\n            optionalMethods: h,\n            optionalEvents: d,\n            rpcMap: w,\n            showQrModal: !!(t != null && t.showQrModal),\n            qrModalOptions: I,\n            projectId: t.projectId,\n            metadata: t.metadata\n        };\n    }\n    buildRpcMap(t, s) {\n        const i = {};\n        return t.forEach((e)=>{\n            i[e] = this.getRpcUrl(e, s);\n        }), i;\n    }\n    async initialize(t) {\n        if (this.rpc = this.getRpcConfig(t), this.chainId = this.rpc.chains.length ? m(this.rpc.chains) : m(this.rpc.optionalChains), this.signer = await _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__.UniversalProvider.init({\n            projectId: this.rpc.projectId,\n            metadata: this.rpc.metadata,\n            disableProviderPing: t.disableProviderPing,\n            relayUrl: t.relayUrl,\n            storageOptions: t.storageOptions,\n            customStoragePrefix: t.customStoragePrefix,\n            telemetryEnabled: t.telemetryEnabled\n        }), this.registerEventListeners(), await this.loadPersistedSession(), this.rpc.showQrModal) {\n            let s;\n            try {\n                const { WalletConnectModal: i } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@walletconnect\"), __webpack_require__.e(\"vendor-chunks/valtio\"), __webpack_require__.e(\"vendor-chunks/proxy-compare\")]).then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/modal */ \"(ssr)/./node_modules/@walletconnect/modal/dist/index.js\"));\n                s = i;\n            } catch  {\n                throw new Error(\"To use QR modal, please install @walletconnect/modal package\");\n            }\n            if (s) try {\n                this.modal = new s(p({\n                    projectId: this.rpc.projectId\n                }, this.rpc.qrModalOptions));\n            } catch (i) {\n                throw this.signer.logger.error(i), new Error(\"Could not generate WalletConnectModal Instance\");\n            }\n        }\n    }\n    loadConnectOpts(t) {\n        if (!t) return;\n        const { chains: s, optionalChains: i, rpcMap: e } = t;\n        s && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(s) && (this.rpc.chains = s.map((n)=>this.formatChainId(n)), s.forEach((n)=>{\n            this.rpc.rpcMap[n] = e?.[n] || this.getRpcUrl(n);\n        })), i && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(i) && (this.rpc.optionalChains = [], this.rpc.optionalChains = i?.map((n)=>this.formatChainId(n)), i.forEach((n)=>{\n            this.rpc.rpcMap[n] = e?.[n] || this.getRpcUrl(n);\n        }));\n    }\n    getRpcUrl(t, s) {\n        var i;\n        return ((i = this.rpc.rpcMap) == null ? void 0 : i[t]) || `${j}?chainId=eip155:${t}&projectId=${s || this.rpc.projectId}`;\n    }\n    async loadPersistedSession() {\n        if (this.session) try {\n            const t = await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`), s = this.session.namespaces[`${this.namespace}:${t}`] ? this.session.namespaces[`${this.namespace}:${t}`] : this.session.namespaces[this.namespace];\n            this.setChainIds(t ? [\n                this.formatChainId(t)\n            ] : s?.accounts), this.setAccounts(s?.accounts);\n        } catch (t) {\n            this.signer.logger.error(\"Failed to load persisted session, clearing state...\"), this.signer.logger.error(t), await this.disconnect().catch((s)=>this.signer.logger.warn(s));\n        }\n    }\n    reset() {\n        this.chainId = 1, this.accounts = [];\n    }\n    persist() {\n        this.session && this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`, this.chainId);\n    }\n    parseAccounts(t) {\n        return typeof t == \"string\" || t instanceof String ? [\n            this.parseAccount(t)\n        ] : t.map((s)=>this.parseAccount(s));\n    }\n}\nconst x = C;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/events/dist/esm/events.js":
/*!***************************************************************!*\
  !*** ./node_modules/@walletconnect/events/dist/esm/events.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IEvents: () => (/* binding */ IEvents)\n/* harmony export */ });\nclass IEvents {\n} //# sourceMappingURL=events.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZXZlbnRzL2Rpc3QvZXNtL2V2ZW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUE7QUFDYixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BzZS0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9ldmVudHMvZGlzdC9lc20vZXZlbnRzLmpzPzEwNTYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIElFdmVudHMge1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJJRXZlbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/events/dist/esm/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/events/dist/esm/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@walletconnect/events/dist/esm/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IEvents: () => (/* reexport safe */ _events__WEBPACK_IMPORTED_MODULE_0__.IEvents)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/@walletconnect/events/dist/esm/events.js\");\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZXZlbnRzL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlCLENBQ3pCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BzZS0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9ldmVudHMvZGlzdC9lc20vaW5kZXguanM/ZDMwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9ldmVudHNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/events/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/heartbeat/dist/index.es.js":
/*!****************************************************************!*\
  !*** ./node_modules/@walletconnect/heartbeat/dist/index.es.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HEARTBEAT_EVENTS: () => (/* binding */ r),\n/* harmony export */   HEARTBEAT_INTERVAL: () => (/* binding */ s),\n/* harmony export */   HeartBeat: () => (/* binding */ i),\n/* harmony export */   IHeartBeat: () => (/* binding */ n)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/events */ \"(ssr)/./node_modules/@walletconnect/events/dist/esm/index.js\");\n\n\n\nclass n extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_2__.IEvents {\n    constructor(e){\n        super();\n    }\n}\nconst s = _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_SECONDS, r = {\n    pulse: \"heartbeat_pulse\"\n};\nclass i extends n {\n    constructor(e){\n        super(e), this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.interval = s, this.interval = e?.interval || s;\n    }\n    static async init(e) {\n        const t = new i(e);\n        return await t.init(), t;\n    }\n    async init() {\n        await this.initialize();\n    }\n    stop() {\n        clearInterval(this.intervalRef);\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async initialize() {\n        this.intervalRef = setInterval(()=>this.pulse(), (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.toMiliseconds)(this.interval));\n    }\n    pulse() {\n        this.events.emit(r.pulse);\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvaGVhcnRiZWF0L2Rpc3QvaW5kZXguZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXNDO0FBQXNFO0FBQWdEO0FBQUEsTUFBTVEsVUFBVUQsMERBQUNBO0lBQUNFLFlBQVlDLENBQUMsQ0FBQztRQUFDLEtBQUs7SUFBRTtBQUFDO0FBQUMsTUFBTUMsSUFBRVIsNkRBQUNBLEVBQUNTLElBQUU7SUFBQ0MsT0FBTTtBQUFpQjtBQUFFLE1BQU1DLFVBQVVOO0lBQUVDLFlBQVlDLENBQUMsQ0FBQztRQUFDLEtBQUssQ0FBQ0EsSUFBRyxJQUFJLENBQUNLLE1BQU0sR0FBQyxJQUFJZCxnREFBQ0EsRUFBQyxJQUFJLENBQUNlLFFBQVEsR0FBQ0wsR0FBRSxJQUFJLENBQUNLLFFBQVEsR0FBQ04sR0FBR00sWUFBVUw7SUFBQztJQUFDLGFBQWFNLEtBQUtQLENBQUMsRUFBQztRQUFDLE1BQU1RLElBQUUsSUFBSUosRUFBRUo7UUFBRyxPQUFPLE1BQU1RLEVBQUVELElBQUksSUFBR0M7SUFBQztJQUFDLE1BQU1ELE9BQU07UUFBQyxNQUFNLElBQUksQ0FBQ0UsVUFBVTtJQUFFO0lBQUNDLE9BQU07UUFBQ0MsY0FBYyxJQUFJLENBQUNDLFdBQVc7SUFBQztJQUFDQyxHQUFHYixDQUFDLEVBQUNRLENBQUMsRUFBQztRQUFDLElBQUksQ0FBQ0gsTUFBTSxDQUFDUSxFQUFFLENBQUNiLEdBQUVRO0lBQUU7SUFBQ00sS0FBS2QsQ0FBQyxFQUFDUSxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNILE1BQU0sQ0FBQ1MsSUFBSSxDQUFDZCxHQUFFUTtJQUFFO0lBQUNPLElBQUlmLENBQUMsRUFBQ1EsQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDSCxNQUFNLENBQUNVLEdBQUcsQ0FBQ2YsR0FBRVE7SUFBRTtJQUFDUSxlQUFlaEIsQ0FBQyxFQUFDUSxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNILE1BQU0sQ0FBQ1csY0FBYyxDQUFDaEIsR0FBRVE7SUFBRTtJQUFDLE1BQU1DLGFBQVk7UUFBQyxJQUFJLENBQUNHLFdBQVcsR0FBQ0ssWUFBWSxJQUFJLElBQUksQ0FBQ2QsS0FBSyxJQUFHUixrRUFBQ0EsQ0FBQyxJQUFJLENBQUNXLFFBQVE7SUFBRTtJQUFDSCxRQUFPO1FBQUMsSUFBSSxDQUFDRSxNQUFNLENBQUNhLElBQUksQ0FBQ2hCLEVBQUVDLEtBQUs7SUFBQztBQUFDO0FBQXNGLENBQ3h6QixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvaGVhcnRiZWF0L2Rpc3QvaW5kZXguZXMuanM/ZDMwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7RXZlbnRFbWl0dGVyIGFzIGF9ZnJvbVwiZXZlbnRzXCI7aW1wb3J0e0ZJVkVfU0VDT05EUyBhcyBvLHRvTWlsaXNlY29uZHMgYXMgbH1mcm9tXCJAd2FsbGV0Y29ubmVjdC90aW1lXCI7aW1wb3J0e0lFdmVudHMgYXMgdn1mcm9tXCJAd2FsbGV0Y29ubmVjdC9ldmVudHNcIjtjbGFzcyBuIGV4dGVuZHMgdntjb25zdHJ1Y3RvcihlKXtzdXBlcigpfX1jb25zdCBzPW8scj17cHVsc2U6XCJoZWFydGJlYXRfcHVsc2VcIn07Y2xhc3MgaSBleHRlbmRzIG57Y29uc3RydWN0b3IoZSl7c3VwZXIoZSksdGhpcy5ldmVudHM9bmV3IGEsdGhpcy5pbnRlcnZhbD1zLHRoaXMuaW50ZXJ2YWw9ZT8uaW50ZXJ2YWx8fHN9c3RhdGljIGFzeW5jIGluaXQoZSl7Y29uc3QgdD1uZXcgaShlKTtyZXR1cm4gYXdhaXQgdC5pbml0KCksdH1hc3luYyBpbml0KCl7YXdhaXQgdGhpcy5pbml0aWFsaXplKCl9c3RvcCgpe2NsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbFJlZil9b24oZSx0KXt0aGlzLmV2ZW50cy5vbihlLHQpfW9uY2UoZSx0KXt0aGlzLmV2ZW50cy5vbmNlKGUsdCl9b2ZmKGUsdCl7dGhpcy5ldmVudHMub2ZmKGUsdCl9cmVtb3ZlTGlzdGVuZXIoZSx0KXt0aGlzLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcihlLHQpfWFzeW5jIGluaXRpYWxpemUoKXt0aGlzLmludGVydmFsUmVmPXNldEludGVydmFsKCgpPT50aGlzLnB1bHNlKCksbCh0aGlzLmludGVydmFsKSl9cHVsc2UoKXt0aGlzLmV2ZW50cy5lbWl0KHIucHVsc2UpfX1leHBvcnR7ciBhcyBIRUFSVEJFQVRfRVZFTlRTLHMgYXMgSEVBUlRCRUFUX0lOVEVSVkFMLGkgYXMgSGVhcnRCZWF0LG4gYXMgSUhlYXJ0QmVhdH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJhIiwiRklWRV9TRUNPTkRTIiwibyIsInRvTWlsaXNlY29uZHMiLCJsIiwiSUV2ZW50cyIsInYiLCJuIiwiY29uc3RydWN0b3IiLCJlIiwicyIsInIiLCJwdWxzZSIsImkiLCJldmVudHMiLCJpbnRlcnZhbCIsImluaXQiLCJ0IiwiaW5pdGlhbGl6ZSIsInN0b3AiLCJjbGVhckludGVydmFsIiwiaW50ZXJ2YWxSZWYiLCJvbiIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInNldEludGVydmFsIiwiZW1pdCIsIkhFQVJUQkVBVF9FVkVOVFMiLCJIRUFSVEJFQVRfSU5URVJWQUwiLCJIZWFydEJlYXQiLCJJSGVhcnRCZWF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/heartbeat/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpConnection: () => (/* binding */ f),\n/* harmony export */   \"default\": () => (/* binding */ f)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/node-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\nvar P = Object.defineProperty, w = Object.defineProperties, E = Object.getOwnPropertyDescriptors, c = Object.getOwnPropertySymbols, L = Object.prototype.hasOwnProperty, O = Object.prototype.propertyIsEnumerable, l = (r, t, e)=>t in r ? P(r, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : r[t] = e, p = (r, t)=>{\n    for(var e in t || (t = {}))L.call(t, e) && l(r, e, t[e]);\n    if (c) for (var e of c(t))O.call(t, e) && l(r, e, t[e]);\n    return r;\n}, v = (r, t)=>w(r, E(t));\nconst j = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n}, T = \"POST\", d = {\n    headers: j,\n    method: T\n}, g = 10;\nclass f {\n    constructor(t, e = !1){\n        if (this.url = t, this.disableProviderPing = e, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.isAvailable = !1, this.registering = !1, !(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isHttpUrl)(t)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);\n        this.url = t, this.disableProviderPing = e;\n    }\n    get connected() {\n        return this.isAvailable;\n    }\n    get connecting() {\n        return this.registering;\n    }\n    on(t, e) {\n        this.events.on(t, e);\n    }\n    once(t, e) {\n        this.events.once(t, e);\n    }\n    off(t, e) {\n        this.events.off(t, e);\n    }\n    removeListener(t, e) {\n        this.events.removeListener(t, e);\n    }\n    async open(t = this.url) {\n        await this.register(t);\n    }\n    async close() {\n        if (!this.isAvailable) throw new Error(\"Connection already closed\");\n        this.onClose();\n    }\n    async send(t) {\n        this.isAvailable || await this.register();\n        try {\n            const e = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonStringify)(t), s = await (await cross_fetch__WEBPACK_IMPORTED_MODULE_1___default()(this.url, v(p({}, d), {\n                body: e\n            }))).json();\n            this.onPayload({\n                data: s\n            });\n        } catch (e) {\n            this.onError(t.id, e);\n        }\n    }\n    async register(t = this.url) {\n        if (!(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isHttpUrl)(t)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);\n        if (this.registering) {\n            const e = this.events.getMaxListeners();\n            return (this.events.listenerCount(\"register_error\") >= e || this.events.listenerCount(\"open\") >= e) && this.events.setMaxListeners(e + 1), new Promise((s, i)=>{\n                this.events.once(\"register_error\", (n)=>{\n                    this.resetMaxListeners(), i(n);\n                }), this.events.once(\"open\", ()=>{\n                    if (this.resetMaxListeners(), typeof this.isAvailable > \"u\") return i(new Error(\"HTTP connection is missing or invalid\"));\n                    s();\n                });\n            });\n        }\n        this.url = t, this.registering = !0;\n        try {\n            if (!this.disableProviderPing) {\n                const e = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonStringify)({\n                    id: 1,\n                    jsonrpc: \"2.0\",\n                    method: \"test\",\n                    params: []\n                });\n                await cross_fetch__WEBPACK_IMPORTED_MODULE_1___default()(t, v(p({}, d), {\n                    body: e\n                }));\n            }\n            this.onOpen();\n        } catch (e) {\n            const s = this.parseError(e);\n            throw this.events.emit(\"register_error\", s), this.onClose(), s;\n        }\n    }\n    onOpen() {\n        this.isAvailable = !0, this.registering = !1, this.events.emit(\"open\");\n    }\n    onClose() {\n        this.isAvailable = !1, this.registering = !1, this.events.emit(\"close\");\n    }\n    onPayload(t) {\n        if (typeof t.data > \"u\") return;\n        const e = typeof t.data == \"string\" ? (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonParse)(t.data) : t.data;\n        this.events.emit(\"payload\", e);\n    }\n    onError(t, e) {\n        const s = this.parseError(e), i = s.message || s.toString(), n = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError)(t, i);\n        this.events.emit(\"payload\", n);\n    }\n    parseError(t, e = this.url) {\n        return (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.parseConnectionError)(t, e, \"HTTP\");\n    }\n    resetMaxListeners() {\n        this.events.getMaxListeners() > g && this.events.setMaxListeners(g);\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/node-ponyfill.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/node-ponyfill.js ***!
  \************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const nodeFetch = __webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\");\nconst realFetch = nodeFetch.default || nodeFetch;\nconst fetch = function(url, options) {\n    // Support schemaless URIs on the server for parity with the browser.\n    // Ex: //github.com/ -> https://github.com/\n    if (/^\\/\\//.test(url)) {\n        url = \"https:\" + url;\n    }\n    return realFetch.call(this, url, options);\n};\nfetch.ponyfill = true;\nmodule.exports = exports = fetch;\nexports.fetch = fetch;\nexports.Headers = nodeFetch.Headers;\nexports.Request = nodeFetch.Request;\nexports.Response = nodeFetch.Response;\n// Needed for TypeScript consumers without esModuleInterop.\nexports[\"default\"] = fetch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy1odHRwLWNvbm5lY3Rpb24vbm9kZV9tb2R1bGVzL2Nyb3NzLWZldGNoL2Rpc3Qvbm9kZS1wb255ZmlsbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxZQUFZQyxtQkFBT0EsQ0FBQztBQUMxQixNQUFNQyxZQUFZRixVQUFVRyxPQUFPLElBQUlIO0FBRXZDLE1BQU1JLFFBQVEsU0FBVUMsR0FBRyxFQUFFQyxPQUFPO0lBQ2xDLHFFQUFxRTtJQUNyRSwyQ0FBMkM7SUFDM0MsSUFBSSxRQUFRQyxJQUFJLENBQUNGLE1BQU07UUFDckJBLE1BQU0sV0FBV0E7SUFDbkI7SUFDQSxPQUFPSCxVQUFVTSxJQUFJLENBQUMsSUFBSSxFQUFFSCxLQUFLQztBQUNuQztBQUVBRixNQUFNSyxRQUFRLEdBQUc7QUFFakJDLE9BQU9DLE9BQU8sR0FBR0EsVUFBVVA7QUFDM0JPLGFBQWEsR0FBR1A7QUFDaEJPLGVBQWUsR0FBR1gsVUFBVVksT0FBTztBQUNuQ0QsZUFBZSxHQUFHWCxVQUFVYSxPQUFPO0FBQ25DRixnQkFBZ0IsR0FBR1gsVUFBVWMsUUFBUTtBQUVyQywyREFBMkQ7QUFDM0RILGtCQUFlLEdBQUdQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtaHR0cC1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy9jcm9zcy1mZXRjaC9kaXN0L25vZGUtcG9ueWZpbGwuanM/YjY5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBub2RlRmV0Y2ggPSByZXF1aXJlKCdub2RlLWZldGNoJylcbmNvbnN0IHJlYWxGZXRjaCA9IG5vZGVGZXRjaC5kZWZhdWx0IHx8IG5vZGVGZXRjaFxuXG5jb25zdCBmZXRjaCA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgLy8gU3VwcG9ydCBzY2hlbWFsZXNzIFVSSXMgb24gdGhlIHNlcnZlciBmb3IgcGFyaXR5IHdpdGggdGhlIGJyb3dzZXIuXG4gIC8vIEV4OiAvL2dpdGh1Yi5jb20vIC0+IGh0dHBzOi8vZ2l0aHViLmNvbS9cbiAgaWYgKC9eXFwvXFwvLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSAnaHR0cHM6JyArIHVybFxuICB9XG4gIHJldHVybiByZWFsRmV0Y2guY2FsbCh0aGlzLCB1cmwsIG9wdGlvbnMpXG59XG5cbmZldGNoLnBvbnlmaWxsID0gdHJ1ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmZXRjaFxuZXhwb3J0cy5mZXRjaCA9IGZldGNoXG5leHBvcnRzLkhlYWRlcnMgPSBub2RlRmV0Y2guSGVhZGVyc1xuZXhwb3J0cy5SZXF1ZXN0ID0gbm9kZUZldGNoLlJlcXVlc3RcbmV4cG9ydHMuUmVzcG9uc2UgPSBub2RlRmV0Y2guUmVzcG9uc2VcblxuLy8gTmVlZGVkIGZvciBUeXBlU2NyaXB0IGNvbnN1bWVycyB3aXRob3V0IGVzTW9kdWxlSW50ZXJvcC5cbmV4cG9ydHMuZGVmYXVsdCA9IGZldGNoXG4iXSwibmFtZXMiOlsibm9kZUZldGNoIiwicmVxdWlyZSIsInJlYWxGZXRjaCIsImRlZmF1bHQiLCJmZXRjaCIsInVybCIsIm9wdGlvbnMiLCJ0ZXN0IiwiY2FsbCIsInBvbnlmaWxsIiwibW9kdWxlIiwiZXhwb3J0cyIsIkhlYWRlcnMiLCJSZXF1ZXN0IiwiUmVzcG9uc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/node-ponyfill.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonRpcProvider: () => (/* binding */ o),\n/* harmony export */   \"default\": () => (/* binding */ o)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\nclass o extends _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.IJsonRpcProvider {\n    constructor(t){\n        super(t), this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.hasRegisteredEventListeners = !1, this.connection = this.setConnection(t), this.connection.connected && this.registerEventListeners();\n    }\n    async connect(t = this.connection) {\n        await this.open(t);\n    }\n    async disconnect() {\n        await this.close();\n    }\n    on(t, e) {\n        this.events.on(t, e);\n    }\n    once(t, e) {\n        this.events.once(t, e);\n    }\n    off(t, e) {\n        this.events.off(t, e);\n    }\n    removeListener(t, e) {\n        this.events.removeListener(t, e);\n    }\n    async request(t, e) {\n        return this.requestStrict((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.formatJsonRpcRequest)(t.method, t.params || [], t.id || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.getBigIntRpcId)().toString()), e);\n    }\n    async requestStrict(t, e) {\n        return new Promise(async (i, s)=>{\n            if (!this.connection.connected) try {\n                await this.open();\n            } catch (n) {\n                s(n);\n            }\n            this.events.on(`${t.id}`, (n)=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.isJsonRpcError)(n) ? s(n.error) : i(n.result);\n            });\n            try {\n                await this.connection.send(t, e);\n            } catch (n) {\n                s(n);\n            }\n        });\n    }\n    setConnection(t = this.connection) {\n        return t;\n    }\n    onPayload(t) {\n        this.events.emit(\"payload\", t), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.isJsonRpcResponse)(t) ? this.events.emit(`${t.id}`, t) : this.events.emit(\"message\", {\n            type: t.method,\n            data: t.params\n        });\n    }\n    onClose(t) {\n        t && t.code === 3e3 && this.events.emit(\"error\", new Error(`WebSocket connection closed abnormally with code: ${t.code} ${t.reason ? `(${t.reason})` : \"\"}`)), this.events.emit(\"disconnect\");\n    }\n    async open(t = this.connection) {\n        this.connection === t && this.connection.connected || (this.connection.connected && this.close(), typeof t == \"string\" && (await this.connection.open(t), t = this.connection), this.connection = this.setConnection(t), await this.connection.open(), this.registerEventListeners(), this.events.emit(\"connect\"));\n    }\n    async close() {\n        await this.connection.close();\n    }\n    registerEventListeners() {\n        this.hasRegisteredEventListeners || (this.connection.on(\"payload\", (t)=>this.onPayload(t)), this.connection.on(\"close\", (t)=>this.onClose(t)), this.connection.on(\"error\", (t)=>this.events.emit(\"error\", t)), this.connection.on(\"register_error\", (t)=>this.onClose()), this.hasRegisteredEventListeners = !0);\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy1wcm92aWRlci9kaXN0L2luZGV4LmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXNDO0FBQXlKO0FBQUEsTUFBTVksVUFBVVQsMEVBQUNBO0lBQUNVLFlBQVlDLENBQUMsQ0FBQztRQUFDLEtBQUssQ0FBQ0EsSUFBRyxJQUFJLENBQUNDLE1BQU0sR0FBQyxJQUFJZCxnREFBQ0EsRUFBQyxJQUFJLENBQUNlLDJCQUEyQixHQUFDLENBQUMsR0FBRSxJQUFJLENBQUNDLFVBQVUsR0FBQyxJQUFJLENBQUNDLGFBQWEsQ0FBQ0osSUFBRyxJQUFJLENBQUNHLFVBQVUsQ0FBQ0UsU0FBUyxJQUFFLElBQUksQ0FBQ0Msc0JBQXNCO0lBQUU7SUFBQyxNQUFNQyxRQUFRUCxJQUFFLElBQUksQ0FBQ0csVUFBVSxFQUFDO1FBQUMsTUFBTSxJQUFJLENBQUNLLElBQUksQ0FBQ1I7SUFBRTtJQUFDLE1BQU1TLGFBQVk7UUFBQyxNQUFNLElBQUksQ0FBQ0MsS0FBSztJQUFFO0lBQUNDLEdBQUdYLENBQUMsRUFBQ1ksQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDWCxNQUFNLENBQUNVLEVBQUUsQ0FBQ1gsR0FBRVk7SUFBRTtJQUFDQyxLQUFLYixDQUFDLEVBQUNZLENBQUMsRUFBQztRQUFDLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxJQUFJLENBQUNiLEdBQUVZO0lBQUU7SUFBQ0UsSUFBSWQsQ0FBQyxFQUFDWSxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNYLE1BQU0sQ0FBQ2EsR0FBRyxDQUFDZCxHQUFFWTtJQUFFO0lBQUNHLGVBQWVmLENBQUMsRUFBQ1ksQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDWCxNQUFNLENBQUNjLGNBQWMsQ0FBQ2YsR0FBRVk7SUFBRTtJQUFDLE1BQU1JLFFBQVFoQixDQUFDLEVBQUNZLENBQUMsRUFBQztRQUFDLE9BQU8sSUFBSSxDQUFDSyxhQUFhLENBQUMxQixrRkFBQ0EsQ0FBQ1MsRUFBRWtCLE1BQU0sRUFBQ2xCLEVBQUVtQixNQUFNLElBQUUsRUFBRSxFQUFDbkIsRUFBRW9CLEVBQUUsSUFBRTNCLDRFQUFDQSxHQUFHNEIsUUFBUSxLQUFJVDtJQUFFO0lBQUMsTUFBTUssY0FBY2pCLENBQUMsRUFBQ1ksQ0FBQyxFQUFDO1FBQUMsT0FBTyxJQUFJVSxRQUFRLE9BQU1DLEdBQUVDO1lBQUssSUFBRyxDQUFDLElBQUksQ0FBQ3JCLFVBQVUsQ0FBQ0UsU0FBUyxFQUFDLElBQUc7Z0JBQUMsTUFBTSxJQUFJLENBQUNHLElBQUk7WUFBRSxFQUFDLE9BQU1pQixHQUFFO2dCQUFDRCxFQUFFQztZQUFFO1lBQUMsSUFBSSxDQUFDeEIsTUFBTSxDQUFDVSxFQUFFLENBQUMsQ0FBQyxFQUFFWCxFQUFFb0IsRUFBRSxDQUFDLENBQUMsRUFBQ0ssQ0FBQUE7Z0JBQUk5Qiw0RUFBQ0EsQ0FBQzhCLEtBQUdELEVBQUVDLEVBQUVDLEtBQUssSUFBRUgsRUFBRUUsRUFBRUUsTUFBTTtZQUFDO1lBQUcsSUFBRztnQkFBQyxNQUFNLElBQUksQ0FBQ3hCLFVBQVUsQ0FBQ3lCLElBQUksQ0FBQzVCLEdBQUVZO1lBQUUsRUFBQyxPQUFNYSxHQUFFO2dCQUFDRCxFQUFFQztZQUFFO1FBQUM7SUFBRTtJQUFDckIsY0FBY0osSUFBRSxJQUFJLENBQUNHLFVBQVUsRUFBQztRQUFDLE9BQU9IO0lBQUM7SUFBQzZCLFVBQVU3QixDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNDLE1BQU0sQ0FBQzZCLElBQUksQ0FBQyxXQUFVOUIsSUFBR0gsK0VBQUNBLENBQUNHLEtBQUcsSUFBSSxDQUFDQyxNQUFNLENBQUM2QixJQUFJLENBQUMsQ0FBQyxFQUFFOUIsRUFBRW9CLEVBQUUsQ0FBQyxDQUFDLEVBQUNwQixLQUFHLElBQUksQ0FBQ0MsTUFBTSxDQUFDNkIsSUFBSSxDQUFDLFdBQVU7WUFBQ0MsTUFBSy9CLEVBQUVrQixNQUFNO1lBQUNjLE1BQUtoQyxFQUFFbUIsTUFBTTtRQUFBO0lBQUU7SUFBQ2MsUUFBUWpDLENBQUMsRUFBQztRQUFDQSxLQUFHQSxFQUFFa0MsSUFBSSxLQUFHLE9BQUssSUFBSSxDQUFDakMsTUFBTSxDQUFDNkIsSUFBSSxDQUFDLFNBQVEsSUFBSUssTUFBTSxDQUFDLGtEQUFrRCxFQUFFbkMsRUFBRWtDLElBQUksQ0FBQyxDQUFDLEVBQUVsQyxFQUFFb0MsTUFBTSxHQUFDLENBQUMsQ0FBQyxFQUFFcEMsRUFBRW9DLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsSUFBRyxJQUFJLENBQUNuQyxNQUFNLENBQUM2QixJQUFJLENBQUM7SUFBYTtJQUFDLE1BQU10QixLQUFLUixJQUFFLElBQUksQ0FBQ0csVUFBVSxFQUFDO1FBQUMsSUFBSSxDQUFDQSxVQUFVLEtBQUdILEtBQUcsSUFBSSxDQUFDRyxVQUFVLENBQUNFLFNBQVMsSUFBRyxLQUFJLENBQUNGLFVBQVUsQ0FBQ0UsU0FBUyxJQUFFLElBQUksQ0FBQ0ssS0FBSyxJQUFHLE9BQU9WLEtBQUcsWUFBVyxPQUFNLElBQUksQ0FBQ0csVUFBVSxDQUFDSyxJQUFJLENBQUNSLElBQUdBLElBQUUsSUFBSSxDQUFDRyxVQUFVLEdBQUUsSUFBSSxDQUFDQSxVQUFVLEdBQUMsSUFBSSxDQUFDQyxhQUFhLENBQUNKLElBQUcsTUFBTSxJQUFJLENBQUNHLFVBQVUsQ0FBQ0ssSUFBSSxJQUFHLElBQUksQ0FBQ0Ysc0JBQXNCLElBQUcsSUFBSSxDQUFDTCxNQUFNLENBQUM2QixJQUFJLENBQUMsVUFBUztJQUFFO0lBQUMsTUFBTXBCLFFBQU87UUFBQyxNQUFNLElBQUksQ0FBQ1AsVUFBVSxDQUFDTyxLQUFLO0lBQUU7SUFBQ0oseUJBQXdCO1FBQUMsSUFBSSxDQUFDSiwyQkFBMkIsSUFBRyxLQUFJLENBQUNDLFVBQVUsQ0FBQ1EsRUFBRSxDQUFDLFdBQVVYLENBQUFBLElBQUcsSUFBSSxDQUFDNkIsU0FBUyxDQUFDN0IsS0FBSSxJQUFJLENBQUNHLFVBQVUsQ0FBQ1EsRUFBRSxDQUFDLFNBQVFYLENBQUFBLElBQUcsSUFBSSxDQUFDaUMsT0FBTyxDQUFDakMsS0FBSSxJQUFJLENBQUNHLFVBQVUsQ0FBQ1EsRUFBRSxDQUFDLFNBQVFYLENBQUFBLElBQUcsSUFBSSxDQUFDQyxNQUFNLENBQUM2QixJQUFJLENBQUMsU0FBUTlCLEtBQUksSUFBSSxDQUFDRyxVQUFVLENBQUNRLEVBQUUsQ0FBQyxrQkFBaUJYLENBQUFBLElBQUcsSUFBSSxDQUFDaUMsT0FBTyxLQUFJLElBQUksQ0FBQy9CLDJCQUEyQixHQUFDLENBQUM7SUFBRTtBQUFDO0FBQTJDLENBQ3IrRCxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy1wcm92aWRlci9kaXN0L2luZGV4LmVzLmpzPzdlZTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e0V2ZW50RW1pdHRlciBhcyBjfWZyb21cImV2ZW50c1wiO2ltcG9ydHtJSnNvblJwY1Byb3ZpZGVyIGFzIHIsZm9ybWF0SnNvblJwY1JlcXVlc3QgYXMgaCxnZXRCaWdJbnRScGNJZCBhcyBhLGlzSnNvblJwY0Vycm9yIGFzIGQsaXNKc29uUnBjUmVzcG9uc2UgYXMgdn1mcm9tXCJAd2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzXCI7Y2xhc3MgbyBleHRlbmRzIHJ7Y29uc3RydWN0b3IodCl7c3VwZXIodCksdGhpcy5ldmVudHM9bmV3IGMsdGhpcy5oYXNSZWdpc3RlcmVkRXZlbnRMaXN0ZW5lcnM9ITEsdGhpcy5jb25uZWN0aW9uPXRoaXMuc2V0Q29ubmVjdGlvbih0KSx0aGlzLmNvbm5lY3Rpb24uY29ubmVjdGVkJiZ0aGlzLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKX1hc3luYyBjb25uZWN0KHQ9dGhpcy5jb25uZWN0aW9uKXthd2FpdCB0aGlzLm9wZW4odCl9YXN5bmMgZGlzY29ubmVjdCgpe2F3YWl0IHRoaXMuY2xvc2UoKX1vbih0LGUpe3RoaXMuZXZlbnRzLm9uKHQsZSl9b25jZSh0LGUpe3RoaXMuZXZlbnRzLm9uY2UodCxlKX1vZmYodCxlKXt0aGlzLmV2ZW50cy5vZmYodCxlKX1yZW1vdmVMaXN0ZW5lcih0LGUpe3RoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKHQsZSl9YXN5bmMgcmVxdWVzdCh0LGUpe3JldHVybiB0aGlzLnJlcXVlc3RTdHJpY3QoaCh0Lm1ldGhvZCx0LnBhcmFtc3x8W10sdC5pZHx8YSgpLnRvU3RyaW5nKCkpLGUpfWFzeW5jIHJlcXVlc3RTdHJpY3QodCxlKXtyZXR1cm4gbmV3IFByb21pc2UoYXN5bmMoaSxzKT0+e2lmKCF0aGlzLmNvbm5lY3Rpb24uY29ubmVjdGVkKXRyeXthd2FpdCB0aGlzLm9wZW4oKX1jYXRjaChuKXtzKG4pfXRoaXMuZXZlbnRzLm9uKGAke3QuaWR9YCxuPT57ZChuKT9zKG4uZXJyb3IpOmkobi5yZXN1bHQpfSk7dHJ5e2F3YWl0IHRoaXMuY29ubmVjdGlvbi5zZW5kKHQsZSl9Y2F0Y2gobil7cyhuKX19KX1zZXRDb25uZWN0aW9uKHQ9dGhpcy5jb25uZWN0aW9uKXtyZXR1cm4gdH1vblBheWxvYWQodCl7dGhpcy5ldmVudHMuZW1pdChcInBheWxvYWRcIix0KSx2KHQpP3RoaXMuZXZlbnRzLmVtaXQoYCR7dC5pZH1gLHQpOnRoaXMuZXZlbnRzLmVtaXQoXCJtZXNzYWdlXCIse3R5cGU6dC5tZXRob2QsZGF0YTp0LnBhcmFtc30pfW9uQ2xvc2UodCl7dCYmdC5jb2RlPT09M2UzJiZ0aGlzLmV2ZW50cy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoYFdlYlNvY2tldCBjb25uZWN0aW9uIGNsb3NlZCBhYm5vcm1hbGx5IHdpdGggY29kZTogJHt0LmNvZGV9ICR7dC5yZWFzb24/YCgke3QucmVhc29ufSlgOlwiXCJ9YCkpLHRoaXMuZXZlbnRzLmVtaXQoXCJkaXNjb25uZWN0XCIpfWFzeW5jIG9wZW4odD10aGlzLmNvbm5lY3Rpb24pe3RoaXMuY29ubmVjdGlvbj09PXQmJnRoaXMuY29ubmVjdGlvbi5jb25uZWN0ZWR8fCh0aGlzLmNvbm5lY3Rpb24uY29ubmVjdGVkJiZ0aGlzLmNsb3NlKCksdHlwZW9mIHQ9PVwic3RyaW5nXCImJihhd2FpdCB0aGlzLmNvbm5lY3Rpb24ub3Blbih0KSx0PXRoaXMuY29ubmVjdGlvbiksdGhpcy5jb25uZWN0aW9uPXRoaXMuc2V0Q29ubmVjdGlvbih0KSxhd2FpdCB0aGlzLmNvbm5lY3Rpb24ub3BlbigpLHRoaXMucmVnaXN0ZXJFdmVudExpc3RlbmVycygpLHRoaXMuZXZlbnRzLmVtaXQoXCJjb25uZWN0XCIpKX1hc3luYyBjbG9zZSgpe2F3YWl0IHRoaXMuY29ubmVjdGlvbi5jbG9zZSgpfXJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKXt0aGlzLmhhc1JlZ2lzdGVyZWRFdmVudExpc3RlbmVyc3x8KHRoaXMuY29ubmVjdGlvbi5vbihcInBheWxvYWRcIix0PT50aGlzLm9uUGF5bG9hZCh0KSksdGhpcy5jb25uZWN0aW9uLm9uKFwiY2xvc2VcIix0PT50aGlzLm9uQ2xvc2UodCkpLHRoaXMuY29ubmVjdGlvbi5vbihcImVycm9yXCIsdD0+dGhpcy5ldmVudHMuZW1pdChcImVycm9yXCIsdCkpLHRoaXMuY29ubmVjdGlvbi5vbihcInJlZ2lzdGVyX2Vycm9yXCIsdD0+dGhpcy5vbkNsb3NlKCkpLHRoaXMuaGFzUmVnaXN0ZXJlZEV2ZW50TGlzdGVuZXJzPSEwKX19ZXhwb3J0e28gYXMgSnNvblJwY1Byb3ZpZGVyLG8gYXMgZGVmYXVsdH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJjIiwiSUpzb25ScGNQcm92aWRlciIsInIiLCJmb3JtYXRKc29uUnBjUmVxdWVzdCIsImgiLCJnZXRCaWdJbnRScGNJZCIsImEiLCJpc0pzb25ScGNFcnJvciIsImQiLCJpc0pzb25ScGNSZXNwb25zZSIsInYiLCJvIiwiY29uc3RydWN0b3IiLCJ0IiwiZXZlbnRzIiwiaGFzUmVnaXN0ZXJlZEV2ZW50TGlzdGVuZXJzIiwiY29ubmVjdGlvbiIsInNldENvbm5lY3Rpb24iLCJjb25uZWN0ZWQiLCJyZWdpc3RlckV2ZW50TGlzdGVuZXJzIiwiY29ubmVjdCIsIm9wZW4iLCJkaXNjb25uZWN0IiwiY2xvc2UiLCJvbiIsImUiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZXF1ZXN0IiwicmVxdWVzdFN0cmljdCIsIm1ldGhvZCIsInBhcmFtcyIsImlkIiwidG9TdHJpbmciLCJQcm9taXNlIiwiaSIsInMiLCJuIiwiZXJyb3IiLCJyZXN1bHQiLCJzZW5kIiwib25QYXlsb2FkIiwiZW1pdCIsInR5cGUiLCJkYXRhIiwib25DbG9zZSIsImNvZGUiLCJFcnJvciIsInJlYXNvbiIsIkpzb25ScGNQcm92aWRlciIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js":
/*!********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IBaseJsonRpcProvider: () => (/* binding */ n),\n/* harmony export */   IEvents: () => (/* binding */ e),\n/* harmony export */   IJsonRpcConnection: () => (/* binding */ o),\n/* harmony export */   IJsonRpcProvider: () => (/* binding */ r)\n/* harmony export */ });\nclass e {\n}\nclass o extends e {\n    constructor(c){\n        super();\n    }\n}\nclass n extends e {\n    constructor(){\n        super();\n    }\n}\nclass r extends n {\n    constructor(c){\n        super();\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy10eXBlcy9kaXN0L2luZGV4LmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxNQUFNQTtBQUFFO0FBQUMsTUFBTUMsVUFBVUQ7SUFBRUUsWUFBWUMsQ0FBQyxDQUFDO1FBQUMsS0FBSztJQUFFO0FBQUM7QUFBQyxNQUFNQyxVQUFVSjtJQUFFRSxhQUFhO1FBQUMsS0FBSztJQUFFO0FBQUM7QUFBQyxNQUFNRyxVQUFVRDtJQUFFRixZQUFZQyxDQUFDLENBQUM7UUFBQyxLQUFLO0lBQUU7QUFBQztBQUE4RixDQUNuTyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy10eXBlcy9kaXN0L2luZGV4LmVzLmpzP2IxMjkiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgZXt9Y2xhc3MgbyBleHRlbmRzIGV7Y29uc3RydWN0b3IoYyl7c3VwZXIoKX19Y2xhc3MgbiBleHRlbmRzIGV7Y29uc3RydWN0b3IoKXtzdXBlcigpfX1jbGFzcyByIGV4dGVuZHMgbntjb25zdHJ1Y3RvcihjKXtzdXBlcigpfX1leHBvcnR7biBhcyBJQmFzZUpzb25ScGNQcm92aWRlcixlIGFzIElFdmVudHMsbyBhcyBJSnNvblJwY0Nvbm5lY3Rpb24sciBhcyBJSnNvblJwY1Byb3ZpZGVyfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbImUiLCJvIiwiY29uc3RydWN0b3IiLCJjIiwibiIsInIiLCJJQmFzZUpzb25ScGNQcm92aWRlciIsIklFdmVudHMiLCJJSnNvblJwY0Nvbm5lY3Rpb24iLCJJSnNvblJwY1Byb3ZpZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ERROR: () => (/* binding */ DEFAULT_ERROR),\n/* harmony export */   INTERNAL_ERROR: () => (/* binding */ INTERNAL_ERROR),\n/* harmony export */   INVALID_PARAMS: () => (/* binding */ INVALID_PARAMS),\n/* harmony export */   INVALID_REQUEST: () => (/* binding */ INVALID_REQUEST),\n/* harmony export */   METHOD_NOT_FOUND: () => (/* binding */ METHOD_NOT_FOUND),\n/* harmony export */   PARSE_ERROR: () => (/* binding */ PARSE_ERROR),\n/* harmony export */   RESERVED_ERROR_CODES: () => (/* binding */ RESERVED_ERROR_CODES),\n/* harmony export */   SERVER_ERROR: () => (/* binding */ SERVER_ERROR),\n/* harmony export */   SERVER_ERROR_CODE_RANGE: () => (/* binding */ SERVER_ERROR_CODE_RANGE),\n/* harmony export */   STANDARD_ERROR_MAP: () => (/* binding */ STANDARD_ERROR_MAP)\n/* harmony export */ });\nconst PARSE_ERROR = \"PARSE_ERROR\";\nconst INVALID_REQUEST = \"INVALID_REQUEST\";\nconst METHOD_NOT_FOUND = \"METHOD_NOT_FOUND\";\nconst INVALID_PARAMS = \"INVALID_PARAMS\";\nconst INTERNAL_ERROR = \"INTERNAL_ERROR\";\nconst SERVER_ERROR = \"SERVER_ERROR\";\nconst RESERVED_ERROR_CODES = [\n    -32700,\n    -32600,\n    -32601,\n    -32602,\n    -32603\n];\nconst SERVER_ERROR_CODE_RANGE = [\n    -32000,\n    -32099\n];\nconst STANDARD_ERROR_MAP = {\n    [PARSE_ERROR]: {\n        code: -32700,\n        message: \"Parse error\"\n    },\n    [INVALID_REQUEST]: {\n        code: -32600,\n        message: \"Invalid Request\"\n    },\n    [METHOD_NOT_FOUND]: {\n        code: -32601,\n        message: \"Method not found\"\n    },\n    [INVALID_PARAMS]: {\n        code: -32602,\n        message: \"Invalid params\"\n    },\n    [INTERNAL_ERROR]: {\n        code: -32603,\n        message: \"Internal error\"\n    },\n    [SERVER_ERROR]: {\n        code: -32000,\n        message: \"Server error\"\n    }\n};\nconst DEFAULT_ERROR = SERVER_ERROR; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFPLE1BQU1BLGNBQWMsY0FBYztBQUNsQyxNQUFNQyxrQkFBa0Isa0JBQWtCO0FBQzFDLE1BQU1DLG1CQUFtQixtQkFBbUI7QUFDNUMsTUFBTUMsaUJBQWlCLGlCQUFpQjtBQUN4QyxNQUFNQyxpQkFBaUIsaUJBQWlCO0FBQ3hDLE1BQU1DLGVBQWUsZUFBZTtBQUNwQyxNQUFNQyx1QkFBdUI7SUFBQyxDQUFDO0lBQU8sQ0FBQztJQUFPLENBQUM7SUFBTyxDQUFDO0lBQU8sQ0FBQztDQUFNLENBQUM7QUFDdEUsTUFBTUMsMEJBQTBCO0lBQUMsQ0FBQztJQUFPLENBQUM7Q0FBTSxDQUFDO0FBQ2pELE1BQU1DLHFCQUFxQjtJQUM5QixDQUFDUixZQUFZLEVBQUU7UUFBRVMsTUFBTSxDQUFDO1FBQU9DLFNBQVM7SUFBYztJQUN0RCxDQUFDVCxnQkFBZ0IsRUFBRTtRQUFFUSxNQUFNLENBQUM7UUFBT0MsU0FBUztJQUFrQjtJQUM5RCxDQUFDUixpQkFBaUIsRUFBRTtRQUFFTyxNQUFNLENBQUM7UUFBT0MsU0FBUztJQUFtQjtJQUNoRSxDQUFDUCxlQUFlLEVBQUU7UUFBRU0sTUFBTSxDQUFDO1FBQU9DLFNBQVM7SUFBaUI7SUFDNUQsQ0FBQ04sZUFBZSxFQUFFO1FBQUVLLE1BQU0sQ0FBQztRQUFPQyxTQUFTO0lBQWlCO0lBQzVELENBQUNMLGFBQWEsRUFBRTtRQUFFSSxNQUFNLENBQUM7UUFBT0MsU0FBUztJQUFlO0FBQzVELEVBQUU7QUFDSyxNQUFNQyxnQkFBZ0JOLGFBQWEsQ0FDMUMscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vY29uc3RhbnRzLmpzPzljMDUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFBBUlNFX0VSUk9SID0gXCJQQVJTRV9FUlJPUlwiO1xuZXhwb3J0IGNvbnN0IElOVkFMSURfUkVRVUVTVCA9IFwiSU5WQUxJRF9SRVFVRVNUXCI7XG5leHBvcnQgY29uc3QgTUVUSE9EX05PVF9GT1VORCA9IFwiTUVUSE9EX05PVF9GT1VORFwiO1xuZXhwb3J0IGNvbnN0IElOVkFMSURfUEFSQU1TID0gXCJJTlZBTElEX1BBUkFNU1wiO1xuZXhwb3J0IGNvbnN0IElOVEVSTkFMX0VSUk9SID0gXCJJTlRFUk5BTF9FUlJPUlwiO1xuZXhwb3J0IGNvbnN0IFNFUlZFUl9FUlJPUiA9IFwiU0VSVkVSX0VSUk9SXCI7XG5leHBvcnQgY29uc3QgUkVTRVJWRURfRVJST1JfQ09ERVMgPSBbLTMyNzAwLCAtMzI2MDAsIC0zMjYwMSwgLTMyNjAyLCAtMzI2MDNdO1xuZXhwb3J0IGNvbnN0IFNFUlZFUl9FUlJPUl9DT0RFX1JBTkdFID0gWy0zMjAwMCwgLTMyMDk5XTtcbmV4cG9ydCBjb25zdCBTVEFOREFSRF9FUlJPUl9NQVAgPSB7XG4gICAgW1BBUlNFX0VSUk9SXTogeyBjb2RlOiAtMzI3MDAsIG1lc3NhZ2U6IFwiUGFyc2UgZXJyb3JcIiB9LFxuICAgIFtJTlZBTElEX1JFUVVFU1RdOiB7IGNvZGU6IC0zMjYwMCwgbWVzc2FnZTogXCJJbnZhbGlkIFJlcXVlc3RcIiB9LFxuICAgIFtNRVRIT0RfTk9UX0ZPVU5EXTogeyBjb2RlOiAtMzI2MDEsIG1lc3NhZ2U6IFwiTWV0aG9kIG5vdCBmb3VuZFwiIH0sXG4gICAgW0lOVkFMSURfUEFSQU1TXTogeyBjb2RlOiAtMzI2MDIsIG1lc3NhZ2U6IFwiSW52YWxpZCBwYXJhbXNcIiB9LFxuICAgIFtJTlRFUk5BTF9FUlJPUl06IHsgY29kZTogLTMyNjAzLCBtZXNzYWdlOiBcIkludGVybmFsIGVycm9yXCIgfSxcbiAgICBbU0VSVkVSX0VSUk9SXTogeyBjb2RlOiAtMzIwMDAsIG1lc3NhZ2U6IFwiU2VydmVyIGVycm9yXCIgfSxcbn07XG5leHBvcnQgY29uc3QgREVGQVVMVF9FUlJPUiA9IFNFUlZFUl9FUlJPUjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOlsiUEFSU0VfRVJST1IiLCJJTlZBTElEX1JFUVVFU1QiLCJNRVRIT0RfTk9UX0ZPVU5EIiwiSU5WQUxJRF9QQVJBTVMiLCJJTlRFUk5BTF9FUlJPUiIsIlNFUlZFUl9FUlJPUiIsIlJFU0VSVkVEX0VSUk9SX0NPREVTIiwiU0VSVkVSX0VSUk9SX0NPREVfUkFOR0UiLCJTVEFOREFSRF9FUlJPUl9NQVAiLCJjb2RlIiwibWVzc2FnZSIsIkRFRkFVTFRfRVJST1IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNodeJs: () => (/* binding */ isNodeJs)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/environment */ \"(ssr)/./node_modules/@walletconnect/environment/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"isNodeJs\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\nconst isNodeJs = _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__.isNode;\n //# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9lbnYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQW9EO0FBQzdDLE1BQU1DLFdBQVdELDhEQUFNQSxDQUFDO0FBQ1ksQ0FDM0MsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vZW52LmpzPzY4NGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSBcIkB3YWxsZXRjb25uZWN0L2Vudmlyb25tZW50XCI7XG5leHBvcnQgY29uc3QgaXNOb2RlSnMgPSBpc05vZGU7XG5leHBvcnQgKiBmcm9tIFwiQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnRcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudi5qcy5tYXAiXSwibmFtZXMiOlsiaXNOb2RlIiwiaXNOb2RlSnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getError: () => (/* binding */ getError),\n/* harmony export */   getErrorByCode: () => (/* binding */ getErrorByCode),\n/* harmony export */   isReservedErrorCode: () => (/* binding */ isReservedErrorCode),\n/* harmony export */   isServerErrorCode: () => (/* binding */ isServerErrorCode),\n/* harmony export */   isValidErrorCode: () => (/* binding */ isValidErrorCode),\n/* harmony export */   parseConnectionError: () => (/* binding */ parseConnectionError),\n/* harmony export */   validateJsonRpcError: () => (/* binding */ validateJsonRpcError)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\");\n\nfunction isServerErrorCode(code) {\n    return code <= _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR_CODE_RANGE[0] && code >= _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR_CODE_RANGE[1];\n}\nfunction isReservedErrorCode(code) {\n    return _constants__WEBPACK_IMPORTED_MODULE_0__.RESERVED_ERROR_CODES.includes(code);\n}\nfunction isValidErrorCode(code) {\n    return typeof code === \"number\";\n}\nfunction getError(type) {\n    if (!Object.keys(_constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP).includes(type)) {\n        return _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR];\n    }\n    return _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[type];\n}\nfunction getErrorByCode(code) {\n    const match = Object.values(_constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP).find((e)=>e.code === code);\n    if (!match) {\n        return _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR];\n    }\n    return match;\n}\nfunction validateJsonRpcError(response) {\n    if (typeof response.error.code === \"undefined\") {\n        return {\n            valid: false,\n            error: \"Missing code for JSON-RPC error\"\n        };\n    }\n    if (typeof response.error.message === \"undefined\") {\n        return {\n            valid: false,\n            error: \"Missing message for JSON-RPC error\"\n        };\n    }\n    if (!isValidErrorCode(response.error.code)) {\n        return {\n            valid: false,\n            error: `Invalid error code type for JSON-RPC: ${response.error.code}`\n        };\n    }\n    if (isReservedErrorCode(response.error.code)) {\n        const error = getErrorByCode(response.error.code);\n        if (error.message !== _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR].message && response.error.message === error.message) {\n            return {\n                valid: false,\n                error: `Invalid error code message for JSON-RPC: ${response.error.code}`\n            };\n        }\n    }\n    return {\n        valid: true\n    };\n}\nfunction parseConnectionError(e, url, type) {\n    return e.message.includes(\"getaddrinfo ENOTFOUND\") || e.message.includes(\"connect ECONNREFUSED\") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e;\n} //# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9lcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFnSDtBQUN6RyxTQUFTSSxrQkFBa0JDLElBQUk7SUFDbEMsT0FBT0EsUUFBUUwsK0RBQXVCLENBQUMsRUFBRSxJQUFJSyxRQUFRTCwrREFBdUIsQ0FBQyxFQUFFO0FBQ25GO0FBQ08sU0FBU00sb0JBQW9CRCxJQUFJO0lBQ3BDLE9BQU9KLDREQUFvQkEsQ0FBQ00sUUFBUSxDQUFDRjtBQUN6QztBQUNPLFNBQVNHLGlCQUFpQkgsSUFBSTtJQUNqQyxPQUFPLE9BQU9BLFNBQVM7QUFDM0I7QUFDTyxTQUFTSSxTQUFTQyxJQUFJO0lBQ3pCLElBQUksQ0FBQ0MsT0FBT0MsSUFBSSxDQUFDViwwREFBa0JBLEVBQUVLLFFBQVEsQ0FBQ0csT0FBTztRQUNqRCxPQUFPUiwwREFBa0IsQ0FBQ0MscURBQWFBLENBQUM7SUFDNUM7SUFDQSxPQUFPRCwwREFBa0IsQ0FBQ1EsS0FBSztBQUNuQztBQUNPLFNBQVNHLGVBQWVSLElBQUk7SUFDL0IsTUFBTVMsUUFBUUgsT0FBT0ksTUFBTSxDQUFDYiwwREFBa0JBLEVBQUVjLElBQUksQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRVosSUFBSSxLQUFLQTtJQUNyRSxJQUFJLENBQUNTLE9BQU87UUFDUixPQUFPWiwwREFBa0IsQ0FBQ0MscURBQWFBLENBQUM7SUFDNUM7SUFDQSxPQUFPVztBQUNYO0FBQ08sU0FBU0kscUJBQXFCQyxRQUFRO0lBQ3pDLElBQUksT0FBT0EsU0FBU0MsS0FBSyxDQUFDZixJQUFJLEtBQUssYUFBYTtRQUM1QyxPQUFPO1lBQUVnQixPQUFPO1lBQU9ELE9BQU87UUFBa0M7SUFDcEU7SUFDQSxJQUFJLE9BQU9ELFNBQVNDLEtBQUssQ0FBQ0UsT0FBTyxLQUFLLGFBQWE7UUFDL0MsT0FBTztZQUFFRCxPQUFPO1lBQU9ELE9BQU87UUFBcUM7SUFDdkU7SUFDQSxJQUFJLENBQUNaLGlCQUFpQlcsU0FBU0MsS0FBSyxDQUFDZixJQUFJLEdBQUc7UUFDeEMsT0FBTztZQUNIZ0IsT0FBTztZQUNQRCxPQUFPLENBQUMsc0NBQXNDLEVBQUVELFNBQVNDLEtBQUssQ0FBQ2YsSUFBSSxDQUFDLENBQUM7UUFDekU7SUFDSjtJQUNBLElBQUlDLG9CQUFvQmEsU0FBU0MsS0FBSyxDQUFDZixJQUFJLEdBQUc7UUFDMUMsTUFBTWUsUUFBUVAsZUFBZU0sU0FBU0MsS0FBSyxDQUFDZixJQUFJO1FBQ2hELElBQUllLE1BQU1FLE9BQU8sS0FBS3BCLDBEQUFrQixDQUFDQyxxREFBYUEsQ0FBQyxDQUFDbUIsT0FBTyxJQUMzREgsU0FBU0MsS0FBSyxDQUFDRSxPQUFPLEtBQUtGLE1BQU1FLE9BQU8sRUFBRTtZQUMxQyxPQUFPO2dCQUNIRCxPQUFPO2dCQUNQRCxPQUFPLENBQUMseUNBQXlDLEVBQUVELFNBQVNDLEtBQUssQ0FBQ2YsSUFBSSxDQUFDLENBQUM7WUFDNUU7UUFDSjtJQUNKO0lBQ0EsT0FBTztRQUFFZ0IsT0FBTztJQUFLO0FBQ3pCO0FBQ08sU0FBU0UscUJBQXFCTixDQUFDLEVBQUVPLEdBQUcsRUFBRWQsSUFBSTtJQUM3QyxPQUFPTyxFQUFFSyxPQUFPLENBQUNmLFFBQVEsQ0FBQyw0QkFBNEJVLEVBQUVLLE9BQU8sQ0FBQ2YsUUFBUSxDQUFDLDBCQUNuRSxJQUFJa0IsTUFBTSxDQUFDLFlBQVksRUFBRWYsS0FBSyxZQUFZLEVBQUVjLElBQUksQ0FBQyxJQUNqRFA7QUFDVixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BzZS0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL2Vycm9yLmpzPzU5NTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU0VSVkVSX0VSUk9SX0NPREVfUkFOR0UsIFJFU0VSVkVEX0VSUk9SX0NPREVTLCBTVEFOREFSRF9FUlJPUl9NQVAsIERFRkFVTFRfRVJST1IsIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNTZXJ2ZXJFcnJvckNvZGUoY29kZSkge1xuICAgIHJldHVybiBjb2RlIDw9IFNFUlZFUl9FUlJPUl9DT0RFX1JBTkdFWzBdICYmIGNvZGUgPj0gU0VSVkVSX0VSUk9SX0NPREVfUkFOR0VbMV07XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZXNlcnZlZEVycm9yQ29kZShjb2RlKSB7XG4gICAgcmV0dXJuIFJFU0VSVkVEX0VSUk9SX0NPREVTLmluY2x1ZGVzKGNvZGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRFcnJvckNvZGUoY29kZSkge1xuICAgIHJldHVybiB0eXBlb2YgY29kZSA9PT0gXCJudW1iZXJcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRFcnJvcih0eXBlKSB7XG4gICAgaWYgKCFPYmplY3Qua2V5cyhTVEFOREFSRF9FUlJPUl9NQVApLmluY2x1ZGVzKHR5cGUpKSB7XG4gICAgICAgIHJldHVybiBTVEFOREFSRF9FUlJPUl9NQVBbREVGQVVMVF9FUlJPUl07XG4gICAgfVxuICAgIHJldHVybiBTVEFOREFSRF9FUlJPUl9NQVBbdHlwZV07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJyb3JCeUNvZGUoY29kZSkge1xuICAgIGNvbnN0IG1hdGNoID0gT2JqZWN0LnZhbHVlcyhTVEFOREFSRF9FUlJPUl9NQVApLmZpbmQoZSA9PiBlLmNvZGUgPT09IGNvZGUpO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIFNUQU5EQVJEX0VSUk9SX01BUFtERUZBVUxUX0VSUk9SXTtcbiAgICB9XG4gICAgcmV0dXJuIG1hdGNoO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlSnNvblJwY0Vycm9yKHJlc3BvbnNlKSB7XG4gICAgaWYgKHR5cGVvZiByZXNwb25zZS5lcnJvci5jb2RlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiB7IHZhbGlkOiBmYWxzZSwgZXJyb3I6IFwiTWlzc2luZyBjb2RlIGZvciBKU09OLVJQQyBlcnJvclwiIH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzcG9uc2UuZXJyb3IubWVzc2FnZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UsIGVycm9yOiBcIk1pc3NpbmcgbWVzc2FnZSBmb3IgSlNPTi1SUEMgZXJyb3JcIiB9O1xuICAgIH1cbiAgICBpZiAoIWlzVmFsaWRFcnJvckNvZGUocmVzcG9uc2UuZXJyb3IuY29kZSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yOiBgSW52YWxpZCBlcnJvciBjb2RlIHR5cGUgZm9yIEpTT04tUlBDOiAke3Jlc3BvbnNlLmVycm9yLmNvZGV9YCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzUmVzZXJ2ZWRFcnJvckNvZGUocmVzcG9uc2UuZXJyb3IuY29kZSkpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBnZXRFcnJvckJ5Q29kZShyZXNwb25zZS5lcnJvci5jb2RlKTtcbiAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UgIT09IFNUQU5EQVJEX0VSUk9SX01BUFtERUZBVUxUX0VSUk9SXS5tZXNzYWdlICYmXG4gICAgICAgICAgICByZXNwb25zZS5lcnJvci5tZXNzYWdlID09PSBlcnJvci5tZXNzYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogYEludmFsaWQgZXJyb3IgY29kZSBtZXNzYWdlIGZvciBKU09OLVJQQzogJHtyZXNwb25zZS5lcnJvci5jb2RlfWAsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IHZhbGlkOiB0cnVlIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDb25uZWN0aW9uRXJyb3IoZSwgdXJsLCB0eXBlKSB7XG4gICAgcmV0dXJuIGUubWVzc2FnZS5pbmNsdWRlcyhcImdldGFkZHJpbmZvIEVOT1RGT1VORFwiKSB8fCBlLm1lc3NhZ2UuaW5jbHVkZXMoXCJjb25uZWN0IEVDT05OUkVGVVNFRFwiKVxuICAgICAgICA/IG5ldyBFcnJvcihgVW5hdmFpbGFibGUgJHt0eXBlfSBSUEMgdXJsIGF0ICR7dXJsfWApXG4gICAgICAgIDogZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6WyJTRVJWRVJfRVJST1JfQ09ERV9SQU5HRSIsIlJFU0VSVkVEX0VSUk9SX0NPREVTIiwiU1RBTkRBUkRfRVJST1JfTUFQIiwiREVGQVVMVF9FUlJPUiIsImlzU2VydmVyRXJyb3JDb2RlIiwiY29kZSIsImlzUmVzZXJ2ZWRFcnJvckNvZGUiLCJpbmNsdWRlcyIsImlzVmFsaWRFcnJvckNvZGUiLCJnZXRFcnJvciIsInR5cGUiLCJPYmplY3QiLCJrZXlzIiwiZ2V0RXJyb3JCeUNvZGUiLCJtYXRjaCIsInZhbHVlcyIsImZpbmQiLCJlIiwidmFsaWRhdGVKc29uUnBjRXJyb3IiLCJyZXNwb25zZSIsImVycm9yIiwidmFsaWQiLCJtZXNzYWdlIiwicGFyc2VDb25uZWN0aW9uRXJyb3IiLCJ1cmwiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatErrorMessage: () => (/* binding */ formatErrorMessage),\n/* harmony export */   formatJsonRpcError: () => (/* binding */ formatJsonRpcError),\n/* harmony export */   formatJsonRpcRequest: () => (/* binding */ formatJsonRpcRequest),\n/* harmony export */   formatJsonRpcResult: () => (/* binding */ formatJsonRpcResult),\n/* harmony export */   getBigIntRpcId: () => (/* binding */ getBigIntRpcId),\n/* harmony export */   payloadId: () => (/* binding */ payloadId)\n/* harmony export */ });\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\");\n\n\nfunction payloadId(entropy = 3) {\n    const date = Date.now() * Math.pow(10, entropy);\n    const extra = Math.floor(Math.random() * Math.pow(10, entropy));\n    return date + extra;\n}\nfunction getBigIntRpcId(entropy = 6) {\n    return BigInt(payloadId(entropy));\n}\nfunction formatJsonRpcRequest(method, params, id) {\n    return {\n        id: id || payloadId(),\n        jsonrpc: \"2.0\",\n        method,\n        params\n    };\n}\nfunction formatJsonRpcResult(id, result) {\n    return {\n        id,\n        jsonrpc: \"2.0\",\n        result\n    };\n}\nfunction formatJsonRpcError(id, error, data) {\n    return {\n        id,\n        jsonrpc: \"2.0\",\n        error: formatErrorMessage(error, data)\n    };\n}\nfunction formatErrorMessage(error, data) {\n    if (typeof error === \"undefined\") {\n        return (0,_error__WEBPACK_IMPORTED_MODULE_0__.getError)(_constants__WEBPACK_IMPORTED_MODULE_1__.INTERNAL_ERROR);\n    }\n    if (typeof error === \"string\") {\n        error = Object.assign(Object.assign({}, (0,_error__WEBPACK_IMPORTED_MODULE_0__.getError)(_constants__WEBPACK_IMPORTED_MODULE_1__.SERVER_ERROR)), {\n            message: error\n        });\n    }\n    if (typeof data !== \"undefined\") {\n        error.data = data;\n    }\n    if ((0,_error__WEBPACK_IMPORTED_MODULE_0__.isReservedErrorCode)(error.code)) {\n        error = (0,_error__WEBPACK_IMPORTED_MODULE_0__.getErrorByCode)(error.code);\n    }\n    return error;\n} //# sourceMappingURL=format.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9mb3JtYXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBd0U7QUFDYjtBQUNwRCxTQUFTSyxVQUFVQyxVQUFVLENBQUM7SUFDakMsTUFBTUMsT0FBT0MsS0FBS0MsR0FBRyxLQUFLQyxLQUFLQyxHQUFHLENBQUMsSUFBSUw7SUFDdkMsTUFBTU0sUUFBUUYsS0FBS0csS0FBSyxDQUFDSCxLQUFLSSxNQUFNLEtBQUtKLEtBQUtDLEdBQUcsQ0FBQyxJQUFJTDtJQUN0RCxPQUFPQyxPQUFPSztBQUNsQjtBQUNPLFNBQVNHLGVBQWVULFVBQVUsQ0FBQztJQUN0QyxPQUFPVSxPQUFPWCxVQUFVQztBQUM1QjtBQUNPLFNBQVNXLHFCQUFxQkMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLEVBQUU7SUFDbkQsT0FBTztRQUNIQSxJQUFJQSxNQUFNZjtRQUNWZ0IsU0FBUztRQUNUSDtRQUNBQztJQUNKO0FBQ0o7QUFDTyxTQUFTRyxvQkFBb0JGLEVBQUUsRUFBRUcsTUFBTTtJQUMxQyxPQUFPO1FBQ0hIO1FBQ0FDLFNBQVM7UUFDVEU7SUFDSjtBQUNKO0FBQ08sU0FBU0MsbUJBQW1CSixFQUFFLEVBQUVLLEtBQUssRUFBRUMsSUFBSTtJQUM5QyxPQUFPO1FBQ0hOO1FBQ0FDLFNBQVM7UUFDVEksT0FBT0UsbUJBQW1CRixPQUFPQztJQUNyQztBQUNKO0FBQ08sU0FBU0MsbUJBQW1CRixLQUFLLEVBQUVDLElBQUk7SUFDMUMsSUFBSSxPQUFPRCxVQUFVLGFBQWE7UUFDOUIsT0FBT3pCLGdEQUFRQSxDQUFDRyxzREFBY0E7SUFDbEM7SUFDQSxJQUFJLE9BQU9zQixVQUFVLFVBQVU7UUFDM0JBLFFBQVFHLE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBRzdCLGdEQUFRQSxDQUFDSSxvREFBWUEsSUFBSTtZQUFFMEIsU0FBU0w7UUFBTTtJQUN0RjtJQUNBLElBQUksT0FBT0MsU0FBUyxhQUFhO1FBQzdCRCxNQUFNQyxJQUFJLEdBQUdBO0lBQ2pCO0lBQ0EsSUFBSXhCLDJEQUFtQkEsQ0FBQ3VCLE1BQU1NLElBQUksR0FBRztRQUNqQ04sUUFBUXhCLHNEQUFjQSxDQUFDd0IsTUFBTU0sSUFBSTtJQUNyQztJQUNBLE9BQU9OO0FBQ1gsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9mb3JtYXQuanM/MjUwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRFcnJvciwgZ2V0RXJyb3JCeUNvZGUsIGlzUmVzZXJ2ZWRFcnJvckNvZGUgfSBmcm9tIFwiLi9lcnJvclwiO1xuaW1wb3J0IHsgSU5URVJOQUxfRVJST1IsIFNFUlZFUl9FUlJPUiB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBheWxvYWRJZChlbnRyb3B5ID0gMykge1xuICAgIGNvbnN0IGRhdGUgPSBEYXRlLm5vdygpICogTWF0aC5wb3coMTAsIGVudHJvcHkpO1xuICAgIGNvbnN0IGV4dHJhID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMTAsIGVudHJvcHkpKTtcbiAgICByZXR1cm4gZGF0ZSArIGV4dHJhO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEJpZ0ludFJwY0lkKGVudHJvcHkgPSA2KSB7XG4gICAgcmV0dXJuIEJpZ0ludChwYXlsb2FkSWQoZW50cm9weSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEpzb25ScGNSZXF1ZXN0KG1ldGhvZCwgcGFyYW1zLCBpZCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBpZCB8fCBwYXlsb2FkSWQoKSxcbiAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBwYXJhbXMsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRKc29uUnBjUmVzdWx0KGlkLCByZXN1bHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZCxcbiAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgcmVzdWx0LFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0SnNvblJwY0Vycm9yKGlkLCBlcnJvciwgZGF0YSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkLFxuICAgICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgICBlcnJvcjogZm9ybWF0RXJyb3JNZXNzYWdlKGVycm9yLCBkYXRhKSxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEVycm9yTWVzc2FnZShlcnJvciwgZGF0YSkge1xuICAgIGlmICh0eXBlb2YgZXJyb3IgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGdldEVycm9yKElOVEVSTkFMX0VSUk9SKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBlcnJvciA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZ2V0RXJyb3IoU0VSVkVSX0VSUk9SKSksIHsgbWVzc2FnZTogZXJyb3IgfSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBlcnJvci5kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgaWYgKGlzUmVzZXJ2ZWRFcnJvckNvZGUoZXJyb3IuY29kZSkpIHtcbiAgICAgICAgZXJyb3IgPSBnZXRFcnJvckJ5Q29kZShlcnJvci5jb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0LmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRFcnJvciIsImdldEVycm9yQnlDb2RlIiwiaXNSZXNlcnZlZEVycm9yQ29kZSIsIklOVEVSTkFMX0VSUk9SIiwiU0VSVkVSX0VSUk9SIiwicGF5bG9hZElkIiwiZW50cm9weSIsImRhdGUiLCJEYXRlIiwibm93IiwiTWF0aCIsInBvdyIsImV4dHJhIiwiZmxvb3IiLCJyYW5kb20iLCJnZXRCaWdJbnRScGNJZCIsIkJpZ0ludCIsImZvcm1hdEpzb25ScGNSZXF1ZXN0IiwibWV0aG9kIiwicGFyYW1zIiwiaWQiLCJqc29ucnBjIiwiZm9ybWF0SnNvblJwY1Jlc3VsdCIsInJlc3VsdCIsImZvcm1hdEpzb25ScGNFcnJvciIsImVycm9yIiwiZGF0YSIsImZvcm1hdEVycm9yTWVzc2FnZSIsIk9iamVjdCIsImFzc2lnbiIsIm1lc3NhZ2UiLCJjb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ERROR: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR),\n/* harmony export */   IBaseJsonRpcProvider: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IBaseJsonRpcProvider),\n/* harmony export */   IEvents: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IEvents),\n/* harmony export */   IJsonRpcConnection: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IJsonRpcConnection),\n/* harmony export */   IJsonRpcProvider: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IJsonRpcProvider),\n/* harmony export */   INTERNAL_ERROR: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.INTERNAL_ERROR),\n/* harmony export */   INVALID_PARAMS: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_PARAMS),\n/* harmony export */   INVALID_REQUEST: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_REQUEST),\n/* harmony export */   METHOD_NOT_FOUND: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.METHOD_NOT_FOUND),\n/* harmony export */   PARSE_ERROR: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.PARSE_ERROR),\n/* harmony export */   RESERVED_ERROR_CODES: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.RESERVED_ERROR_CODES),\n/* harmony export */   SERVER_ERROR: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR),\n/* harmony export */   SERVER_ERROR_CODE_RANGE: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR_CODE_RANGE),\n/* harmony export */   STANDARD_ERROR_MAP: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP),\n/* harmony export */   formatErrorMessage: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatErrorMessage),\n/* harmony export */   formatJsonRpcError: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError),\n/* harmony export */   formatJsonRpcRequest: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest),\n/* harmony export */   formatJsonRpcResult: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcResult),\n/* harmony export */   getBigIntRpcId: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId),\n/* harmony export */   getError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.getError),\n/* harmony export */   getErrorByCode: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.getErrorByCode),\n/* harmony export */   isHttpUrl: () => (/* reexport safe */ _url__WEBPACK_IMPORTED_MODULE_6__.isHttpUrl),\n/* harmony export */   isJsonRpcError: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcError),\n/* harmony export */   isJsonRpcPayload: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcPayload),\n/* harmony export */   isJsonRpcRequest: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcRequest),\n/* harmony export */   isJsonRpcResponse: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcResponse),\n/* harmony export */   isJsonRpcResult: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcResult),\n/* harmony export */   isJsonRpcValidationInvalid: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcValidationInvalid),\n/* harmony export */   isLocalhostUrl: () => (/* reexport safe */ _url__WEBPACK_IMPORTED_MODULE_6__.isLocalhostUrl),\n/* harmony export */   isReservedErrorCode: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.isReservedErrorCode),\n/* harmony export */   isServerErrorCode: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.isServerErrorCode),\n/* harmony export */   isValidDefaultRoute: () => (/* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidDefaultRoute),\n/* harmony export */   isValidErrorCode: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.isValidErrorCode),\n/* harmony export */   isValidLeadingWildcardRoute: () => (/* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidLeadingWildcardRoute),\n/* harmony export */   isValidRoute: () => (/* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidRoute),\n/* harmony export */   isValidTrailingWildcardRoute: () => (/* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidTrailingWildcardRoute),\n/* harmony export */   isValidWildcardRoute: () => (/* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidWildcardRoute),\n/* harmony export */   isWsUrl: () => (/* reexport safe */ _url__WEBPACK_IMPORTED_MODULE_6__.isWsUrl),\n/* harmony export */   parseConnectionError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.parseConnectionError),\n/* harmony export */   payloadId: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.payloadId),\n/* harmony export */   validateJsonRpcError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.validateJsonRpcError)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js\");\n/* harmony import */ var _env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./env */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _env__WEBPACK_IMPORTED_MODULE_2__) if([\"default\",\"DEFAULT_ERROR\",\"INTERNAL_ERROR\",\"INVALID_PARAMS\",\"INVALID_REQUEST\",\"METHOD_NOT_FOUND\",\"PARSE_ERROR\",\"RESERVED_ERROR_CODES\",\"SERVER_ERROR\",\"SERVER_ERROR_CODE_RANGE\",\"STANDARD_ERROR_MAP\",\"getError\",\"getErrorByCode\",\"isReservedErrorCode\",\"isServerErrorCode\",\"isValidErrorCode\",\"parseConnectionError\",\"validateJsonRpcError\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _env__WEBPACK_IMPORTED_MODULE_2__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _format__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./format */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js\");\n/* harmony import */ var _routing__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./routing */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js\");\n/* harmony import */ var _url__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./url */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js\");\n/* harmony import */ var _validators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./validators */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js\");\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRCO0FBQ0o7QUFDRjtBQUNHO0FBQ0M7QUFDRjtBQUNGO0FBQ08sQ0FDN0IsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vaW5kZXguanM/NjgwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Vycm9yXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9lbnZcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Zvcm1hdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcm91dGluZ1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdHlwZXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3VybFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vdmFsaWRhdG9yc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValidDefaultRoute: () => (/* binding */ isValidDefaultRoute),\n/* harmony export */   isValidLeadingWildcardRoute: () => (/* binding */ isValidLeadingWildcardRoute),\n/* harmony export */   isValidRoute: () => (/* binding */ isValidRoute),\n/* harmony export */   isValidTrailingWildcardRoute: () => (/* binding */ isValidTrailingWildcardRoute),\n/* harmony export */   isValidWildcardRoute: () => (/* binding */ isValidWildcardRoute)\n/* harmony export */ });\nfunction isValidRoute(route) {\n    if (route.includes(\"*\")) {\n        return isValidWildcardRoute(route);\n    }\n    if (/\\W/g.test(route)) {\n        return false;\n    }\n    return true;\n}\nfunction isValidDefaultRoute(route) {\n    return route === \"*\";\n}\nfunction isValidWildcardRoute(route) {\n    if (isValidDefaultRoute(route)) {\n        return true;\n    }\n    if (!route.includes(\"*\")) {\n        return false;\n    }\n    if (route.split(\"*\").length !== 2) {\n        return false;\n    }\n    if (route.split(\"*\").filter((x)=>x.trim() === \"\").length !== 1) {\n        return false;\n    }\n    return true;\n}\nfunction isValidLeadingWildcardRoute(route) {\n    return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split(\"*\")[0].trim();\n}\nfunction isValidTrailingWildcardRoute(route) {\n    return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split(\"*\")[1].trim();\n} //# sourceMappingURL=routing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9yb3V0aW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQU8sU0FBU0EsYUFBYUMsS0FBSztJQUM5QixJQUFJQSxNQUFNQyxRQUFRLENBQUMsTUFBTTtRQUNyQixPQUFPQyxxQkFBcUJGO0lBQ2hDO0lBQ0EsSUFBSSxNQUFNRyxJQUFJLENBQUNILFFBQVE7UUFDbkIsT0FBTztJQUNYO0lBQ0EsT0FBTztBQUNYO0FBQ08sU0FBU0ksb0JBQW9CSixLQUFLO0lBQ3JDLE9BQU9BLFVBQVU7QUFDckI7QUFDTyxTQUFTRSxxQkFBcUJGLEtBQUs7SUFDdEMsSUFBSUksb0JBQW9CSixRQUFRO1FBQzVCLE9BQU87SUFDWDtJQUNBLElBQUksQ0FBQ0EsTUFBTUMsUUFBUSxDQUFDLE1BQU07UUFDdEIsT0FBTztJQUNYO0lBQ0EsSUFBSUQsTUFBTUssS0FBSyxDQUFDLEtBQUtDLE1BQU0sS0FBSyxHQUFHO1FBQy9CLE9BQU87SUFDWDtJQUNBLElBQUlOLE1BQU1LLEtBQUssQ0FBQyxLQUFLRSxNQUFNLENBQUNDLENBQUFBLElBQUtBLEVBQUVDLElBQUksT0FBTyxJQUFJSCxNQUFNLEtBQUssR0FBRztRQUM1RCxPQUFPO0lBQ1g7SUFDQSxPQUFPO0FBQ1g7QUFDTyxTQUFTSSw0QkFBNEJWLEtBQUs7SUFDN0MsT0FBTyxDQUFDSSxvQkFBb0JKLFVBQVVFLHFCQUFxQkYsVUFBVSxDQUFDQSxNQUFNSyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQ0ksSUFBSTtBQUNsRztBQUNPLFNBQVNFLDZCQUE2QlgsS0FBSztJQUM5QyxPQUFPLENBQUNJLG9CQUFvQkosVUFBVUUscUJBQXFCRixVQUFVLENBQUNBLE1BQU1LLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDSSxJQUFJO0FBQ2xHLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vcm91dGluZy5qcz85NjBkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkUm91dGUocm91dGUpIHtcbiAgICBpZiAocm91dGUuaW5jbHVkZXMoXCIqXCIpKSB7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkV2lsZGNhcmRSb3V0ZShyb3V0ZSk7XG4gICAgfVxuICAgIGlmICgvXFxXL2cudGVzdChyb3V0ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRGVmYXVsdFJvdXRlKHJvdXRlKSB7XG4gICAgcmV0dXJuIHJvdXRlID09PSBcIipcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkV2lsZGNhcmRSb3V0ZShyb3V0ZSkge1xuICAgIGlmIChpc1ZhbGlkRGVmYXVsdFJvdXRlKHJvdXRlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFyb3V0ZS5pbmNsdWRlcyhcIipcIikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocm91dGUuc3BsaXQoXCIqXCIpLmxlbmd0aCAhPT0gMikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChyb3V0ZS5zcGxpdChcIipcIikuZmlsdGVyKHggPT4geC50cmltKCkgPT09IFwiXCIpLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRMZWFkaW5nV2lsZGNhcmRSb3V0ZShyb3V0ZSkge1xuICAgIHJldHVybiAhaXNWYWxpZERlZmF1bHRSb3V0ZShyb3V0ZSkgJiYgaXNWYWxpZFdpbGRjYXJkUm91dGUocm91dGUpICYmICFyb3V0ZS5zcGxpdChcIipcIilbMF0udHJpbSgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRUcmFpbGluZ1dpbGRjYXJkUm91dGUocm91dGUpIHtcbiAgICByZXR1cm4gIWlzVmFsaWREZWZhdWx0Um91dGUocm91dGUpICYmIGlzVmFsaWRXaWxkY2FyZFJvdXRlKHJvdXRlKSAmJiAhcm91dGUuc3BsaXQoXCIqXCIpWzFdLnRyaW0oKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRpbmcuanMubWFwIl0sIm5hbWVzIjpbImlzVmFsaWRSb3V0ZSIsInJvdXRlIiwiaW5jbHVkZXMiLCJpc1ZhbGlkV2lsZGNhcmRSb3V0ZSIsInRlc3QiLCJpc1ZhbGlkRGVmYXVsdFJvdXRlIiwic3BsaXQiLCJsZW5ndGgiLCJmaWx0ZXIiLCJ4IiwidHJpbSIsImlzVmFsaWRMZWFkaW5nV2lsZGNhcmRSb3V0ZSIsImlzVmFsaWRUcmFpbGluZ1dpbGRjYXJkUm91dGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IBaseJsonRpcProvider: () => (/* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IBaseJsonRpcProvider),\n/* harmony export */   IEvents: () => (/* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IEvents),\n/* harmony export */   IJsonRpcConnection: () => (/* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IJsonRpcConnection),\n/* harmony export */   IJsonRpcProvider: () => (/* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IJsonRpcProvider)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/jsonrpc-types */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js\");\n //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE2QyxDQUM3QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS90eXBlcy5qcz8yNjI0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9qc29ucnBjLXR5cGVzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isHttpUrl: () => (/* binding */ isHttpUrl),\n/* harmony export */   isLocalhostUrl: () => (/* binding */ isLocalhostUrl),\n/* harmony export */   isWsUrl: () => (/* binding */ isWsUrl)\n/* harmony export */ });\nconst HTTP_REGEX = \"^https?:\";\nconst WS_REGEX = \"^wss?:\";\nfunction getUrlProtocol(url) {\n    const matches = url.match(new RegExp(/^\\w+:/, \"gi\"));\n    if (!matches || !matches.length) return;\n    return matches[0];\n}\nfunction matchRegexProtocol(url, regex) {\n    const protocol = getUrlProtocol(url);\n    if (typeof protocol === \"undefined\") return false;\n    return new RegExp(regex).test(protocol);\n}\nfunction isHttpUrl(url) {\n    return matchRegexProtocol(url, HTTP_REGEX);\n}\nfunction isWsUrl(url) {\n    return matchRegexProtocol(url, WS_REGEX);\n}\nfunction isLocalhostUrl(url) {\n    return new RegExp(\"wss?://localhost(:d{2,5})?\").test(url);\n} //# sourceMappingURL=url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS91cmwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsYUFBYTtBQUNuQixNQUFNQyxXQUFXO0FBQ2pCLFNBQVNDLGVBQWVDLEdBQUc7SUFDdkIsTUFBTUMsVUFBVUQsSUFBSUUsS0FBSyxDQUFDLElBQUlDLE9BQU8sU0FBUztJQUM5QyxJQUFJLENBQUNGLFdBQVcsQ0FBQ0EsUUFBUUcsTUFBTSxFQUMzQjtJQUNKLE9BQU9ILE9BQU8sQ0FBQyxFQUFFO0FBQ3JCO0FBQ0EsU0FBU0ksbUJBQW1CTCxHQUFHLEVBQUVNLEtBQUs7SUFDbEMsTUFBTUMsV0FBV1IsZUFBZUM7SUFDaEMsSUFBSSxPQUFPTyxhQUFhLGFBQ3BCLE9BQU87SUFDWCxPQUFPLElBQUlKLE9BQU9HLE9BQU9FLElBQUksQ0FBQ0Q7QUFDbEM7QUFDTyxTQUFTRSxVQUFVVCxHQUFHO0lBQ3pCLE9BQU9LLG1CQUFtQkwsS0FBS0g7QUFDbkM7QUFDTyxTQUFTYSxRQUFRVixHQUFHO0lBQ3ZCLE9BQU9LLG1CQUFtQkwsS0FBS0Y7QUFDbkM7QUFDTyxTQUFTYSxlQUFlWCxHQUFHO0lBQzlCLE9BQU8sSUFBSUcsT0FBTyw4QkFBOEJLLElBQUksQ0FBQ1I7QUFDekQsRUFDQSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS91cmwuanM/ODMyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBIVFRQX1JFR0VYID0gXCJeaHR0cHM/OlwiO1xuY29uc3QgV1NfUkVHRVggPSBcIl53c3M/OlwiO1xuZnVuY3Rpb24gZ2V0VXJsUHJvdG9jb2wodXJsKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHVybC5tYXRjaChuZXcgUmVnRXhwKC9eXFx3KzovLCBcImdpXCIpKTtcbiAgICBpZiAoIW1hdGNoZXMgfHwgIW1hdGNoZXMubGVuZ3RoKVxuICAgICAgICByZXR1cm47XG4gICAgcmV0dXJuIG1hdGNoZXNbMF07XG59XG5mdW5jdGlvbiBtYXRjaFJlZ2V4UHJvdG9jb2wodXJsLCByZWdleCkge1xuICAgIGNvbnN0IHByb3RvY29sID0gZ2V0VXJsUHJvdG9jb2wodXJsKTtcbiAgICBpZiAodHlwZW9mIHByb3RvY29sID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXgpLnRlc3QocHJvdG9jb2wpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSHR0cFVybCh1cmwpIHtcbiAgICByZXR1cm4gbWF0Y2hSZWdleFByb3RvY29sKHVybCwgSFRUUF9SRUdFWCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNXc1VybCh1cmwpIHtcbiAgICByZXR1cm4gbWF0Y2hSZWdleFByb3RvY29sKHVybCwgV1NfUkVHRVgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTG9jYWxob3N0VXJsKHVybCkge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKFwid3NzPzovL2xvY2FsaG9zdCg6ZHsyLDV9KT9cIikudGVzdCh1cmwpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJsLmpzLm1hcCJdLCJuYW1lcyI6WyJIVFRQX1JFR0VYIiwiV1NfUkVHRVgiLCJnZXRVcmxQcm90b2NvbCIsInVybCIsIm1hdGNoZXMiLCJtYXRjaCIsIlJlZ0V4cCIsImxlbmd0aCIsIm1hdGNoUmVnZXhQcm90b2NvbCIsInJlZ2V4IiwicHJvdG9jb2wiLCJ0ZXN0IiwiaXNIdHRwVXJsIiwiaXNXc1VybCIsImlzTG9jYWxob3N0VXJsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isJsonRpcError: () => (/* binding */ isJsonRpcError),\n/* harmony export */   isJsonRpcPayload: () => (/* binding */ isJsonRpcPayload),\n/* harmony export */   isJsonRpcRequest: () => (/* binding */ isJsonRpcRequest),\n/* harmony export */   isJsonRpcResponse: () => (/* binding */ isJsonRpcResponse),\n/* harmony export */   isJsonRpcResult: () => (/* binding */ isJsonRpcResult),\n/* harmony export */   isJsonRpcValidationInvalid: () => (/* binding */ isJsonRpcValidationInvalid)\n/* harmony export */ });\nfunction isJsonRpcPayload(payload) {\n    return typeof payload === \"object\" && \"id\" in payload && \"jsonrpc\" in payload && payload.jsonrpc === \"2.0\";\n}\nfunction isJsonRpcRequest(payload) {\n    return isJsonRpcPayload(payload) && \"method\" in payload;\n}\nfunction isJsonRpcResponse(payload) {\n    return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));\n}\nfunction isJsonRpcResult(payload) {\n    return \"result\" in payload;\n}\nfunction isJsonRpcError(payload) {\n    return \"error\" in payload;\n}\nfunction isJsonRpcValidationInvalid(validation) {\n    return \"error\" in validation && validation.valid === false;\n} //# sourceMappingURL=validators.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS92YWxpZGF0b3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFPLFNBQVNBLGlCQUFpQkMsT0FBTztJQUNwQyxPQUFRLE9BQU9BLFlBQVksWUFDdkIsUUFBUUEsV0FDUixhQUFhQSxXQUNiQSxRQUFRQyxPQUFPLEtBQUs7QUFDNUI7QUFDTyxTQUFTQyxpQkFBaUJGLE9BQU87SUFDcEMsT0FBT0QsaUJBQWlCQyxZQUFZLFlBQVlBO0FBQ3BEO0FBQ08sU0FBU0csa0JBQWtCSCxPQUFPO0lBQ3JDLE9BQU9ELGlCQUFpQkMsWUFBYUksQ0FBQUEsZ0JBQWdCSixZQUFZSyxlQUFlTCxRQUFPO0FBQzNGO0FBQ08sU0FBU0ksZ0JBQWdCSixPQUFPO0lBQ25DLE9BQU8sWUFBWUE7QUFDdkI7QUFDTyxTQUFTSyxlQUFlTCxPQUFPO0lBQ2xDLE9BQU8sV0FBV0E7QUFDdEI7QUFDTyxTQUFTTSwyQkFBMkJDLFVBQVU7SUFDakQsT0FBTyxXQUFXQSxjQUFjQSxXQUFXQyxLQUFLLEtBQUs7QUFDekQsRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS92YWxpZGF0b3JzLmpzPzQ3NGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY1BheWxvYWQocGF5bG9hZCkge1xuICAgIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgXCJpZFwiIGluIHBheWxvYWQgJiZcbiAgICAgICAgXCJqc29ucnBjXCIgaW4gcGF5bG9hZCAmJlxuICAgICAgICBwYXlsb2FkLmpzb25ycGMgPT09IFwiMi4wXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY1JlcXVlc3QocGF5bG9hZCkge1xuICAgIHJldHVybiBpc0pzb25ScGNQYXlsb2FkKHBheWxvYWQpICYmIFwibWV0aG9kXCIgaW4gcGF5bG9hZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25ScGNSZXNwb25zZShwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGlzSnNvblJwY1BheWxvYWQocGF5bG9hZCkgJiYgKGlzSnNvblJwY1Jlc3VsdChwYXlsb2FkKSB8fCBpc0pzb25ScGNFcnJvcihwYXlsb2FkKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjUmVzdWx0KHBheWxvYWQpIHtcbiAgICByZXR1cm4gXCJyZXN1bHRcIiBpbiBwYXlsb2FkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY0Vycm9yKHBheWxvYWQpIHtcbiAgICByZXR1cm4gXCJlcnJvclwiIGluIHBheWxvYWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjVmFsaWRhdGlvbkludmFsaWQodmFsaWRhdGlvbikge1xuICAgIHJldHVybiBcImVycm9yXCIgaW4gdmFsaWRhdGlvbiAmJiB2YWxpZGF0aW9uLnZhbGlkID09PSBmYWxzZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRvcnMuanMubWFwIl0sIm5hbWVzIjpbImlzSnNvblJwY1BheWxvYWQiLCJwYXlsb2FkIiwianNvbnJwYyIsImlzSnNvblJwY1JlcXVlc3QiLCJpc0pzb25ScGNSZXNwb25zZSIsImlzSnNvblJwY1Jlc3VsdCIsImlzSnNvblJwY0Vycm9yIiwiaXNKc29uUnBjVmFsaWRhdGlvbkludmFsaWQiLCJ2YWxpZGF0aW9uIiwidmFsaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WsConnection: () => (/* binding */ f),\n/* harmony export */   \"default\": () => (/* binding */ f)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\nconst w = ()=>typeof WebSocket < \"u\" ? WebSocket : typeof global < \"u\" && typeof global.WebSocket < \"u\" ? global.WebSocket :  false ? 0 : typeof self < \"u\" && typeof self.WebSocket < \"u\" ? self.WebSocket : __webpack_require__(/*! ws */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/index.js\"), b = ()=>typeof WebSocket < \"u\" || typeof global < \"u\" && typeof global.WebSocket < \"u\" ||  false && 0 || typeof self < \"u\" && typeof self.WebSocket < \"u\", a = (c)=>c.split(\"?\")[0], h = 10, S = w();\nclass f {\n    constructor(e){\n        if (this.url = e, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.registering = !1, !(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isWsUrl)(e)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);\n        this.url = e;\n    }\n    get connected() {\n        return typeof this.socket < \"u\";\n    }\n    get connecting() {\n        return this.registering;\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async open(e = this.url) {\n        await this.register(e);\n    }\n    async close() {\n        return new Promise((e, t)=>{\n            if (typeof this.socket > \"u\") {\n                t(new Error(\"Connection already closed\"));\n                return;\n            }\n            this.socket.onclose = (n)=>{\n                this.onClose(n), e();\n            }, this.socket.close();\n        });\n    }\n    async send(e) {\n        typeof this.socket > \"u\" && (this.socket = await this.register());\n        try {\n            this.socket.send((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)(e));\n        } catch (t) {\n            this.onError(e.id, t);\n        }\n    }\n    register(e = this.url) {\n        if (!(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isWsUrl)(e)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);\n        if (this.registering) {\n            const t = this.events.getMaxListeners();\n            return (this.events.listenerCount(\"register_error\") >= t || this.events.listenerCount(\"open\") >= t) && this.events.setMaxListeners(t + 1), new Promise((n, o)=>{\n                this.events.once(\"register_error\", (s)=>{\n                    this.resetMaxListeners(), o(s);\n                }), this.events.once(\"open\", ()=>{\n                    if (this.resetMaxListeners(), typeof this.socket > \"u\") return o(new Error(\"WebSocket connection is missing or invalid\"));\n                    n(this.socket);\n                });\n            });\n        }\n        return this.url = e, this.registering = !0, new Promise((t, n)=>{\n            const o = new URLSearchParams(e).get(\"origin\"), s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isReactNative)() ? {\n                headers: {\n                    origin: o\n                }\n            } : {\n                rejectUnauthorized: !(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isLocalhostUrl)(e)\n            }, i = new S(e, [], s);\n            b() ? i.onerror = (r)=>{\n                const l = r;\n                n(this.emitError(l.error));\n            } : i.on(\"error\", (r)=>{\n                n(this.emitError(r));\n            }), i.onopen = ()=>{\n                this.onOpen(i), t(i);\n            };\n        });\n    }\n    onOpen(e) {\n        e.onmessage = (t)=>this.onPayload(t), e.onclose = (t)=>this.onClose(t), this.socket = e, this.registering = !1, this.events.emit(\"open\");\n    }\n    onClose(e) {\n        this.socket = void 0, this.registering = !1, this.events.emit(\"close\", e);\n    }\n    onPayload(e) {\n        if (typeof e.data > \"u\") return;\n        const t = typeof e.data == \"string\" ? (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonParse)(e.data) : e.data;\n        this.events.emit(\"payload\", t);\n    }\n    onError(e, t) {\n        const n = this.parseError(t), o = n.message || n.toString(), s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.formatJsonRpcError)(e, o);\n        this.events.emit(\"payload\", s);\n    }\n    parseError(e, t = this.url) {\n        return (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.parseConnectionError)(e, a(t), \"WS\");\n    }\n    resetMaxListeners() {\n        this.events.getMaxListeners() > h && this.events.setMaxListeners(h);\n    }\n    emitError(e) {\n        const t = this.parseError(new Error(e?.message || `WebSocket connection failed for host: ${a(this.url)}`));\n        return this.events.emit(\"register_error\", t), t;\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/index.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst WebSocket = __webpack_require__(/*! ./lib/websocket */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket.js\");\nWebSocket.createWebSocketStream = __webpack_require__(/*! ./lib/stream */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/stream.js\");\nWebSocket.Server = __webpack_require__(/*! ./lib/websocket-server */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket-server.js\");\nWebSocket.Receiver = __webpack_require__(/*! ./lib/receiver */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/receiver.js\");\nWebSocket.Sender = __webpack_require__(/*! ./lib/sender */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/sender.js\");\nmodule.exports = WebSocket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFlBQVlDLG1CQUFPQSxDQUFDO0FBRTFCRCxVQUFVRSxxQkFBcUIsR0FBR0QsbUJBQU9BLENBQUM7QUFDMUNELFVBQVVHLE1BQU0sR0FBR0YsbUJBQU9BLENBQUM7QUFDM0JELFVBQVVJLFFBQVEsR0FBR0gsbUJBQU9BLENBQUM7QUFDN0JELFVBQVVLLE1BQU0sR0FBR0osbUJBQU9BLENBQUM7QUFFM0JLLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9pbmRleC5qcz9lNGJhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgV2ViU29ja2V0ID0gcmVxdWlyZSgnLi9saWIvd2Vic29ja2V0Jyk7XG5cbldlYlNvY2tldC5jcmVhdGVXZWJTb2NrZXRTdHJlYW0gPSByZXF1aXJlKCcuL2xpYi9zdHJlYW0nKTtcbldlYlNvY2tldC5TZXJ2ZXIgPSByZXF1aXJlKCcuL2xpYi93ZWJzb2NrZXQtc2VydmVyJyk7XG5XZWJTb2NrZXQuUmVjZWl2ZXIgPSByZXF1aXJlKCcuL2xpYi9yZWNlaXZlcicpO1xuV2ViU29ja2V0LlNlbmRlciA9IHJlcXVpcmUoJy4vbGliL3NlbmRlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYlNvY2tldDtcbiJdLCJuYW1lcyI6WyJXZWJTb2NrZXQiLCJyZXF1aXJlIiwiY3JlYXRlV2ViU29ja2V0U3RyZWFtIiwiU2VydmVyIiwiUmVjZWl2ZXIiLCJTZW5kZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */ function concat(list, totalLength) {\n    if (list.length === 0) return EMPTY_BUFFER;\n    if (list.length === 1) return list[0];\n    const target = Buffer.allocUnsafe(totalLength);\n    let offset = 0;\n    for(let i = 0; i < list.length; i++){\n        const buf = list[i];\n        target.set(buf, offset);\n        offset += buf.length;\n    }\n    if (offset < totalLength) return target.slice(0, offset);\n    return target;\n}\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */ function _mask(source, mask, output, offset, length) {\n    for(let i = 0; i < length; i++){\n        output[offset + i] = source[i] ^ mask[i & 3];\n    }\n}\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */ function _unmask(buffer, mask) {\n    // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n    const length = buffer.length;\n    for(let i = 0; i < length; i++){\n        buffer[i] ^= mask[i & 3];\n    }\n}\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */ function toArrayBuffer(buf) {\n    if (buf.byteLength === buf.buffer.byteLength) {\n        return buf.buffer;\n    }\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */ function toBuffer(data) {\n    toBuffer.readOnly = true;\n    if (Buffer.isBuffer(data)) return data;\n    let buf;\n    if (data instanceof ArrayBuffer) {\n        buf = Buffer.from(data);\n    } else if (ArrayBuffer.isView(data)) {\n        buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n    } else {\n        buf = Buffer.from(data);\n        toBuffer.readOnly = false;\n    }\n    return buf;\n}\ntry {\n    const bufferUtil = __webpack_require__(/*! bufferutil */ \"(ssr)/./node_modules/bufferutil/index.js\");\n    const bu = bufferUtil.BufferUtil || bufferUtil;\n    module.exports = {\n        concat,\n        mask (source, mask, output, offset, length) {\n            if (length < 48) _mask(source, mask, output, offset, length);\n            else bu.mask(source, mask, output, offset, length);\n        },\n        toArrayBuffer,\n        toBuffer,\n        unmask (buffer, mask) {\n            if (buffer.length < 32) _unmask(buffer, mask);\n            else bu.unmask(buffer, mask);\n        }\n    };\n} catch (e) /* istanbul ignore next */ {\n    module.exports = {\n        concat,\n        mask: _mask,\n        toArrayBuffer,\n        toBuffer,\n        unmask: _unmask\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvYnVmZmVyLXV0aWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLFlBQVksRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUVqQzs7Ozs7OztDQU9DLEdBQ0QsU0FBU0MsT0FBT0MsSUFBSSxFQUFFQyxXQUFXO0lBQy9CLElBQUlELEtBQUtFLE1BQU0sS0FBSyxHQUFHLE9BQU9MO0lBQzlCLElBQUlHLEtBQUtFLE1BQU0sS0FBSyxHQUFHLE9BQU9GLElBQUksQ0FBQyxFQUFFO0lBRXJDLE1BQU1HLFNBQVNDLE9BQU9DLFdBQVcsQ0FBQ0o7SUFDbEMsSUFBSUssU0FBUztJQUViLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJUCxLQUFLRSxNQUFNLEVBQUVLLElBQUs7UUFDcEMsTUFBTUMsTUFBTVIsSUFBSSxDQUFDTyxFQUFFO1FBQ25CSixPQUFPTSxHQUFHLENBQUNELEtBQUtGO1FBQ2hCQSxVQUFVRSxJQUFJTixNQUFNO0lBQ3RCO0lBRUEsSUFBSUksU0FBU0wsYUFBYSxPQUFPRSxPQUFPTyxLQUFLLENBQUMsR0FBR0o7SUFFakQsT0FBT0g7QUFDVDtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNRLE1BQU1DLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVSLE1BQU0sRUFBRUosTUFBTTtJQUNqRCxJQUFLLElBQUlLLElBQUksR0FBR0EsSUFBSUwsUUFBUUssSUFBSztRQUMvQk8sTUFBTSxDQUFDUixTQUFTQyxFQUFFLEdBQUdLLE1BQU0sQ0FBQ0wsRUFBRSxHQUFHTSxJQUFJLENBQUNOLElBQUksRUFBRTtJQUM5QztBQUNGO0FBRUE7Ozs7OztDQU1DLEdBQ0QsU0FBU1EsUUFBUUMsTUFBTSxFQUFFSCxJQUFJO0lBQzNCLHlFQUF5RTtJQUN6RSxNQUFNWCxTQUFTYyxPQUFPZCxNQUFNO0lBQzVCLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJTCxRQUFRSyxJQUFLO1FBQy9CUyxNQUFNLENBQUNULEVBQUUsSUFBSU0sSUFBSSxDQUFDTixJQUFJLEVBQUU7SUFDMUI7QUFDRjtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNVLGNBQWNULEdBQUc7SUFDeEIsSUFBSUEsSUFBSVUsVUFBVSxLQUFLVixJQUFJUSxNQUFNLENBQUNFLFVBQVUsRUFBRTtRQUM1QyxPQUFPVixJQUFJUSxNQUFNO0lBQ25CO0lBRUEsT0FBT1IsSUFBSVEsTUFBTSxDQUFDTixLQUFLLENBQUNGLElBQUlXLFVBQVUsRUFBRVgsSUFBSVcsVUFBVSxHQUFHWCxJQUFJVSxVQUFVO0FBQ3pFO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNFLFNBQVNDLElBQUk7SUFDcEJELFNBQVNFLFFBQVEsR0FBRztJQUVwQixJQUFJbEIsT0FBT21CLFFBQVEsQ0FBQ0YsT0FBTyxPQUFPQTtJQUVsQyxJQUFJYjtJQUVKLElBQUlhLGdCQUFnQkcsYUFBYTtRQUMvQmhCLE1BQU1KLE9BQU9xQixJQUFJLENBQUNKO0lBQ3BCLE9BQU8sSUFBSUcsWUFBWUUsTUFBTSxDQUFDTCxPQUFPO1FBQ25DYixNQUFNSixPQUFPcUIsSUFBSSxDQUFDSixLQUFLTCxNQUFNLEVBQUVLLEtBQUtGLFVBQVUsRUFBRUUsS0FBS0gsVUFBVTtJQUNqRSxPQUFPO1FBQ0xWLE1BQU1KLE9BQU9xQixJQUFJLENBQUNKO1FBQ2xCRCxTQUFTRSxRQUFRLEdBQUc7SUFDdEI7SUFFQSxPQUFPZDtBQUNUO0FBRUEsSUFBSTtJQUNGLE1BQU1tQixhQUFhN0IsbUJBQU9BLENBQUM7SUFDM0IsTUFBTThCLEtBQUtELFdBQVdFLFVBQVUsSUFBSUY7SUFFcENHLE9BQU9DLE9BQU8sR0FBRztRQUNmaEM7UUFDQWMsTUFBS0QsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRVIsTUFBTSxFQUFFSixNQUFNO1lBQ3ZDLElBQUlBLFNBQVMsSUFBSVMsTUFBTUMsUUFBUUMsTUFBTUMsUUFBUVIsUUFBUUo7aUJBQ2hEMEIsR0FBR2YsSUFBSSxDQUFDRCxRQUFRQyxNQUFNQyxRQUFRUixRQUFRSjtRQUM3QztRQUNBZTtRQUNBRztRQUNBWSxRQUFPaEIsTUFBTSxFQUFFSCxJQUFJO1lBQ2pCLElBQUlHLE9BQU9kLE1BQU0sR0FBRyxJQUFJYSxRQUFRQyxRQUFRSDtpQkFDbkNlLEdBQUdJLE1BQU0sQ0FBQ2hCLFFBQVFIO1FBQ3pCO0lBQ0Y7QUFDRixFQUFFLE9BQU9vQixHQUFHLHdCQUF3QixHQUFHO0lBQ3JDSCxPQUFPQyxPQUFPLEdBQUc7UUFDZmhDO1FBQ0FjLE1BQU1GO1FBQ05NO1FBQ0FHO1FBQ0FZLFFBQVFqQjtJQUNWO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvYnVmZmVyLXV0aWwuanM/NTg4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgRU1QVFlfQlVGRkVSIH0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG4vKipcbiAqIE1lcmdlcyBhbiBhcnJheSBvZiBidWZmZXJzIGludG8gYSBuZXcgYnVmZmVyLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyW119IGxpc3QgVGhlIGFycmF5IG9mIGJ1ZmZlcnMgdG8gY29uY2F0XG4gKiBAcGFyYW0ge051bWJlcn0gdG90YWxMZW5ndGggVGhlIHRvdGFsIGxlbmd0aCBvZiBidWZmZXJzIGluIHRoZSBsaXN0XG4gKiBAcmV0dXJuIHtCdWZmZXJ9IFRoZSByZXN1bHRpbmcgYnVmZmVyXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGNvbmNhdChsaXN0LCB0b3RhbExlbmd0aCkge1xuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHJldHVybiBFTVBUWV9CVUZGRVI7XG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkgcmV0dXJuIGxpc3RbMF07XG5cbiAgY29uc3QgdGFyZ2V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKHRvdGFsTGVuZ3RoKTtcbiAgbGV0IG9mZnNldCA9IDA7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYnVmID0gbGlzdFtpXTtcbiAgICB0YXJnZXQuc2V0KGJ1Ziwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gYnVmLmxlbmd0aDtcbiAgfVxuXG4gIGlmIChvZmZzZXQgPCB0b3RhbExlbmd0aCkgcmV0dXJuIHRhcmdldC5zbGljZSgwLCBvZmZzZXQpO1xuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogTWFza3MgYSBidWZmZXIgdXNpbmcgdGhlIGdpdmVuIG1hc2suXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IHNvdXJjZSBUaGUgYnVmZmVyIHRvIG1hc2tcbiAqIEBwYXJhbSB7QnVmZmVyfSBtYXNrIFRoZSBtYXNrIHRvIHVzZVxuICogQHBhcmFtIHtCdWZmZXJ9IG91dHB1dCBUaGUgYnVmZmVyIHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCBhdCB3aGljaCB0byBzdGFydCB3cml0aW5nXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIFRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gbWFzay5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gX21hc2soc291cmNlLCBtYXNrLCBvdXRwdXQsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRbb2Zmc2V0ICsgaV0gPSBzb3VyY2VbaV0gXiBtYXNrW2kgJiAzXTtcbiAgfVxufVxuXG4vKipcbiAqIFVubWFza3MgYSBidWZmZXIgdXNpbmcgdGhlIGdpdmVuIG1hc2suXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIHVubWFza1xuICogQHBhcmFtIHtCdWZmZXJ9IG1hc2sgVGhlIG1hc2sgdG8gdXNlXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIF91bm1hc2soYnVmZmVyLCBtYXNrKSB7XG4gIC8vIFJlcXVpcmVkIHVudGlsIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvOTAwNiBpcyByZXNvbHZlZC5cbiAgY29uc3QgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGJ1ZmZlcltpXSBePSBtYXNrW2kgJiAzXTtcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgYnVmZmVyIHRvIGFuIGBBcnJheUJ1ZmZlcmAuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZiBUaGUgYnVmZmVyIHRvIGNvbnZlcnRcbiAqIEByZXR1cm4ge0FycmF5QnVmZmVyfSBDb252ZXJ0ZWQgYnVmZmVyXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXlCdWZmZXIoYnVmKSB7XG4gIGlmIChidWYuYnl0ZUxlbmd0aCA9PT0gYnVmLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJ1Zi5idWZmZXI7XG4gIH1cblxuICByZXR1cm4gYnVmLmJ1ZmZlci5zbGljZShidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVPZmZzZXQgKyBidWYuYnl0ZUxlbmd0aCk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYGRhdGFgIHRvIGEgYEJ1ZmZlcmAuXG4gKlxuICogQHBhcmFtIHsqfSBkYXRhIFRoZSBkYXRhIHRvIGNvbnZlcnRcbiAqIEByZXR1cm4ge0J1ZmZlcn0gVGhlIGJ1ZmZlclxuICogQHRocm93cyB7VHlwZUVycm9yfVxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB0b0J1ZmZlcihkYXRhKSB7XG4gIHRvQnVmZmVyLnJlYWRPbmx5ID0gdHJ1ZTtcblxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSByZXR1cm4gZGF0YTtcblxuICBsZXQgYnVmO1xuXG4gIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICBidWYgPSBCdWZmZXIuZnJvbShkYXRhKTtcbiAgfSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkpIHtcbiAgICBidWYgPSBCdWZmZXIuZnJvbShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpO1xuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKGRhdGEpO1xuICAgIHRvQnVmZmVyLnJlYWRPbmx5ID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gYnVmO1xufVxuXG50cnkge1xuICBjb25zdCBidWZmZXJVdGlsID0gcmVxdWlyZSgnYnVmZmVydXRpbCcpO1xuICBjb25zdCBidSA9IGJ1ZmZlclV0aWwuQnVmZmVyVXRpbCB8fCBidWZmZXJVdGlsO1xuXG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNvbmNhdCxcbiAgICBtYXNrKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgaWYgKGxlbmd0aCA8IDQ4KSBfbWFzayhzb3VyY2UsIG1hc2ssIG91dHB1dCwgb2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgZWxzZSBidS5tYXNrKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgfSxcbiAgICB0b0FycmF5QnVmZmVyLFxuICAgIHRvQnVmZmVyLFxuICAgIHVubWFzayhidWZmZXIsIG1hc2spIHtcbiAgICAgIGlmIChidWZmZXIubGVuZ3RoIDwgMzIpIF91bm1hc2soYnVmZmVyLCBtYXNrKTtcbiAgICAgIGVsc2UgYnUudW5tYXNrKGJ1ZmZlciwgbWFzayk7XG4gICAgfVxuICB9O1xufSBjYXRjaCAoZSkgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8ge1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBjb25jYXQsXG4gICAgbWFzazogX21hc2ssXG4gICAgdG9BcnJheUJ1ZmZlcixcbiAgICB0b0J1ZmZlcixcbiAgICB1bm1hc2s6IF91bm1hc2tcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJFTVBUWV9CVUZGRVIiLCJyZXF1aXJlIiwiY29uY2F0IiwibGlzdCIsInRvdGFsTGVuZ3RoIiwibGVuZ3RoIiwidGFyZ2V0IiwiQnVmZmVyIiwiYWxsb2NVbnNhZmUiLCJvZmZzZXQiLCJpIiwiYnVmIiwic2V0Iiwic2xpY2UiLCJfbWFzayIsInNvdXJjZSIsIm1hc2siLCJvdXRwdXQiLCJfdW5tYXNrIiwiYnVmZmVyIiwidG9BcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJieXRlT2Zmc2V0IiwidG9CdWZmZXIiLCJkYXRhIiwicmVhZE9ubHkiLCJpc0J1ZmZlciIsIkFycmF5QnVmZmVyIiwiZnJvbSIsImlzVmlldyIsImJ1ZmZlclV0aWwiLCJidSIsIkJ1ZmZlclV0aWwiLCJtb2R1bGUiLCJleHBvcnRzIiwidW5tYXNrIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js ***!
  \********************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    BINARY_TYPES: [\n        \"nodebuffer\",\n        \"arraybuffer\",\n        \"fragments\"\n    ],\n    GUID: \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\",\n    kStatusCode: Symbol(\"status-code\"),\n    kWebSocket: Symbol(\"websocket\"),\n    EMPTY_BUFFER: Buffer.alloc(0),\n    NOOP: ()=>{}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxjQUFjO1FBQUM7UUFBYztRQUFlO0tBQVk7SUFDeERDLE1BQU07SUFDTkMsYUFBYUMsT0FBTztJQUNwQkMsWUFBWUQsT0FBTztJQUNuQkUsY0FBY0MsT0FBT0MsS0FBSyxDQUFDO0lBQzNCQyxNQUFNLEtBQU87QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL0BzZS0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXdzLWNvbm5lY3Rpb24vbm9kZV9tb2R1bGVzL3dzL2xpYi9jb25zdGFudHMuanM/YWFkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBCSU5BUllfVFlQRVM6IFsnbm9kZWJ1ZmZlcicsICdhcnJheWJ1ZmZlcicsICdmcmFnbWVudHMnXSxcbiAgR1VJRDogJzI1OEVBRkE1LUU5MTQtNDdEQS05NUNBLUM1QUIwREM4NUIxMScsXG4gIGtTdGF0dXNDb2RlOiBTeW1ib2woJ3N0YXR1cy1jb2RlJyksXG4gIGtXZWJTb2NrZXQ6IFN5bWJvbCgnd2Vic29ja2V0JyksXG4gIEVNUFRZX0JVRkZFUjogQnVmZmVyLmFsbG9jKDApLFxuICBOT09QOiAoKSA9PiB7fVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQklOQVJZX1RZUEVTIiwiR1VJRCIsImtTdGF0dXNDb2RlIiwiU3ltYm9sIiwia1dlYlNvY2tldCIsIkVNUFRZX0JVRkZFUiIsIkJ1ZmZlciIsImFsbG9jIiwiTk9PUCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/event-target.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/event-target.js ***!
  \***********************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Class representing an event.\n *\n * @private\n */ class Event {\n    /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was\n   *     dispatched\n   */ constructor(type, target){\n        this.target = target;\n        this.type = type;\n    }\n}\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */ class MessageEvent extends Event {\n    /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */ constructor(data, target){\n        super(\"message\", target);\n        this.data = data;\n    }\n}\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */ class CloseEvent extends Event {\n    /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being\n   *     closed\n   * @param {String} reason A human-readable string explaining why the\n   *     connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */ constructor(code, reason, target){\n        super(\"close\", target);\n        this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n        this.reason = reason;\n        this.code = code;\n    }\n}\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */ class OpenEvent extends Event {\n    /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */ constructor(target){\n        super(\"open\", target);\n    }\n}\n/**\n * Class representing an error event.\n *\n * @extends Event\n * @private\n */ class ErrorEvent extends Event {\n    /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {Object} error The error that generated this event\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */ constructor(error, target){\n        super(\"error\", target);\n        this.message = error.message;\n        this.error = error;\n    }\n}\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */ const EventTarget = {\n    /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean`` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */ addEventListener (type, listener, options) {\n        if (typeof listener !== \"function\") return;\n        function onMessage(data) {\n            listener.call(this, new MessageEvent(data, this));\n        }\n        function onClose(code, message) {\n            listener.call(this, new CloseEvent(code, message, this));\n        }\n        function onError(error) {\n            listener.call(this, new ErrorEvent(error, this));\n        }\n        function onOpen() {\n            listener.call(this, new OpenEvent(this));\n        }\n        const method = options && options.once ? \"once\" : \"on\";\n        if (type === \"message\") {\n            onMessage._listener = listener;\n            this[method](type, onMessage);\n        } else if (type === \"close\") {\n            onClose._listener = listener;\n            this[method](type, onClose);\n        } else if (type === \"error\") {\n            onError._listener = listener;\n            this[method](type, onError);\n        } else if (type === \"open\") {\n            onOpen._listener = listener;\n            this[method](type, onOpen);\n        } else {\n            this[method](type, listener);\n        }\n    },\n    /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */ removeEventListener (type, listener) {\n        const listeners = this.listeners(type);\n        for(let i = 0; i < listeners.length; i++){\n            if (listeners[i] === listener || listeners[i]._listener === listener) {\n                this.removeListener(type, listeners[i]);\n            }\n        }\n    }\n};\nmodule.exports = EventTarget;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/event-target.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/extension.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/extension.js ***!
  \********************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    1,\n    1,\n    0,\n    1,\n    1,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    1,\n    0,\n    1,\n    0 // 112 - 127\n];\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */ function push(dest, name, elem) {\n    if (dest[name] === undefined) dest[name] = [\n        elem\n    ];\n    else dest[name].push(elem);\n}\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */ function parse(header) {\n    const offers = Object.create(null);\n    if (header === undefined || header === \"\") return offers;\n    let params = Object.create(null);\n    let mustUnescape = false;\n    let isEscaping = false;\n    let inQuotes = false;\n    let extensionName;\n    let paramName;\n    let start = -1;\n    let end = -1;\n    let i = 0;\n    for(; i < header.length; i++){\n        const code = header.charCodeAt(i);\n        if (extensionName === undefined) {\n            if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (code === 0x20 /* ' ' */  || code === 0x09 /* '\\t' */ ) {\n                if (end === -1 && start !== -1) end = i;\n            } else if (code === 0x3b /* ';' */  || code === 0x2c /* ',' */ ) {\n                if (start === -1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (end === -1) end = i;\n                const name = header.slice(start, end);\n                if (code === 0x2c) {\n                    push(offers, name, params);\n                    params = Object.create(null);\n                } else {\n                    extensionName = name;\n                }\n                start = end = -1;\n            } else {\n                throw new SyntaxError(`Unexpected character at index ${i}`);\n            }\n        } else if (paramName === undefined) {\n            if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (code === 0x20 || code === 0x09) {\n                if (end === -1 && start !== -1) end = i;\n            } else if (code === 0x3b || code === 0x2c) {\n                if (start === -1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (end === -1) end = i;\n                push(params, header.slice(start, end), true);\n                if (code === 0x2c) {\n                    push(offers, extensionName, params);\n                    params = Object.create(null);\n                    extensionName = undefined;\n                }\n                start = end = -1;\n            } else if (code === 0x3d /* '=' */  && start !== -1 && end === -1) {\n                paramName = header.slice(start, i);\n                start = end = -1;\n            } else {\n                throw new SyntaxError(`Unexpected character at index ${i}`);\n            }\n        } else {\n            //\n            // The value of a quoted-string after unescaping must conform to the\n            // token ABNF, so only token characters are valid.\n            // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n            //\n            if (isEscaping) {\n                if (tokenChars[code] !== 1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (start === -1) start = i;\n                else if (!mustUnescape) mustUnescape = true;\n                isEscaping = false;\n            } else if (inQuotes) {\n                if (tokenChars[code] === 1) {\n                    if (start === -1) start = i;\n                } else if (code === 0x22 /* '\"' */  && start !== -1) {\n                    inQuotes = false;\n                    end = i;\n                } else if (code === 0x5c /* '\\' */ ) {\n                    isEscaping = true;\n                } else {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n            } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n                inQuotes = true;\n            } else if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n                if (end === -1) end = i;\n            } else if (code === 0x3b || code === 0x2c) {\n                if (start === -1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (end === -1) end = i;\n                let value = header.slice(start, end);\n                if (mustUnescape) {\n                    value = value.replace(/\\\\/g, \"\");\n                    mustUnescape = false;\n                }\n                push(params, paramName, value);\n                if (code === 0x2c) {\n                    push(offers, extensionName, params);\n                    params = Object.create(null);\n                    extensionName = undefined;\n                }\n                paramName = undefined;\n                start = end = -1;\n            } else {\n                throw new SyntaxError(`Unexpected character at index ${i}`);\n            }\n        }\n    }\n    if (start === -1 || inQuotes) {\n        throw new SyntaxError(\"Unexpected end of input\");\n    }\n    if (end === -1) end = i;\n    const token = header.slice(start, end);\n    if (extensionName === undefined) {\n        push(offers, token, params);\n    } else {\n        if (paramName === undefined) {\n            push(params, token, true);\n        } else if (mustUnescape) {\n            push(params, paramName, token.replace(/\\\\/g, \"\"));\n        } else {\n            push(params, paramName, token);\n        }\n        push(offers, extensionName, params);\n    }\n    return offers;\n}\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */ function format(extensions) {\n    return Object.keys(extensions).map((extension)=>{\n        let configurations = extensions[extension];\n        if (!Array.isArray(configurations)) configurations = [\n            configurations\n        ];\n        return configurations.map((params)=>{\n            return [\n                extension\n            ].concat(Object.keys(params).map((k)=>{\n                let values = params[k];\n                if (!Array.isArray(values)) values = [\n                    values\n                ];\n                return values.map((v)=>v === true ? k : `${k}=${v}`).join(\"; \");\n            })).join(\"; \");\n        }).join(\", \");\n    }).join(\", \");\n}\nmodule.exports = {\n    format,\n    parse\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvZXh0ZW5zaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsRUFBRTtBQUNGLDRCQUE0QjtBQUM1QixFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLDhDQUE4QztBQUM5QyxFQUFFO0FBQ0YsOEJBQThCO0FBQzlCLDhCQUE4QjtBQUM5Qiw4QkFBOEI7QUFDOUIsTUFBTTtBQUNOLEVBQUU7QUFDRixrQkFBa0I7QUFDbEIsTUFBTUEsYUFBYTtJQUNqQjtJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUM3QztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUM3QztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUM3QztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUM3QztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUM3QztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUM3QztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUM3QztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRyxFQUFFLFlBQVk7Q0FDNUQ7QUFFRDs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTQyxLQUFLQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSTtJQUM1QixJQUFJRixJQUFJLENBQUNDLEtBQUssS0FBS0UsV0FBV0gsSUFBSSxDQUFDQyxLQUFLLEdBQUc7UUFBQ0M7S0FBSztTQUM1Q0YsSUFBSSxDQUFDQyxLQUFLLENBQUNGLElBQUksQ0FBQ0c7QUFDdkI7QUFFQTs7Ozs7O0NBTUMsR0FDRCxTQUFTRSxNQUFNQyxNQUFNO0lBQ25CLE1BQU1DLFNBQVNDLE9BQU9DLE1BQU0sQ0FBQztJQUU3QixJQUFJSCxXQUFXRixhQUFhRSxXQUFXLElBQUksT0FBT0M7SUFFbEQsSUFBSUcsU0FBU0YsT0FBT0MsTUFBTSxDQUFDO0lBQzNCLElBQUlFLGVBQWU7SUFDbkIsSUFBSUMsYUFBYTtJQUNqQixJQUFJQyxXQUFXO0lBQ2YsSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDLFFBQVEsQ0FBQztJQUNiLElBQUlDLE1BQU0sQ0FBQztJQUNYLElBQUlDLElBQUk7SUFFUixNQUFPQSxJQUFJWixPQUFPYSxNQUFNLEVBQUVELElBQUs7UUFDN0IsTUFBTUUsT0FBT2QsT0FBT2UsVUFBVSxDQUFDSDtRQUUvQixJQUFJSixrQkFBa0JWLFdBQVc7WUFDL0IsSUFBSWEsUUFBUSxDQUFDLEtBQUtsQixVQUFVLENBQUNxQixLQUFLLEtBQUssR0FBRztnQkFDeEMsSUFBSUosVUFBVSxDQUFDLEdBQUdBLFFBQVFFO1lBQzVCLE9BQU8sSUFBSUUsU0FBUyxLQUFLLE9BQU8sT0FBTUEsU0FBUyxLQUFLLFFBQVEsS0FBSTtnQkFDOUQsSUFBSUgsUUFBUSxDQUFDLEtBQUtELFVBQVUsQ0FBQyxHQUFHQyxNQUFNQztZQUN4QyxPQUFPLElBQUlFLFNBQVMsS0FBSyxPQUFPLE9BQU1BLFNBQVMsS0FBSyxPQUFPLEtBQUk7Z0JBQzdELElBQUlKLFVBQVUsQ0FBQyxHQUFHO29CQUNoQixNQUFNLElBQUlNLFlBQVksQ0FBQyw4QkFBOEIsRUFBRUosRUFBRSxDQUFDO2dCQUM1RDtnQkFFQSxJQUFJRCxRQUFRLENBQUMsR0FBR0EsTUFBTUM7Z0JBQ3RCLE1BQU1oQixPQUFPSSxPQUFPaUIsS0FBSyxDQUFDUCxPQUFPQztnQkFDakMsSUFBSUcsU0FBUyxNQUFNO29CQUNqQnBCLEtBQUtPLFFBQVFMLE1BQU1RO29CQUNuQkEsU0FBU0YsT0FBT0MsTUFBTSxDQUFDO2dCQUN6QixPQUFPO29CQUNMSyxnQkFBZ0JaO2dCQUNsQjtnQkFFQWMsUUFBUUMsTUFBTSxDQUFDO1lBQ2pCLE9BQU87Z0JBQ0wsTUFBTSxJQUFJSyxZQUFZLENBQUMsOEJBQThCLEVBQUVKLEVBQUUsQ0FBQztZQUM1RDtRQUNGLE9BQU8sSUFBSUgsY0FBY1gsV0FBVztZQUNsQyxJQUFJYSxRQUFRLENBQUMsS0FBS2xCLFVBQVUsQ0FBQ3FCLEtBQUssS0FBSyxHQUFHO2dCQUN4QyxJQUFJSixVQUFVLENBQUMsR0FBR0EsUUFBUUU7WUFDNUIsT0FBTyxJQUFJRSxTQUFTLFFBQVFBLFNBQVMsTUFBTTtnQkFDekMsSUFBSUgsUUFBUSxDQUFDLEtBQUtELFVBQVUsQ0FBQyxHQUFHQyxNQUFNQztZQUN4QyxPQUFPLElBQUlFLFNBQVMsUUFBUUEsU0FBUyxNQUFNO2dCQUN6QyxJQUFJSixVQUFVLENBQUMsR0FBRztvQkFDaEIsTUFBTSxJQUFJTSxZQUFZLENBQUMsOEJBQThCLEVBQUVKLEVBQUUsQ0FBQztnQkFDNUQ7Z0JBRUEsSUFBSUQsUUFBUSxDQUFDLEdBQUdBLE1BQU1DO2dCQUN0QmxCLEtBQUtVLFFBQVFKLE9BQU9pQixLQUFLLENBQUNQLE9BQU9DLE1BQU07Z0JBQ3ZDLElBQUlHLFNBQVMsTUFBTTtvQkFDakJwQixLQUFLTyxRQUFRTyxlQUFlSjtvQkFDNUJBLFNBQVNGLE9BQU9DLE1BQU0sQ0FBQztvQkFDdkJLLGdCQUFnQlY7Z0JBQ2xCO2dCQUVBWSxRQUFRQyxNQUFNLENBQUM7WUFDakIsT0FBTyxJQUFJRyxTQUFTLEtBQUssT0FBTyxPQUFNSixVQUFVLENBQUMsS0FBS0MsUUFBUSxDQUFDLEdBQUc7Z0JBQ2hFRixZQUFZVCxPQUFPaUIsS0FBSyxDQUFDUCxPQUFPRTtnQkFDaENGLFFBQVFDLE1BQU0sQ0FBQztZQUNqQixPQUFPO2dCQUNMLE1BQU0sSUFBSUssWUFBWSxDQUFDLDhCQUE4QixFQUFFSixFQUFFLENBQUM7WUFDNUQ7UUFDRixPQUFPO1lBQ0wsRUFBRTtZQUNGLG9FQUFvRTtZQUNwRSxrREFBa0Q7WUFDbEQsdURBQXVEO1lBQ3ZELEVBQUU7WUFDRixJQUFJTixZQUFZO2dCQUNkLElBQUliLFVBQVUsQ0FBQ3FCLEtBQUssS0FBSyxHQUFHO29CQUMxQixNQUFNLElBQUlFLFlBQVksQ0FBQyw4QkFBOEIsRUFBRUosRUFBRSxDQUFDO2dCQUM1RDtnQkFDQSxJQUFJRixVQUFVLENBQUMsR0FBR0EsUUFBUUU7cUJBQ3JCLElBQUksQ0FBQ1AsY0FBY0EsZUFBZTtnQkFDdkNDLGFBQWE7WUFDZixPQUFPLElBQUlDLFVBQVU7Z0JBQ25CLElBQUlkLFVBQVUsQ0FBQ3FCLEtBQUssS0FBSyxHQUFHO29CQUMxQixJQUFJSixVQUFVLENBQUMsR0FBR0EsUUFBUUU7Z0JBQzVCLE9BQU8sSUFBSUUsU0FBUyxLQUFLLE9BQU8sT0FBTUosVUFBVSxDQUFDLEdBQUc7b0JBQ2xESCxXQUFXO29CQUNYSSxNQUFNQztnQkFDUixPQUFPLElBQUlFLFNBQVMsS0FBSyxPQUFPLEtBQUk7b0JBQ2xDUixhQUFhO2dCQUNmLE9BQU87b0JBQ0wsTUFBTSxJQUFJVSxZQUFZLENBQUMsOEJBQThCLEVBQUVKLEVBQUUsQ0FBQztnQkFDNUQ7WUFDRixPQUFPLElBQUlFLFNBQVMsUUFBUWQsT0FBT2UsVUFBVSxDQUFDSCxJQUFJLE9BQU8sTUFBTTtnQkFDN0RMLFdBQVc7WUFDYixPQUFPLElBQUlJLFFBQVEsQ0FBQyxLQUFLbEIsVUFBVSxDQUFDcUIsS0FBSyxLQUFLLEdBQUc7Z0JBQy9DLElBQUlKLFVBQVUsQ0FBQyxHQUFHQSxRQUFRRTtZQUM1QixPQUFPLElBQUlGLFVBQVUsQ0FBQyxLQUFNSSxDQUFBQSxTQUFTLFFBQVFBLFNBQVMsSUFBRyxHQUFJO2dCQUMzRCxJQUFJSCxRQUFRLENBQUMsR0FBR0EsTUFBTUM7WUFDeEIsT0FBTyxJQUFJRSxTQUFTLFFBQVFBLFNBQVMsTUFBTTtnQkFDekMsSUFBSUosVUFBVSxDQUFDLEdBQUc7b0JBQ2hCLE1BQU0sSUFBSU0sWUFBWSxDQUFDLDhCQUE4QixFQUFFSixFQUFFLENBQUM7Z0JBQzVEO2dCQUVBLElBQUlELFFBQVEsQ0FBQyxHQUFHQSxNQUFNQztnQkFDdEIsSUFBSU0sUUFBUWxCLE9BQU9pQixLQUFLLENBQUNQLE9BQU9DO2dCQUNoQyxJQUFJTixjQUFjO29CQUNoQmEsUUFBUUEsTUFBTUMsT0FBTyxDQUFDLE9BQU87b0JBQzdCZCxlQUFlO2dCQUNqQjtnQkFDQVgsS0FBS1UsUUFBUUssV0FBV1M7Z0JBQ3hCLElBQUlKLFNBQVMsTUFBTTtvQkFDakJwQixLQUFLTyxRQUFRTyxlQUFlSjtvQkFDNUJBLFNBQVNGLE9BQU9DLE1BQU0sQ0FBQztvQkFDdkJLLGdCQUFnQlY7Z0JBQ2xCO2dCQUVBVyxZQUFZWDtnQkFDWlksUUFBUUMsTUFBTSxDQUFDO1lBQ2pCLE9BQU87Z0JBQ0wsTUFBTSxJQUFJSyxZQUFZLENBQUMsOEJBQThCLEVBQUVKLEVBQUUsQ0FBQztZQUM1RDtRQUNGO0lBQ0Y7SUFFQSxJQUFJRixVQUFVLENBQUMsS0FBS0gsVUFBVTtRQUM1QixNQUFNLElBQUlTLFlBQVk7SUFDeEI7SUFFQSxJQUFJTCxRQUFRLENBQUMsR0FBR0EsTUFBTUM7SUFDdEIsTUFBTVEsUUFBUXBCLE9BQU9pQixLQUFLLENBQUNQLE9BQU9DO0lBQ2xDLElBQUlILGtCQUFrQlYsV0FBVztRQUMvQkosS0FBS08sUUFBUW1CLE9BQU9oQjtJQUN0QixPQUFPO1FBQ0wsSUFBSUssY0FBY1gsV0FBVztZQUMzQkosS0FBS1UsUUFBUWdCLE9BQU87UUFDdEIsT0FBTyxJQUFJZixjQUFjO1lBQ3ZCWCxLQUFLVSxRQUFRSyxXQUFXVyxNQUFNRCxPQUFPLENBQUMsT0FBTztRQUMvQyxPQUFPO1lBQ0x6QixLQUFLVSxRQUFRSyxXQUFXVztRQUMxQjtRQUNBMUIsS0FBS08sUUFBUU8sZUFBZUo7SUFDOUI7SUFFQSxPQUFPSDtBQUNUO0FBRUE7Ozs7OztDQU1DLEdBQ0QsU0FBU29CLE9BQU9DLFVBQVU7SUFDeEIsT0FBT3BCLE9BQU9xQixJQUFJLENBQUNELFlBQ2hCRSxHQUFHLENBQUMsQ0FBQ0M7UUFDSixJQUFJQyxpQkFBaUJKLFVBQVUsQ0FBQ0csVUFBVTtRQUMxQyxJQUFJLENBQUNFLE1BQU1DLE9BQU8sQ0FBQ0YsaUJBQWlCQSxpQkFBaUI7WUFBQ0E7U0FBZTtRQUNyRSxPQUFPQSxlQUNKRixHQUFHLENBQUMsQ0FBQ3BCO1lBQ0osT0FBTztnQkFBQ3FCO2FBQVUsQ0FDZkksTUFBTSxDQUNMM0IsT0FBT3FCLElBQUksQ0FBQ25CLFFBQVFvQixHQUFHLENBQUMsQ0FBQ007Z0JBQ3ZCLElBQUlDLFNBQVMzQixNQUFNLENBQUMwQixFQUFFO2dCQUN0QixJQUFJLENBQUNILE1BQU1DLE9BQU8sQ0FBQ0csU0FBU0EsU0FBUztvQkFBQ0E7aUJBQU87Z0JBQzdDLE9BQU9BLE9BQ0pQLEdBQUcsQ0FBQyxDQUFDUSxJQUFPQSxNQUFNLE9BQU9GLElBQUksQ0FBQyxFQUFFQSxFQUFFLENBQUMsRUFBRUUsRUFBRSxDQUFDLEVBQ3hDQyxJQUFJLENBQUM7WUFDVixJQUVEQSxJQUFJLENBQUM7UUFDVixHQUNDQSxJQUFJLENBQUM7SUFDVixHQUNDQSxJQUFJLENBQUM7QUFDVjtBQUVBQyxPQUFPQyxPQUFPLEdBQUc7SUFBRWQ7SUFBUXRCO0FBQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvZXh0ZW5zaW9uLmpzP2JkMzEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vL1xuLy8gQWxsb3dlZCB0b2tlbiBjaGFyYWN0ZXJzOlxuLy9cbi8vICchJywgJyMnLCAnJCcsICclJywgJyYnLCAnJycsICcqJywgJysnLCAnLScsXG4vLyAnLicsIDAtOSwgQS1aLCAnXicsICdfJywgJ2AnLCBhLXosICd8JywgJ34nXG4vL1xuLy8gdG9rZW5DaGFyc1szMl0gPT09IDAgLy8gJyAnXG4vLyB0b2tlbkNoYXJzWzMzXSA9PT0gMSAvLyAnISdcbi8vIHRva2VuQ2hhcnNbMzRdID09PSAwIC8vICdcIidcbi8vIC4uLlxuLy9cbi8vIHByZXR0aWVyLWlnbm9yZVxuY29uc3QgdG9rZW5DaGFycyA9IFtcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgLy8gMCAtIDE1XG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIC8vIDE2IC0gMzFcbiAgMCwgMSwgMCwgMSwgMSwgMSwgMSwgMSwgMCwgMCwgMSwgMSwgMCwgMSwgMSwgMCwgLy8gMzIgLSA0N1xuICAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLCAwLCAwLCAwLCAwLCAwLCAvLyA0OCAtIDYzXG4gIDAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIC8vIDY0IC0gNzlcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMCwgMCwgMCwgMSwgMSwgLy8gODAgLSA5NVxuICAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAvLyA5NiAtIDExMVxuICAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLCAxLCAwLCAxLCAwIC8vIDExMiAtIDEyN1xuXTtcblxuLyoqXG4gKiBBZGRzIGFuIG9mZmVyIHRvIHRoZSBtYXAgb2YgZXh0ZW5zaW9uIG9mZmVycyBvciBhIHBhcmFtZXRlciB0byB0aGUgbWFwIG9mXG4gKiBwYXJhbWV0ZXJzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZXN0IFRoZSBtYXAgb2YgZXh0ZW5zaW9uIG9mZmVycyBvciBwYXJhbWV0ZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBUaGUgZXh0ZW5zaW9uIG9yIHBhcmFtZXRlciBuYW1lXG4gKiBAcGFyYW0geyhPYmplY3R8Qm9vbGVhbnxTdHJpbmcpfSBlbGVtIFRoZSBleHRlbnNpb24gcGFyYW1ldGVycyBvciB0aGVcbiAqICAgICBwYXJhbWV0ZXIgdmFsdWVcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1c2goZGVzdCwgbmFtZSwgZWxlbSkge1xuICBpZiAoZGVzdFtuYW1lXSA9PT0gdW5kZWZpbmVkKSBkZXN0W25hbWVdID0gW2VsZW1dO1xuICBlbHNlIGRlc3RbbmFtZV0ucHVzaChlbGVtKTtcbn1cblxuLyoqXG4gKiBQYXJzZXMgdGhlIGBTZWMtV2ViU29ja2V0LUV4dGVuc2lvbnNgIGhlYWRlciBpbnRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVyIFRoZSBmaWVsZCB2YWx1ZSBvZiB0aGUgaGVhZGVyXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBwYXJzZWQgb2JqZWN0XG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHBhcnNlKGhlYWRlcikge1xuICBjb25zdCBvZmZlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGlmIChoZWFkZXIgPT09IHVuZGVmaW5lZCB8fCBoZWFkZXIgPT09ICcnKSByZXR1cm4gb2ZmZXJzO1xuXG4gIGxldCBwYXJhbXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBsZXQgbXVzdFVuZXNjYXBlID0gZmFsc2U7XG4gIGxldCBpc0VzY2FwaW5nID0gZmFsc2U7XG4gIGxldCBpblF1b3RlcyA9IGZhbHNlO1xuICBsZXQgZXh0ZW5zaW9uTmFtZTtcbiAgbGV0IHBhcmFtTmFtZTtcbiAgbGV0IHN0YXJ0ID0gLTE7XG4gIGxldCBlbmQgPSAtMTtcbiAgbGV0IGkgPSAwO1xuXG4gIGZvciAoOyBpIDwgaGVhZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY29kZSA9IGhlYWRlci5jaGFyQ29kZUF0KGkpO1xuXG4gICAgaWYgKGV4dGVuc2lvbk5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGVuZCA9PT0gLTEgJiYgdG9rZW5DaGFyc1tjb2RlXSA9PT0gMSkge1xuICAgICAgICBpZiAoc3RhcnQgPT09IC0xKSBzdGFydCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4MjAgLyogJyAnICovIHx8IGNvZGUgPT09IDB4MDkgLyogJ1xcdCcgKi8pIHtcbiAgICAgICAgaWYgKGVuZCA9PT0gLTEgJiYgc3RhcnQgIT09IC0xKSBlbmQgPSBpO1xuICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDNiIC8qICc7JyAqLyB8fCBjb2RlID09PSAweDJjIC8qICcsJyAqLykge1xuICAgICAgICBpZiAoc3RhcnQgPT09IC0xKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBVbmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW5kID09PSAtMSkgZW5kID0gaTtcbiAgICAgICAgY29uc3QgbmFtZSA9IGhlYWRlci5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgICAgaWYgKGNvZGUgPT09IDB4MmMpIHtcbiAgICAgICAgICBwdXNoKG9mZmVycywgbmFtZSwgcGFyYW1zKTtcbiAgICAgICAgICBwYXJhbXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV4dGVuc2lvbk5hbWUgPSBuYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnQgPSBlbmQgPSAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgVW5leHBlY3RlZCBjaGFyYWN0ZXIgYXQgaW5kZXggJHtpfWApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW1OYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChlbmQgPT09IC0xICYmIHRva2VuQ2hhcnNbY29kZV0gPT09IDEpIHtcbiAgICAgICAgaWYgKHN0YXJ0ID09PSAtMSkgc3RhcnQgPSBpO1xuICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDIwIHx8IGNvZGUgPT09IDB4MDkpIHtcbiAgICAgICAgaWYgKGVuZCA9PT0gLTEgJiYgc3RhcnQgIT09IC0xKSBlbmQgPSBpO1xuICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDNiIHx8IGNvZGUgPT09IDB4MmMpIHtcbiAgICAgICAgaWYgKHN0YXJ0ID09PSAtMSkge1xuICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgVW5leHBlY3RlZCBjaGFyYWN0ZXIgYXQgaW5kZXggJHtpfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVuZCA9PT0gLTEpIGVuZCA9IGk7XG4gICAgICAgIHB1c2gocGFyYW1zLCBoZWFkZXIuc2xpY2Uoc3RhcnQsIGVuZCksIHRydWUpO1xuICAgICAgICBpZiAoY29kZSA9PT0gMHgyYykge1xuICAgICAgICAgIHB1c2gob2ZmZXJzLCBleHRlbnNpb25OYW1lLCBwYXJhbXMpO1xuICAgICAgICAgIHBhcmFtcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgZXh0ZW5zaW9uTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0ID0gZW5kID0gLTE7XG4gICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4M2QgLyogJz0nICovICYmIHN0YXJ0ICE9PSAtMSAmJiBlbmQgPT09IC0xKSB7XG4gICAgICAgIHBhcmFtTmFtZSA9IGhlYWRlci5zbGljZShzdGFydCwgaSk7XG4gICAgICAgIHN0YXJ0ID0gZW5kID0gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7aX1gKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy9cbiAgICAgIC8vIFRoZSB2YWx1ZSBvZiBhIHF1b3RlZC1zdHJpbmcgYWZ0ZXIgdW5lc2NhcGluZyBtdXN0IGNvbmZvcm0gdG8gdGhlXG4gICAgICAvLyB0b2tlbiBBQk5GLCBzbyBvbmx5IHRva2VuIGNoYXJhY3RlcnMgYXJlIHZhbGlkLlxuICAgICAgLy8gUmVmOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjQ1NSNzZWN0aW9uLTkuMVxuICAgICAgLy9cbiAgICAgIGlmIChpc0VzY2FwaW5nKSB7XG4gICAgICAgIGlmICh0b2tlbkNoYXJzW2NvZGVdICE9PSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBVbmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ID09PSAtMSkgc3RhcnQgPSBpO1xuICAgICAgICBlbHNlIGlmICghbXVzdFVuZXNjYXBlKSBtdXN0VW5lc2NhcGUgPSB0cnVlO1xuICAgICAgICBpc0VzY2FwaW5nID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGluUXVvdGVzKSB7XG4gICAgICAgIGlmICh0b2tlbkNoYXJzW2NvZGVdID09PSAxKSB7XG4gICAgICAgICAgaWYgKHN0YXJ0ID09PSAtMSkgc3RhcnQgPSBpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4MjIgLyogJ1wiJyAqLyAmJiBzdGFydCAhPT0gLTEpIHtcbiAgICAgICAgICBpblF1b3RlcyA9IGZhbHNlO1xuICAgICAgICAgIGVuZCA9IGk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHg1YyAvKiAnXFwnICovKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBVbmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgyMiAmJiBoZWFkZXIuY2hhckNvZGVBdChpIC0gMSkgPT09IDB4M2QpIHtcbiAgICAgICAgaW5RdW90ZXMgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChlbmQgPT09IC0xICYmIHRva2VuQ2hhcnNbY29kZV0gPT09IDEpIHtcbiAgICAgICAgaWYgKHN0YXJ0ID09PSAtMSkgc3RhcnQgPSBpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCAhPT0gLTEgJiYgKGNvZGUgPT09IDB4MjAgfHwgY29kZSA9PT0gMHgwOSkpIHtcbiAgICAgICAgaWYgKGVuZCA9PT0gLTEpIGVuZCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4M2IgfHwgY29kZSA9PT0gMHgyYykge1xuICAgICAgICBpZiAoc3RhcnQgPT09IC0xKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBVbmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW5kID09PSAtMSkgZW5kID0gaTtcbiAgICAgICAgbGV0IHZhbHVlID0gaGVhZGVyLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICBpZiAobXVzdFVuZXNjYXBlKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXFxcL2csICcnKTtcbiAgICAgICAgICBtdXN0VW5lc2NhcGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoKHBhcmFtcywgcGFyYW1OYW1lLCB2YWx1ZSk7XG4gICAgICAgIGlmIChjb2RlID09PSAweDJjKSB7XG4gICAgICAgICAgcHVzaChvZmZlcnMsIGV4dGVuc2lvbk5hbWUsIHBhcmFtcyk7XG4gICAgICAgICAgcGFyYW1zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBleHRlbnNpb25OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICBzdGFydCA9IGVuZCA9IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBVbmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSAtMSB8fCBpblF1b3Rlcykge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignVW5leHBlY3RlZCBlbmQgb2YgaW5wdXQnKTtcbiAgfVxuXG4gIGlmIChlbmQgPT09IC0xKSBlbmQgPSBpO1xuICBjb25zdCB0b2tlbiA9IGhlYWRlci5zbGljZShzdGFydCwgZW5kKTtcbiAgaWYgKGV4dGVuc2lvbk5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHB1c2gob2ZmZXJzLCB0b2tlbiwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAocGFyYW1OYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHB1c2gocGFyYW1zLCB0b2tlbiwgdHJ1ZSk7XG4gICAgfSBlbHNlIGlmIChtdXN0VW5lc2NhcGUpIHtcbiAgICAgIHB1c2gocGFyYW1zLCBwYXJhbU5hbWUsIHRva2VuLnJlcGxhY2UoL1xcXFwvZywgJycpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwYXJhbXMsIHBhcmFtTmFtZSwgdG9rZW4pO1xuICAgIH1cbiAgICBwdXNoKG9mZmVycywgZXh0ZW5zaW9uTmFtZSwgcGFyYW1zKTtcbiAgfVxuXG4gIHJldHVybiBvZmZlcnM7XG59XG5cbi8qKlxuICogQnVpbGRzIHRoZSBgU2VjLVdlYlNvY2tldC1FeHRlbnNpb25zYCBoZWFkZXIgZmllbGQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGV4dGVuc2lvbnMgVGhlIG1hcCBvZiBleHRlbnNpb25zIGFuZCBwYXJhbWV0ZXJzIHRvIGZvcm1hdFxuICogQHJldHVybiB7U3RyaW5nfSBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGdpdmVuIG9iamVjdFxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBmb3JtYXQoZXh0ZW5zaW9ucykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoZXh0ZW5zaW9ucylcbiAgICAubWFwKChleHRlbnNpb24pID0+IHtcbiAgICAgIGxldCBjb25maWd1cmF0aW9ucyA9IGV4dGVuc2lvbnNbZXh0ZW5zaW9uXTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShjb25maWd1cmF0aW9ucykpIGNvbmZpZ3VyYXRpb25zID0gW2NvbmZpZ3VyYXRpb25zXTtcbiAgICAgIHJldHVybiBjb25maWd1cmF0aW9uc1xuICAgICAgICAubWFwKChwYXJhbXMpID0+IHtcbiAgICAgICAgICByZXR1cm4gW2V4dGVuc2lvbl1cbiAgICAgICAgICAgIC5jb25jYXQoXG4gICAgICAgICAgICAgIE9iamVjdC5rZXlzKHBhcmFtcykubWFwKChrKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlcyA9IHBhcmFtc1trXTtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzKSkgdmFsdWVzID0gW3ZhbHVlc107XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgLm1hcCgodikgPT4gKHYgPT09IHRydWUgPyBrIDogYCR7a309JHt2fWApKVxuICAgICAgICAgICAgICAgICAgLmpvaW4oJzsgJyk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuam9pbignOyAnKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgfSlcbiAgICAuam9pbignLCAnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IGZvcm1hdCwgcGFyc2UgfTtcbiJdLCJuYW1lcyI6WyJ0b2tlbkNoYXJzIiwicHVzaCIsImRlc3QiLCJuYW1lIiwiZWxlbSIsInVuZGVmaW5lZCIsInBhcnNlIiwiaGVhZGVyIiwib2ZmZXJzIiwiT2JqZWN0IiwiY3JlYXRlIiwicGFyYW1zIiwibXVzdFVuZXNjYXBlIiwiaXNFc2NhcGluZyIsImluUXVvdGVzIiwiZXh0ZW5zaW9uTmFtZSIsInBhcmFtTmFtZSIsInN0YXJ0IiwiZW5kIiwiaSIsImxlbmd0aCIsImNvZGUiLCJjaGFyQ29kZUF0IiwiU3ludGF4RXJyb3IiLCJzbGljZSIsInZhbHVlIiwicmVwbGFjZSIsInRva2VuIiwiZm9ybWF0IiwiZXh0ZW5zaW9ucyIsImtleXMiLCJtYXAiLCJleHRlbnNpb24iLCJjb25maWd1cmF0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsImNvbmNhdCIsImsiLCJ2YWx1ZXMiLCJ2Iiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/extension.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/limiter.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/limiter.js ***!
  \******************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nconst kDone = Symbol(\"kDone\");\nconst kRun = Symbol(\"kRun\");\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */ class Limiter {\n    /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */ constructor(concurrency){\n        this[kDone] = ()=>{\n            this.pending--;\n            this[kRun]();\n        };\n        this.concurrency = concurrency || Infinity;\n        this.jobs = [];\n        this.pending = 0;\n    }\n    /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */ add(job) {\n        this.jobs.push(job);\n        this[kRun]();\n    }\n    /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */ [kRun]() {\n        if (this.pending === this.concurrency) return;\n        if (this.jobs.length) {\n            const job = this.jobs.shift();\n            this.pending++;\n            job(this[kDone]);\n        }\n    }\n}\nmodule.exports = Limiter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvbGltaXRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFFBQVFDLE9BQU87QUFDckIsTUFBTUMsT0FBT0QsT0FBTztBQUVwQjs7O0NBR0MsR0FDRCxNQUFNRTtJQUNKOzs7OztHQUtDLEdBQ0RDLFlBQVlDLFdBQVcsQ0FBRTtRQUN2QixJQUFJLENBQUNMLE1BQU0sR0FBRztZQUNaLElBQUksQ0FBQ00sT0FBTztZQUNaLElBQUksQ0FBQ0osS0FBSztRQUNaO1FBQ0EsSUFBSSxDQUFDRyxXQUFXLEdBQUdBLGVBQWVFO1FBQ2xDLElBQUksQ0FBQ0MsSUFBSSxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUNGLE9BQU8sR0FBRztJQUNqQjtJQUVBOzs7OztHQUtDLEdBQ0RHLElBQUlDLEdBQUcsRUFBRTtRQUNQLElBQUksQ0FBQ0YsSUFBSSxDQUFDRyxJQUFJLENBQUNEO1FBQ2YsSUFBSSxDQUFDUixLQUFLO0lBQ1o7SUFFQTs7OztHQUlDLEdBQ0QsQ0FBQ0EsS0FBSyxHQUFHO1FBQ1AsSUFBSSxJQUFJLENBQUNJLE9BQU8sS0FBSyxJQUFJLENBQUNELFdBQVcsRUFBRTtRQUV2QyxJQUFJLElBQUksQ0FBQ0csSUFBSSxDQUFDSSxNQUFNLEVBQUU7WUFDcEIsTUFBTUYsTUFBTSxJQUFJLENBQUNGLElBQUksQ0FBQ0ssS0FBSztZQUUzQixJQUFJLENBQUNQLE9BQU87WUFDWkksSUFBSSxJQUFJLENBQUNWLE1BQU07UUFDakI7SUFDRjtBQUNGO0FBRUFjLE9BQU9DLE9BQU8sR0FBR1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvbGltaXRlci5qcz80M2FhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qga0RvbmUgPSBTeW1ib2woJ2tEb25lJyk7XG5jb25zdCBrUnVuID0gU3ltYm9sKCdrUnVuJyk7XG5cbi8qKlxuICogQSB2ZXJ5IHNpbXBsZSBqb2IgcXVldWUgd2l0aCBhZGp1c3RhYmxlIGNvbmN1cnJlbmN5LiBBZGFwdGVkIGZyb21cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9TVFJNTC9hc3luYy1saW1pdGVyXG4gKi9cbmNsYXNzIExpbWl0ZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBgTGltaXRlcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbY29uY3VycmVuY3k9SW5maW5pdHldIFRoZSBtYXhpbXVtIG51bWJlciBvZiBqb2JzIGFsbG93ZWRcbiAgICogICAgIHRvIHJ1biBjb25jdXJyZW50bHlcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbmN1cnJlbmN5KSB7XG4gICAgdGhpc1trRG9uZV0gPSAoKSA9PiB7XG4gICAgICB0aGlzLnBlbmRpbmctLTtcbiAgICAgIHRoaXNba1J1bl0oKTtcbiAgICB9O1xuICAgIHRoaXMuY29uY3VycmVuY3kgPSBjb25jdXJyZW5jeSB8fCBJbmZpbml0eTtcbiAgICB0aGlzLmpvYnMgPSBbXTtcbiAgICB0aGlzLnBlbmRpbmcgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBqb2IgdG8gdGhlIHF1ZXVlLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBqb2IgVGhlIGpvYiB0byBydW5cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgYWRkKGpvYikge1xuICAgIHRoaXMuam9icy5wdXNoKGpvYik7XG4gICAgdGhpc1trUnVuXSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBqb2IgZnJvbSB0aGUgcXVldWUgYW5kIHJ1bnMgaXQgaWYgcG9zc2libGUuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBba1J1bl0oKSB7XG4gICAgaWYgKHRoaXMucGVuZGluZyA9PT0gdGhpcy5jb25jdXJyZW5jeSkgcmV0dXJuO1xuXG4gICAgaWYgKHRoaXMuam9icy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGpvYiA9IHRoaXMuam9icy5zaGlmdCgpO1xuXG4gICAgICB0aGlzLnBlbmRpbmcrKztcbiAgICAgIGpvYih0aGlzW2tEb25lXSk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGltaXRlcjtcbiJdLCJuYW1lcyI6WyJrRG9uZSIsIlN5bWJvbCIsImtSdW4iLCJMaW1pdGVyIiwiY29uc3RydWN0b3IiLCJjb25jdXJyZW5jeSIsInBlbmRpbmciLCJJbmZpbml0eSIsImpvYnMiLCJhZGQiLCJqb2IiLCJwdXNoIiwibGVuZ3RoIiwic2hpZnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/limiter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js ***!
  \*****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst bufferUtil = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js\");\nconst Limiter = __webpack_require__(/*! ./limiter */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/limiter.js\");\nconst { kStatusCode, NOOP } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\nconst TRAILER = Buffer.from([\n    0x00,\n    0x00,\n    0xff,\n    0xff\n]);\nconst kPerMessageDeflate = Symbol(\"permessage-deflate\");\nconst kTotalLength = Symbol(\"total-length\");\nconst kCallback = Symbol(\"callback\");\nconst kBuffers = Symbol(\"buffers\");\nconst kError = Symbol(\"error\");\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n/**\n * permessage-deflate implementation.\n */ class PerMessageDeflate {\n    /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */ constructor(options, isServer, maxPayload){\n        this._maxPayload = maxPayload | 0;\n        this._options = options || {};\n        this._threshold = this._options.threshold !== undefined ? this._options.threshold : 1024;\n        this._isServer = !!isServer;\n        this._deflate = null;\n        this._inflate = null;\n        this.params = null;\n        if (!zlibLimiter) {\n            const concurrency = this._options.concurrencyLimit !== undefined ? this._options.concurrencyLimit : 10;\n            zlibLimiter = new Limiter(concurrency);\n        }\n    }\n    /**\n   * @type {String}\n   */ static get extensionName() {\n        return \"permessage-deflate\";\n    }\n    /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */ offer() {\n        const params = {};\n        if (this._options.serverNoContextTakeover) {\n            params.server_no_context_takeover = true;\n        }\n        if (this._options.clientNoContextTakeover) {\n            params.client_no_context_takeover = true;\n        }\n        if (this._options.serverMaxWindowBits) {\n            params.server_max_window_bits = this._options.serverMaxWindowBits;\n        }\n        if (this._options.clientMaxWindowBits) {\n            params.client_max_window_bits = this._options.clientMaxWindowBits;\n        } else if (this._options.clientMaxWindowBits == null) {\n            params.client_max_window_bits = true;\n        }\n        return params;\n    }\n    /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */ accept(configurations) {\n        configurations = this.normalizeParams(configurations);\n        this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);\n        return this.params;\n    }\n    /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */ cleanup() {\n        if (this._inflate) {\n            this._inflate.close();\n            this._inflate = null;\n        }\n        if (this._deflate) {\n            const callback = this._deflate[kCallback];\n            this._deflate.close();\n            this._deflate = null;\n            if (callback) {\n                callback(new Error(\"The deflate stream was closed while data was being processed\"));\n            }\n        }\n    }\n    /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */ acceptAsServer(offers) {\n        const opts = this._options;\n        const accepted = offers.find((params)=>{\n            if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === \"number\" && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === \"number\" && !params.client_max_window_bits) {\n                return false;\n            }\n            return true;\n        });\n        if (!accepted) {\n            throw new Error(\"None of the extension offers can be accepted\");\n        }\n        if (opts.serverNoContextTakeover) {\n            accepted.server_no_context_takeover = true;\n        }\n        if (opts.clientNoContextTakeover) {\n            accepted.client_no_context_takeover = true;\n        }\n        if (typeof opts.serverMaxWindowBits === \"number\") {\n            accepted.server_max_window_bits = opts.serverMaxWindowBits;\n        }\n        if (typeof opts.clientMaxWindowBits === \"number\") {\n            accepted.client_max_window_bits = opts.clientMaxWindowBits;\n        } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {\n            delete accepted.client_max_window_bits;\n        }\n        return accepted;\n    }\n    /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */ acceptAsClient(response) {\n        const params = response[0];\n        if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {\n            throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n        }\n        if (!params.client_max_window_bits) {\n            if (typeof this._options.clientMaxWindowBits === \"number\") {\n                params.client_max_window_bits = this._options.clientMaxWindowBits;\n            }\n        } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === \"number\" && params.client_max_window_bits > this._options.clientMaxWindowBits) {\n            throw new Error('Unexpected or invalid parameter \"client_max_window_bits\"');\n        }\n        return params;\n    }\n    /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */ normalizeParams(configurations) {\n        configurations.forEach((params)=>{\n            Object.keys(params).forEach((key)=>{\n                let value = params[key];\n                if (value.length > 1) {\n                    throw new Error(`Parameter \"${key}\" must have only a single value`);\n                }\n                value = value[0];\n                if (key === \"client_max_window_bits\") {\n                    if (value !== true) {\n                        const num = +value;\n                        if (!Number.isInteger(num) || num < 8 || num > 15) {\n                            throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                        }\n                        value = num;\n                    } else if (!this._isServer) {\n                        throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                    }\n                } else if (key === \"server_max_window_bits\") {\n                    const num = +value;\n                    if (!Number.isInteger(num) || num < 8 || num > 15) {\n                        throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                    }\n                    value = num;\n                } else if (key === \"client_no_context_takeover\" || key === \"server_no_context_takeover\") {\n                    if (value !== true) {\n                        throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                    }\n                } else {\n                    throw new Error(`Unknown parameter \"${key}\"`);\n                }\n                params[key] = value;\n            });\n        });\n        return configurations;\n    }\n    /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */ decompress(data, fin, callback) {\n        zlibLimiter.add((done)=>{\n            this._decompress(data, fin, (err, result)=>{\n                done();\n                callback(err, result);\n            });\n        });\n    }\n    /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */ compress(data, fin, callback) {\n        zlibLimiter.add((done)=>{\n            this._compress(data, fin, (err, result)=>{\n                done();\n                callback(err, result);\n            });\n        });\n    }\n    /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */ _decompress(data, fin, callback) {\n        const endpoint = this._isServer ? \"client\" : \"server\";\n        if (!this._inflate) {\n            const key = `${endpoint}_max_window_bits`;\n            const windowBits = typeof this.params[key] !== \"number\" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n            this._inflate = zlib.createInflateRaw({\n                ...this._options.zlibInflateOptions,\n                windowBits\n            });\n            this._inflate[kPerMessageDeflate] = this;\n            this._inflate[kTotalLength] = 0;\n            this._inflate[kBuffers] = [];\n            this._inflate.on(\"error\", inflateOnError);\n            this._inflate.on(\"data\", inflateOnData);\n        }\n        this._inflate[kCallback] = callback;\n        this._inflate.write(data);\n        if (fin) this._inflate.write(TRAILER);\n        this._inflate.flush(()=>{\n            const err = this._inflate[kError];\n            if (err) {\n                this._inflate.close();\n                this._inflate = null;\n                callback(err);\n                return;\n            }\n            const data = bufferUtil.concat(this._inflate[kBuffers], this._inflate[kTotalLength]);\n            if (this._inflate._readableState.endEmitted) {\n                this._inflate.close();\n                this._inflate = null;\n            } else {\n                this._inflate[kTotalLength] = 0;\n                this._inflate[kBuffers] = [];\n                if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n                    this._inflate.reset();\n                }\n            }\n            callback(null, data);\n        });\n    }\n    /**\n   * Compress data.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */ _compress(data, fin, callback) {\n        const endpoint = this._isServer ? \"server\" : \"client\";\n        if (!this._deflate) {\n            const key = `${endpoint}_max_window_bits`;\n            const windowBits = typeof this.params[key] !== \"number\" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n            this._deflate = zlib.createDeflateRaw({\n                ...this._options.zlibDeflateOptions,\n                windowBits\n            });\n            this._deflate[kTotalLength] = 0;\n            this._deflate[kBuffers] = [];\n            //\n            // An `'error'` event is emitted, only on Node.js < 10.0.0, if the\n            // `zlib.DeflateRaw` instance is closed while data is being processed.\n            // This can happen if `PerMessageDeflate#cleanup()` is called at the wrong\n            // time due to an abnormal WebSocket closure.\n            //\n            this._deflate.on(\"error\", NOOP);\n            this._deflate.on(\"data\", deflateOnData);\n        }\n        this._deflate[kCallback] = callback;\n        this._deflate.write(data);\n        this._deflate.flush(zlib.Z_SYNC_FLUSH, ()=>{\n            if (!this._deflate) {\n                //\n                // The deflate stream was closed while data was being processed.\n                //\n                return;\n            }\n            let data = bufferUtil.concat(this._deflate[kBuffers], this._deflate[kTotalLength]);\n            if (fin) data = data.slice(0, data.length - 4);\n            //\n            // Ensure that the callback will not be called again in\n            // `PerMessageDeflate#cleanup()`.\n            //\n            this._deflate[kCallback] = null;\n            this._deflate[kTotalLength] = 0;\n            this._deflate[kBuffers] = [];\n            if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n                this._deflate.reset();\n            }\n            callback(null, data);\n        });\n    }\n}\nmodule.exports = PerMessageDeflate;\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */ function deflateOnData(chunk) {\n    this[kBuffers].push(chunk);\n    this[kTotalLength] += chunk.length;\n}\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */ function inflateOnData(chunk) {\n    this[kTotalLength] += chunk.length;\n    if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {\n        this[kBuffers].push(chunk);\n        return;\n    }\n    this[kError] = new RangeError(\"Max payload size exceeded\");\n    this[kError].code = \"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH\";\n    this[kError][kStatusCode] = 1009;\n    this.removeListener(\"data\", inflateOnData);\n    this.reset();\n}\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */ function inflateOnError(err) {\n    //\n    // There is no need to call `Zlib#close()` as the handle is automatically\n    // closed when an error is emitted.\n    //\n    this[kPerMessageDeflate]._inflate = null;\n    err[kStatusCode] = 1007;\n    this[kCallback](err);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/receiver.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/receiver.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js\");\nconst { BINARY_TYPES, EMPTY_BUFFER, kStatusCode, kWebSocket } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\nconst { concat, toArrayBuffer, unmask } = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js\");\nconst { isValidStatusCode, isValidUTF8 } = __webpack_require__(/*! ./validation */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/validation.js\");\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */ class Receiver extends Writable {\n    /**\n   * Creates a Receiver instance.\n   *\n   * @param {String} [binaryType=nodebuffer] The type for binary data\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Boolean} [isServer=false] Specifies whether to operate in client or\n   *     server mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */ constructor(binaryType, extensions, isServer, maxPayload){\n        super();\n        this._binaryType = binaryType || BINARY_TYPES[0];\n        this[kWebSocket] = undefined;\n        this._extensions = extensions || {};\n        this._isServer = !!isServer;\n        this._maxPayload = maxPayload | 0;\n        this._bufferedBytes = 0;\n        this._buffers = [];\n        this._compressed = false;\n        this._payloadLength = 0;\n        this._mask = undefined;\n        this._fragmented = 0;\n        this._masked = false;\n        this._fin = false;\n        this._opcode = 0;\n        this._totalPayloadLength = 0;\n        this._messageLength = 0;\n        this._fragments = [];\n        this._state = GET_INFO;\n        this._loop = false;\n    }\n    /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */ _write(chunk, encoding, cb) {\n        if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n        this._bufferedBytes += chunk.length;\n        this._buffers.push(chunk);\n        this.startLoop(cb);\n    }\n    /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */ consume(n) {\n        this._bufferedBytes -= n;\n        if (n === this._buffers[0].length) return this._buffers.shift();\n        if (n < this._buffers[0].length) {\n            const buf = this._buffers[0];\n            this._buffers[0] = buf.slice(n);\n            return buf.slice(0, n);\n        }\n        const dst = Buffer.allocUnsafe(n);\n        do {\n            const buf = this._buffers[0];\n            const offset = dst.length - n;\n            if (n >= buf.length) {\n                dst.set(this._buffers.shift(), offset);\n            } else {\n                dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n                this._buffers[0] = buf.slice(n);\n            }\n            n -= buf.length;\n        }while (n > 0);\n        return dst;\n    }\n    /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */ startLoop(cb) {\n        let err;\n        this._loop = true;\n        do {\n            switch(this._state){\n                case GET_INFO:\n                    err = this.getInfo();\n                    break;\n                case GET_PAYLOAD_LENGTH_16:\n                    err = this.getPayloadLength16();\n                    break;\n                case GET_PAYLOAD_LENGTH_64:\n                    err = this.getPayloadLength64();\n                    break;\n                case GET_MASK:\n                    this.getMask();\n                    break;\n                case GET_DATA:\n                    err = this.getData(cb);\n                    break;\n                default:\n                    // `INFLATING`\n                    this._loop = false;\n                    return;\n            }\n        }while (this._loop);\n        cb(err);\n    }\n    /**\n   * Reads the first two bytes of a frame.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ getInfo() {\n        if (this._bufferedBytes < 2) {\n            this._loop = false;\n            return;\n        }\n        const buf = this.consume(2);\n        if ((buf[0] & 0x30) !== 0x00) {\n            this._loop = false;\n            return error(RangeError, \"RSV2 and RSV3 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_2_3\");\n        }\n        const compressed = (buf[0] & 0x40) === 0x40;\n        if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n            this._loop = false;\n            return error(RangeError, \"RSV1 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_1\");\n        }\n        this._fin = (buf[0] & 0x80) === 0x80;\n        this._opcode = buf[0] & 0x0f;\n        this._payloadLength = buf[1] & 0x7f;\n        if (this._opcode === 0x00) {\n            if (compressed) {\n                this._loop = false;\n                return error(RangeError, \"RSV1 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_1\");\n            }\n            if (!this._fragmented) {\n                this._loop = false;\n                return error(RangeError, \"invalid opcode 0\", true, 1002, \"WS_ERR_INVALID_OPCODE\");\n            }\n            this._opcode = this._fragmented;\n        } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n            if (this._fragmented) {\n                this._loop = false;\n                return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002, \"WS_ERR_INVALID_OPCODE\");\n            }\n            this._compressed = compressed;\n        } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n            if (!this._fin) {\n                this._loop = false;\n                return error(RangeError, \"FIN must be set\", true, 1002, \"WS_ERR_EXPECTED_FIN\");\n            }\n            if (compressed) {\n                this._loop = false;\n                return error(RangeError, \"RSV1 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_1\");\n            }\n            if (this._payloadLength > 0x7d) {\n                this._loop = false;\n                return error(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002, \"WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH\");\n            }\n        } else {\n            this._loop = false;\n            return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002, \"WS_ERR_INVALID_OPCODE\");\n        }\n        if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n        this._masked = (buf[1] & 0x80) === 0x80;\n        if (this._isServer) {\n            if (!this._masked) {\n                this._loop = false;\n                return error(RangeError, \"MASK must be set\", true, 1002, \"WS_ERR_EXPECTED_MASK\");\n            }\n        } else if (this._masked) {\n            this._loop = false;\n            return error(RangeError, \"MASK must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_MASK\");\n        }\n        if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n        else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n        else return this.haveLength();\n    }\n    /**\n   * Gets extended payload length (7+16).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ getPayloadLength16() {\n        if (this._bufferedBytes < 2) {\n            this._loop = false;\n            return;\n        }\n        this._payloadLength = this.consume(2).readUInt16BE(0);\n        return this.haveLength();\n    }\n    /**\n   * Gets extended payload length (7+64).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ getPayloadLength64() {\n        if (this._bufferedBytes < 8) {\n            this._loop = false;\n            return;\n        }\n        const buf = this.consume(8);\n        const num = buf.readUInt32BE(0);\n        //\n        // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n        // if payload length is greater than this number.\n        //\n        if (num > Math.pow(2, 53 - 32) - 1) {\n            this._loop = false;\n            return error(RangeError, \"Unsupported WebSocket frame: payload length > 2^53 - 1\", false, 1009, \"WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH\");\n        }\n        this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n        return this.haveLength();\n    }\n    /**\n   * Payload length has been read.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ haveLength() {\n        if (this._payloadLength && this._opcode < 0x08) {\n            this._totalPayloadLength += this._payloadLength;\n            if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n                this._loop = false;\n                return error(RangeError, \"Max payload size exceeded\", false, 1009, \"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH\");\n            }\n        }\n        if (this._masked) this._state = GET_MASK;\n        else this._state = GET_DATA;\n    }\n    /**\n   * Reads mask bytes.\n   *\n   * @private\n   */ getMask() {\n        if (this._bufferedBytes < 4) {\n            this._loop = false;\n            return;\n        }\n        this._mask = this.consume(4);\n        this._state = GET_DATA;\n    }\n    /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */ getData(cb) {\n        let data = EMPTY_BUFFER;\n        if (this._payloadLength) {\n            if (this._bufferedBytes < this._payloadLength) {\n                this._loop = false;\n                return;\n            }\n            data = this.consume(this._payloadLength);\n            if (this._masked) unmask(data, this._mask);\n        }\n        if (this._opcode > 0x07) return this.controlMessage(data);\n        if (this._compressed) {\n            this._state = INFLATING;\n            this.decompress(data, cb);\n            return;\n        }\n        if (data.length) {\n            //\n            // This message is not compressed so its lenght is the sum of the payload\n            // length of all fragments.\n            //\n            this._messageLength = this._totalPayloadLength;\n            this._fragments.push(data);\n        }\n        return this.dataMessage();\n    }\n    /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */ decompress(data, cb) {\n        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n        perMessageDeflate.decompress(data, this._fin, (err, buf)=>{\n            if (err) return cb(err);\n            if (buf.length) {\n                this._messageLength += buf.length;\n                if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n                    return cb(error(RangeError, \"Max payload size exceeded\", false, 1009, \"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH\"));\n                }\n                this._fragments.push(buf);\n            }\n            const er = this.dataMessage();\n            if (er) return cb(er);\n            this.startLoop(cb);\n        });\n    }\n    /**\n   * Handles a data message.\n   *\n   * @return {(Error|undefined)} A possible error\n   * @private\n   */ dataMessage() {\n        if (this._fin) {\n            const messageLength = this._messageLength;\n            const fragments = this._fragments;\n            this._totalPayloadLength = 0;\n            this._messageLength = 0;\n            this._fragmented = 0;\n            this._fragments = [];\n            if (this._opcode === 2) {\n                let data;\n                if (this._binaryType === \"nodebuffer\") {\n                    data = concat(fragments, messageLength);\n                } else if (this._binaryType === \"arraybuffer\") {\n                    data = toArrayBuffer(concat(fragments, messageLength));\n                } else {\n                    data = fragments;\n                }\n                this.emit(\"message\", data);\n            } else {\n                const buf = concat(fragments, messageLength);\n                if (!isValidUTF8(buf)) {\n                    this._loop = false;\n                    return error(Error, \"invalid UTF-8 sequence\", true, 1007, \"WS_ERR_INVALID_UTF8\");\n                }\n                this.emit(\"message\", buf.toString());\n            }\n        }\n        this._state = GET_INFO;\n    }\n    /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */ controlMessage(data) {\n        if (this._opcode === 0x08) {\n            this._loop = false;\n            if (data.length === 0) {\n                this.emit(\"conclude\", 1005, \"\");\n                this.end();\n            } else if (data.length === 1) {\n                return error(RangeError, \"invalid payload length 1\", true, 1002, \"WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH\");\n            } else {\n                const code = data.readUInt16BE(0);\n                if (!isValidStatusCode(code)) {\n                    return error(RangeError, `invalid status code ${code}`, true, 1002, \"WS_ERR_INVALID_CLOSE_CODE\");\n                }\n                const buf = data.slice(2);\n                if (!isValidUTF8(buf)) {\n                    return error(Error, \"invalid UTF-8 sequence\", true, 1007, \"WS_ERR_INVALID_UTF8\");\n                }\n                this.emit(\"conclude\", code, buf.toString());\n                this.end();\n            }\n        } else if (this._opcode === 0x09) {\n            this.emit(\"ping\", data);\n        } else {\n            this.emit(\"pong\", data);\n        }\n        this._state = GET_INFO;\n    }\n}\nmodule.exports = Receiver;\n/**\n * Builds an error object.\n *\n * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n * @param {String} message The error message\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n *     `message`\n * @param {Number} statusCode The status code\n * @param {String} errorCode The exposed error code\n * @return {(Error|RangeError)} The error\n * @private\n */ function error(ErrorCtor, message, prefix, statusCode, errorCode) {\n    const err = new ErrorCtor(prefix ? `Invalid WebSocket frame: ${message}` : message);\n    Error.captureStackTrace(err, error);\n    err.code = errorCode;\n    err[kStatusCode] = statusCode;\n    return err;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/receiver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/sender.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/sender.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls$\" }] */ \nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { randomFillSync } = __webpack_require__(/*! crypto */ \"crypto\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js\");\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\nconst { isValidStatusCode } = __webpack_require__(/*! ./validation */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/validation.js\");\nconst { mask: applyMask, toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js\");\nconst mask = Buffer.alloc(4);\n/**\n * HyBi Sender implementation.\n */ class Sender {\n    /**\n   * Creates a Sender instance.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   */ constructor(socket, extensions){\n        this._extensions = extensions || {};\n        this._socket = socket;\n        this._firstFragment = true;\n        this._compress = false;\n        this._bufferedBytes = 0;\n        this._deflating = false;\n        this._queue = [];\n    }\n    /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {Buffer} data The data to frame\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {Buffer[]} The framed data as a list of `Buffer` instances\n   * @public\n   */ static frame(data, options) {\n        const merge = options.mask && options.readOnly;\n        let offset = options.mask ? 6 : 2;\n        let payloadLength = data.length;\n        if (data.length >= 65536) {\n            offset += 8;\n            payloadLength = 127;\n        } else if (data.length > 125) {\n            offset += 2;\n            payloadLength = 126;\n        }\n        const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);\n        target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n        if (options.rsv1) target[0] |= 0x40;\n        target[1] = payloadLength;\n        if (payloadLength === 126) {\n            target.writeUInt16BE(data.length, 2);\n        } else if (payloadLength === 127) {\n            target.writeUInt32BE(0, 2);\n            target.writeUInt32BE(data.length, 6);\n        }\n        if (!options.mask) return [\n            target,\n            data\n        ];\n        randomFillSync(mask, 0, 4);\n        target[1] |= 0x80;\n        target[offset - 4] = mask[0];\n        target[offset - 3] = mask[1];\n        target[offset - 2] = mask[2];\n        target[offset - 1] = mask[3];\n        if (merge) {\n            applyMask(data, mask, target, offset, data.length);\n            return [\n                target\n            ];\n        }\n        applyMask(data, mask, data, 0, data.length);\n        return [\n            target,\n            data\n        ];\n    }\n    /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {String} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */ close(code, data, mask, cb) {\n        let buf;\n        if (code === undefined) {\n            buf = EMPTY_BUFFER;\n        } else if (typeof code !== \"number\" || !isValidStatusCode(code)) {\n            throw new TypeError(\"First argument must be a valid error code number\");\n        } else if (data === undefined || data === \"\") {\n            buf = Buffer.allocUnsafe(2);\n            buf.writeUInt16BE(code, 0);\n        } else {\n            const length = Buffer.byteLength(data);\n            if (length > 123) {\n                throw new RangeError(\"The message must not be greater than 123 bytes\");\n            }\n            buf = Buffer.allocUnsafe(2 + length);\n            buf.writeUInt16BE(code, 0);\n            buf.write(data, 2);\n        }\n        if (this._deflating) {\n            this.enqueue([\n                this.doClose,\n                buf,\n                mask,\n                cb\n            ]);\n        } else {\n            this.doClose(buf, mask, cb);\n        }\n    }\n    /**\n   * Frames and sends a close message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @private\n   */ doClose(data, mask, cb) {\n        this.sendFrame(Sender.frame(data, {\n            fin: true,\n            rsv1: false,\n            opcode: 0x08,\n            mask,\n            readOnly: false\n        }), cb);\n    }\n    /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */ ping(data, mask, cb) {\n        const buf = toBuffer(data);\n        if (buf.length > 125) {\n            throw new RangeError(\"The data size must not be greater than 125 bytes\");\n        }\n        if (this._deflating) {\n            this.enqueue([\n                this.doPing,\n                buf,\n                mask,\n                toBuffer.readOnly,\n                cb\n            ]);\n        } else {\n            this.doPing(buf, mask, toBuffer.readOnly, cb);\n        }\n    }\n    /**\n   * Frames and sends a ping message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\n   * @param {Function} [cb] Callback\n   * @private\n   */ doPing(data, mask, readOnly, cb) {\n        this.sendFrame(Sender.frame(data, {\n            fin: true,\n            rsv1: false,\n            opcode: 0x09,\n            mask,\n            readOnly\n        }), cb);\n    }\n    /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */ pong(data, mask, cb) {\n        const buf = toBuffer(data);\n        if (buf.length > 125) {\n            throw new RangeError(\"The data size must not be greater than 125 bytes\");\n        }\n        if (this._deflating) {\n            this.enqueue([\n                this.doPong,\n                buf,\n                mask,\n                toBuffer.readOnly,\n                cb\n            ]);\n        } else {\n            this.doPong(buf, mask, toBuffer.readOnly, cb);\n        }\n    }\n    /**\n   * Frames and sends a pong message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\n   * @param {Function} [cb] Callback\n   * @private\n   */ doPong(data, mask, readOnly, cb) {\n        this.sendFrame(Sender.frame(data, {\n            fin: true,\n            rsv1: false,\n            opcode: 0x0a,\n            mask,\n            readOnly\n        }), cb);\n    }\n    /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */ send(data, options, cb) {\n        const buf = toBuffer(data);\n        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n        let opcode = options.binary ? 2 : 1;\n        let rsv1 = options.compress;\n        if (this._firstFragment) {\n            this._firstFragment = false;\n            if (rsv1 && perMessageDeflate) {\n                rsv1 = buf.length >= perMessageDeflate._threshold;\n            }\n            this._compress = rsv1;\n        } else {\n            rsv1 = false;\n            opcode = 0;\n        }\n        if (options.fin) this._firstFragment = true;\n        if (perMessageDeflate) {\n            const opts = {\n                fin: options.fin,\n                rsv1,\n                opcode,\n                mask: options.mask,\n                readOnly: toBuffer.readOnly\n            };\n            if (this._deflating) {\n                this.enqueue([\n                    this.dispatch,\n                    buf,\n                    this._compress,\n                    opts,\n                    cb\n                ]);\n            } else {\n                this.dispatch(buf, this._compress, opts, cb);\n            }\n        } else {\n            this.sendFrame(Sender.frame(buf, {\n                fin: options.fin,\n                rsv1: false,\n                opcode,\n                mask: options.mask,\n                readOnly: toBuffer.readOnly\n            }), cb);\n        }\n    }\n    /**\n   * Dispatches a data message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */ dispatch(data, compress, options, cb) {\n        if (!compress) {\n            this.sendFrame(Sender.frame(data, options), cb);\n            return;\n        }\n        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n        this._bufferedBytes += data.length;\n        this._deflating = true;\n        perMessageDeflate.compress(data, options.fin, (_, buf)=>{\n            if (this._socket.destroyed) {\n                const err = new Error(\"The socket was closed while data was being compressed\");\n                if (typeof cb === \"function\") cb(err);\n                for(let i = 0; i < this._queue.length; i++){\n                    const callback = this._queue[i][4];\n                    if (typeof callback === \"function\") callback(err);\n                }\n                return;\n            }\n            this._bufferedBytes -= data.length;\n            this._deflating = false;\n            options.readOnly = false;\n            this.sendFrame(Sender.frame(buf, options), cb);\n            this.dequeue();\n        });\n    }\n    /**\n   * Executes queued send operations.\n   *\n   * @private\n   */ dequeue() {\n        while(!this._deflating && this._queue.length){\n            const params = this._queue.shift();\n            this._bufferedBytes -= params[1].length;\n            Reflect.apply(params[0], this, params.slice(1));\n        }\n    }\n    /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */ enqueue(params) {\n        this._bufferedBytes += params[1].length;\n        this._queue.push(params);\n    }\n    /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */ sendFrame(list, cb) {\n        if (list.length === 2) {\n            this._socket.cork();\n            this._socket.write(list[0]);\n            this._socket.write(list[1], cb);\n            this._socket.uncork();\n        } else {\n            this._socket.write(list[0], cb);\n        }\n    }\n}\nmodule.exports = Sender;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/sender.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/stream.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/stream.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { Duplex } = __webpack_require__(/*! stream */ \"stream\");\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */ function emitClose(stream) {\n    stream.emit(\"close\");\n}\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */ function duplexOnEnd() {\n    if (!this.destroyed && this._writableState.finished) {\n        this.destroy();\n    }\n}\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */ function duplexOnError(err) {\n    this.removeListener(\"error\", duplexOnError);\n    this.destroy();\n    if (this.listenerCount(\"error\") === 0) {\n        // Do not suppress the throwing behavior.\n        this.emit(\"error\", err);\n    }\n}\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */ function createWebSocketStream(ws, options) {\n    let resumeOnReceiverDrain = true;\n    let terminateOnDestroy = true;\n    function receiverOnDrain() {\n        if (resumeOnReceiverDrain) ws._socket.resume();\n    }\n    if (ws.readyState === ws.CONNECTING) {\n        ws.once(\"open\", function open() {\n            ws._receiver.removeAllListeners(\"drain\");\n            ws._receiver.on(\"drain\", receiverOnDrain);\n        });\n    } else {\n        ws._receiver.removeAllListeners(\"drain\");\n        ws._receiver.on(\"drain\", receiverOnDrain);\n    }\n    const duplex = new Duplex({\n        ...options,\n        autoDestroy: false,\n        emitClose: false,\n        objectMode: false,\n        writableObjectMode: false\n    });\n    ws.on(\"message\", function message(msg) {\n        if (!duplex.push(msg)) {\n            resumeOnReceiverDrain = false;\n            ws._socket.pause();\n        }\n    });\n    ws.once(\"error\", function error(err) {\n        if (duplex.destroyed) return;\n        // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n        //\n        // - If the `'error'` event is emitted before the `'open'` event, then\n        //   `ws.terminate()` is a noop as no socket is assigned.\n        // - Otherwise, the error is re-emitted by the listener of the `'error'`\n        //   event of the `Receiver` object. The listener already closes the\n        //   connection by calling `ws.close()`. This allows a close frame to be\n        //   sent to the other peer. If `ws.terminate()` is called right after this,\n        //   then the close frame might not be sent.\n        terminateOnDestroy = false;\n        duplex.destroy(err);\n    });\n    ws.once(\"close\", function close() {\n        if (duplex.destroyed) return;\n        duplex.push(null);\n    });\n    duplex._destroy = function(err, callback) {\n        if (ws.readyState === ws.CLOSED) {\n            callback(err);\n            process.nextTick(emitClose, duplex);\n            return;\n        }\n        let called = false;\n        ws.once(\"error\", function error(err) {\n            called = true;\n            callback(err);\n        });\n        ws.once(\"close\", function close() {\n            if (!called) callback(err);\n            process.nextTick(emitClose, duplex);\n        });\n        if (terminateOnDestroy) ws.terminate();\n    };\n    duplex._final = function(callback) {\n        if (ws.readyState === ws.CONNECTING) {\n            ws.once(\"open\", function open() {\n                duplex._final(callback);\n            });\n            return;\n        }\n        // If the value of the `_socket` property is `null` it means that `ws` is a\n        // client websocket and the handshake failed. In fact, when this happens, a\n        // socket is never assigned to the websocket. Wait for the `'error'` event\n        // that will be emitted by the websocket.\n        if (ws._socket === null) return;\n        if (ws._socket._writableState.finished) {\n            callback();\n            if (duplex._readableState.endEmitted) duplex.destroy();\n        } else {\n            ws._socket.once(\"finish\", function finish() {\n                // `duplex` is not destroyed here because the `'end'` event will be\n                // emitted on `duplex` after this `'finish'` event. The EOF signaling\n                // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n                callback();\n            });\n            ws.close();\n        }\n    };\n    duplex._read = function() {\n        if ((ws.readyState === ws.OPEN || ws.readyState === ws.CLOSING) && !resumeOnReceiverDrain) {\n            resumeOnReceiverDrain = true;\n            if (!ws._receiver._writableState.needDrain) ws._socket.resume();\n        }\n    };\n    duplex._write = function(chunk, encoding, callback) {\n        if (ws.readyState === ws.CONNECTING) {\n            ws.once(\"open\", function open() {\n                duplex._write(chunk, encoding, callback);\n            });\n            return;\n        }\n        ws.send(chunk, callback);\n    };\n    duplex.on(\"end\", duplexOnEnd);\n    duplex.on(\"error\", duplexOnError);\n    return duplex;\n}\nmodule.exports = createWebSocketStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/validation.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/validation.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */ function isValidStatusCode(code) {\n    return code >= 1000 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3000 && code <= 4999;\n}\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */ function _isValidUTF8(buf) {\n    const len = buf.length;\n    let i = 0;\n    while(i < len){\n        if ((buf[i] & 0x80) === 0) {\n            // 0xxxxxxx\n            i++;\n        } else if ((buf[i] & 0xe0) === 0xc0) {\n            // 110xxxxx 10xxxxxx\n            if (i + 1 === len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i] & 0xfe) === 0xc0 // Overlong\n            ) {\n                return false;\n            }\n            i += 2;\n        } else if ((buf[i] & 0xf0) === 0xe0) {\n            // 1110xxxx 10xxxxxx 10xxxxxx\n            if (i + 2 >= len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i + 2] & 0xc0) !== 0x80 || buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80 || // Overlong\n            buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0 // Surrogate (U+D800 - U+DFFF)\n            ) {\n                return false;\n            }\n            i += 3;\n        } else if ((buf[i] & 0xf8) === 0xf0) {\n            // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n            if (i + 3 >= len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i + 2] & 0xc0) !== 0x80 || (buf[i + 3] & 0xc0) !== 0x80 || buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80 || // Overlong\n            buf[i] === 0xf4 && buf[i + 1] > 0x8f || buf[i] > 0xf4 // > U+10FFFF\n            ) {\n                return false;\n            }\n            i += 4;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\ntry {\n    let isValidUTF8 = __webpack_require__(/*! utf-8-validate */ \"(ssr)/./node_modules/utf-8-validate/index.js\");\n    /* istanbul ignore if */ if (typeof isValidUTF8 === \"object\") {\n        isValidUTF8 = isValidUTF8.Validation.isValidUTF8; // utf-8-validate@<3.0.0\n    }\n    module.exports = {\n        isValidStatusCode,\n        isValidUTF8 (buf) {\n            return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);\n        }\n    };\n} catch (e) /* istanbul ignore next */ {\n    module.exports = {\n        isValidStatusCode,\n        isValidUTF8: _isValidUTF8\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvdmFsaWRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNBLGtCQUFrQkMsSUFBSTtJQUM3QixPQUNFLFFBQVMsUUFDUEEsUUFBUSxRQUNSQSxTQUFTLFFBQ1RBLFNBQVMsUUFDVEEsU0FBUyxRQUNWQSxRQUFRLFFBQVFBLFFBQVE7QUFFN0I7QUFFQTs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNDLGFBQWFDLEdBQUc7SUFDdkIsTUFBTUMsTUFBTUQsSUFBSUUsTUFBTTtJQUN0QixJQUFJQyxJQUFJO0lBRVIsTUFBT0EsSUFBSUYsSUFBSztRQUNkLElBQUksQ0FBQ0QsR0FBRyxDQUFDRyxFQUFFLEdBQUcsSUFBRyxNQUFPLEdBQUc7WUFDekIsV0FBVztZQUNYQTtRQUNGLE9BQU8sSUFBSSxDQUFDSCxHQUFHLENBQUNHLEVBQUUsR0FBRyxJQUFHLE1BQU8sTUFBTTtZQUNuQyxvQkFBb0I7WUFDcEIsSUFDRUEsSUFBSSxNQUFNRixPQUNWLENBQUNELEdBQUcsQ0FBQ0csSUFBSSxFQUFFLEdBQUcsSUFBRyxNQUFPLFFBQ3hCLENBQUNILEdBQUcsQ0FBQ0csRUFBRSxHQUFHLElBQUcsTUFBTyxLQUFLLFdBQVc7Y0FDcEM7Z0JBQ0EsT0FBTztZQUNUO1lBRUFBLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDRyxFQUFFLEdBQUcsSUFBRyxNQUFPLE1BQU07WUFDbkMsNkJBQTZCO1lBQzdCLElBQ0VBLElBQUksS0FBS0YsT0FDVCxDQUFDRCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUN4QixDQUFDSCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUN2QkgsR0FBRyxDQUFDRyxFQUFFLEtBQUssUUFBUSxDQUFDSCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUFTLFdBQVc7WUFDL0RILEdBQUcsQ0FBQ0csRUFBRSxLQUFLLFFBQVEsQ0FBQ0gsR0FBRyxDQUFDRyxJQUFJLEVBQUUsR0FBRyxJQUFHLE1BQU8sS0FBTSw4QkFBOEI7Y0FDaEY7Z0JBQ0EsT0FBTztZQUNUO1lBRUFBLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDRyxFQUFFLEdBQUcsSUFBRyxNQUFPLE1BQU07WUFDbkMsc0NBQXNDO1lBQ3RDLElBQ0VBLElBQUksS0FBS0YsT0FDVCxDQUFDRCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUN4QixDQUFDSCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUN4QixDQUFDSCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUN2QkgsR0FBRyxDQUFDRyxFQUFFLEtBQUssUUFBUSxDQUFDSCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUFTLFdBQVc7WUFDL0RILEdBQUcsQ0FBQ0csRUFBRSxLQUFLLFFBQVFILEdBQUcsQ0FBQ0csSUFBSSxFQUFFLEdBQUcsUUFDakNILEdBQUcsQ0FBQ0csRUFBRSxHQUFHLEtBQUssYUFBYTtjQUMzQjtnQkFDQSxPQUFPO1lBQ1Q7WUFFQUEsS0FBSztRQUNQLE9BQU87WUFDTCxPQUFPO1FBQ1Q7SUFDRjtJQUVBLE9BQU87QUFDVDtBQUVBLElBQUk7SUFDRixJQUFJQyxjQUFjQyxtQkFBT0EsQ0FBQztJQUUxQixzQkFBc0IsR0FDdEIsSUFBSSxPQUFPRCxnQkFBZ0IsVUFBVTtRQUNuQ0EsY0FBY0EsWUFBWUUsVUFBVSxDQUFDRixXQUFXLEVBQUUsd0JBQXdCO0lBQzVFO0lBRUFHLE9BQU9DLE9BQU8sR0FBRztRQUNmWDtRQUNBTyxhQUFZSixHQUFHO1lBQ2IsT0FBT0EsSUFBSUUsTUFBTSxHQUFHLE1BQU1ILGFBQWFDLE9BQU9JLFlBQVlKO1FBQzVEO0lBQ0Y7QUFDRixFQUFFLE9BQU9TLEdBQUcsd0JBQXdCLEdBQUc7SUFDckNGLE9BQU9DLE9BQU8sR0FBRztRQUNmWDtRQUNBTyxhQUFhTDtJQUNmO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvdmFsaWRhdGlvbi5qcz8xMTcxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdGF0dXMgY29kZSBpcyBhbGxvd2VkIGluIGEgY2xvc2UgZnJhbWUuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGNvZGUgVGhlIHN0YXR1cyBjb2RlXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIHN0YXR1cyBjb2RlIGlzIHZhbGlkLCBlbHNlIGBmYWxzZWBcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gaXNWYWxpZFN0YXR1c0NvZGUoY29kZSkge1xuICByZXR1cm4gKFxuICAgIChjb2RlID49IDEwMDAgJiZcbiAgICAgIGNvZGUgPD0gMTAxNCAmJlxuICAgICAgY29kZSAhPT0gMTAwNCAmJlxuICAgICAgY29kZSAhPT0gMTAwNSAmJlxuICAgICAgY29kZSAhPT0gMTAwNikgfHxcbiAgICAoY29kZSA+PSAzMDAwICYmIGNvZGUgPD0gNDk5OSlcbiAgKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBidWZmZXIgY29udGFpbnMgb25seSBjb3JyZWN0IFVURi04LlxuICogUG9ydGVkIGZyb20gaHR0cHM6Ly93d3cuY2wuY2FtLmFjLnVrLyU3RW1nazI1L3Vjcy91dGY4X2NoZWNrLmMgYnlcbiAqIE1hcmt1cyBLdWhuLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWYgVGhlIGJ1ZmZlciB0byBjaGVja1xuICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIGBidWZgIGNvbnRhaW5zIG9ubHkgY29ycmVjdCBVVEYtOCwgZWxzZSBgZmFsc2VgXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIF9pc1ZhbGlkVVRGOChidWYpIHtcbiAgY29uc3QgbGVuID0gYnVmLmxlbmd0aDtcbiAgbGV0IGkgPSAwO1xuXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgaWYgKChidWZbaV0gJiAweDgwKSA9PT0gMCkge1xuICAgICAgLy8gMHh4eHh4eHhcbiAgICAgIGkrKztcbiAgICB9IGVsc2UgaWYgKChidWZbaV0gJiAweGUwKSA9PT0gMHhjMCkge1xuICAgICAgLy8gMTEweHh4eHggMTB4eHh4eHhcbiAgICAgIGlmIChcbiAgICAgICAgaSArIDEgPT09IGxlbiB8fFxuICAgICAgICAoYnVmW2kgKyAxXSAmIDB4YzApICE9PSAweDgwIHx8XG4gICAgICAgIChidWZbaV0gJiAweGZlKSA9PT0gMHhjMCAvLyBPdmVybG9uZ1xuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaSArPSAyO1xuICAgIH0gZWxzZSBpZiAoKGJ1ZltpXSAmIDB4ZjApID09PSAweGUwKSB7XG4gICAgICAvLyAxMTEweHh4eCAxMHh4eHh4eCAxMHh4eHh4eFxuICAgICAgaWYgKFxuICAgICAgICBpICsgMiA+PSBsZW4gfHxcbiAgICAgICAgKGJ1ZltpICsgMV0gJiAweGMwKSAhPT0gMHg4MCB8fFxuICAgICAgICAoYnVmW2kgKyAyXSAmIDB4YzApICE9PSAweDgwIHx8XG4gICAgICAgIChidWZbaV0gPT09IDB4ZTAgJiYgKGJ1ZltpICsgMV0gJiAweGUwKSA9PT0gMHg4MCkgfHwgLy8gT3ZlcmxvbmdcbiAgICAgICAgKGJ1ZltpXSA9PT0gMHhlZCAmJiAoYnVmW2kgKyAxXSAmIDB4ZTApID09PSAweGEwKSAvLyBTdXJyb2dhdGUgKFUrRDgwMCAtIFUrREZGRilcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMztcbiAgICB9IGVsc2UgaWYgKChidWZbaV0gJiAweGY4KSA9PT0gMHhmMCkge1xuICAgICAgLy8gMTExMTB4eHggMTB4eHh4eHggMTB4eHh4eHggMTB4eHh4eHhcbiAgICAgIGlmIChcbiAgICAgICAgaSArIDMgPj0gbGVuIHx8XG4gICAgICAgIChidWZbaSArIDFdICYgMHhjMCkgIT09IDB4ODAgfHxcbiAgICAgICAgKGJ1ZltpICsgMl0gJiAweGMwKSAhPT0gMHg4MCB8fFxuICAgICAgICAoYnVmW2kgKyAzXSAmIDB4YzApICE9PSAweDgwIHx8XG4gICAgICAgIChidWZbaV0gPT09IDB4ZjAgJiYgKGJ1ZltpICsgMV0gJiAweGYwKSA9PT0gMHg4MCkgfHwgLy8gT3ZlcmxvbmdcbiAgICAgICAgKGJ1ZltpXSA9PT0gMHhmNCAmJiBidWZbaSArIDFdID4gMHg4ZikgfHxcbiAgICAgICAgYnVmW2ldID4gMHhmNCAvLyA+IFUrMTBGRkZGXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpICs9IDQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxudHJ5IHtcbiAgbGV0IGlzVmFsaWRVVEY4ID0gcmVxdWlyZSgndXRmLTgtdmFsaWRhdGUnKTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpc1ZhbGlkVVRGOCA9PT0gJ29iamVjdCcpIHtcbiAgICBpc1ZhbGlkVVRGOCA9IGlzVmFsaWRVVEY4LlZhbGlkYXRpb24uaXNWYWxpZFVURjg7IC8vIHV0Zi04LXZhbGlkYXRlQDwzLjAuMFxuICB9XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaXNWYWxpZFN0YXR1c0NvZGUsXG4gICAgaXNWYWxpZFVURjgoYnVmKSB7XG4gICAgICByZXR1cm4gYnVmLmxlbmd0aCA8IDE1MCA/IF9pc1ZhbGlkVVRGOChidWYpIDogaXNWYWxpZFVURjgoYnVmKTtcbiAgICB9XG4gIH07XG59IGNhdGNoIChlKSAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGlzVmFsaWRTdGF0dXNDb2RlLFxuICAgIGlzVmFsaWRVVEY4OiBfaXNWYWxpZFVURjhcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJpc1ZhbGlkU3RhdHVzQ29kZSIsImNvZGUiLCJfaXNWYWxpZFVURjgiLCJidWYiLCJsZW4iLCJsZW5ndGgiLCJpIiwiaXNWYWxpZFVURjgiLCJyZXF1aXJlIiwiVmFsaWRhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/validation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket-server.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket-server.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */ \nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { createHash } = __webpack_require__(/*! crypto */ \"crypto\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js\");\nconst WebSocket = __webpack_require__(/*! ./websocket */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket.js\");\nconst { format, parse } = __webpack_require__(/*! ./extension */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/extension.js\");\nconst { GUID, kWebSocket } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */ class WebSocketServer extends EventEmitter {\n    /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [callback] A listener for the `listening` event\n   */ constructor(options, callback){\n        super();\n        options = {\n            maxPayload: 100 * 1024 * 1024,\n            perMessageDeflate: false,\n            handleProtocols: null,\n            clientTracking: true,\n            verifyClient: null,\n            noServer: false,\n            backlog: null,\n            server: null,\n            host: null,\n            path: null,\n            port: null,\n            ...options\n        };\n        if (options.port == null && !options.server && !options.noServer || options.port != null && (options.server || options.noServer) || options.server && options.noServer) {\n            throw new TypeError('One and only one of the \"port\", \"server\", or \"noServer\" options ' + \"must be specified\");\n        }\n        if (options.port != null) {\n            this._server = http.createServer((req, res)=>{\n                const body = http.STATUS_CODES[426];\n                res.writeHead(426, {\n                    \"Content-Length\": body.length,\n                    \"Content-Type\": \"text/plain\"\n                });\n                res.end(body);\n            });\n            this._server.listen(options.port, options.host, options.backlog, callback);\n        } else if (options.server) {\n            this._server = options.server;\n        }\n        if (this._server) {\n            const emitConnection = this.emit.bind(this, \"connection\");\n            this._removeListeners = addListeners(this._server, {\n                listening: this.emit.bind(this, \"listening\"),\n                error: this.emit.bind(this, \"error\"),\n                upgrade: (req, socket, head)=>{\n                    this.handleUpgrade(req, socket, head, emitConnection);\n                }\n            });\n        }\n        if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n        if (options.clientTracking) this.clients = new Set();\n        this.options = options;\n        this._state = RUNNING;\n    }\n    /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */ address() {\n        if (this.options.noServer) {\n            throw new Error('The server is operating in \"noServer\" mode');\n        }\n        if (!this._server) return null;\n        return this._server.address();\n    }\n    /**\n   * Close the server.\n   *\n   * @param {Function} [cb] Callback\n   * @public\n   */ close(cb) {\n        if (cb) this.once(\"close\", cb);\n        if (this._state === CLOSED) {\n            process.nextTick(emitClose, this);\n            return;\n        }\n        if (this._state === CLOSING) return;\n        this._state = CLOSING;\n        //\n        // Terminate all associated clients.\n        //\n        if (this.clients) {\n            for (const client of this.clients)client.terminate();\n        }\n        const server = this._server;\n        if (server) {\n            this._removeListeners();\n            this._removeListeners = this._server = null;\n            //\n            // Close the http server if it was internally created.\n            //\n            if (this.options.port != null) {\n                server.close(emitClose.bind(undefined, this));\n                return;\n            }\n        }\n        process.nextTick(emitClose, this);\n    }\n    /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */ shouldHandle(req) {\n        if (this.options.path) {\n            const index = req.url.indexOf(\"?\");\n            const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n            if (pathname !== this.options.path) return false;\n        }\n        return true;\n    }\n    /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */ handleUpgrade(req, socket, head, cb) {\n        socket.on(\"error\", socketOnError);\n        const key = req.headers[\"sec-websocket-key\"] !== undefined ? req.headers[\"sec-websocket-key\"].trim() : false;\n        const upgrade = req.headers.upgrade;\n        const version = +req.headers[\"sec-websocket-version\"];\n        const extensions = {};\n        if (req.method !== \"GET\" || upgrade === undefined || upgrade.toLowerCase() !== \"websocket\" || !key || !keyRegex.test(key) || version !== 8 && version !== 13 || !this.shouldHandle(req)) {\n            return abortHandshake(socket, 400);\n        }\n        if (this.options.perMessageDeflate) {\n            const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);\n            try {\n                const offers = parse(req.headers[\"sec-websocket-extensions\"]);\n                if (offers[PerMessageDeflate.extensionName]) {\n                    perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n                    extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n                }\n            } catch (err) {\n                return abortHandshake(socket, 400);\n            }\n        }\n        //\n        // Optionally call external client verification handler.\n        //\n        if (this.options.verifyClient) {\n            const info = {\n                origin: req.headers[`${version === 8 ? \"sec-websocket-origin\" : \"origin\"}`],\n                secure: !!(req.socket.authorized || req.socket.encrypted),\n                req\n            };\n            if (this.options.verifyClient.length === 2) {\n                this.options.verifyClient(info, (verified, code, message, headers)=>{\n                    if (!verified) {\n                        return abortHandshake(socket, code || 401, message, headers);\n                    }\n                    this.completeUpgrade(key, extensions, req, socket, head, cb);\n                });\n                return;\n            }\n            if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n        }\n        this.completeUpgrade(key, extensions, req, socket, head, cb);\n    }\n    /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Object} extensions The accepted extensions\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */ completeUpgrade(key, extensions, req, socket, head, cb) {\n        //\n        // Destroy the socket if the client has already sent a FIN packet.\n        //\n        if (!socket.readable || !socket.writable) return socket.destroy();\n        if (socket[kWebSocket]) {\n            throw new Error(\"server.handleUpgrade() was called more than once with the same \" + \"socket, possibly due to a misconfiguration\");\n        }\n        if (this._state > RUNNING) return abortHandshake(socket, 503);\n        const digest = createHash(\"sha1\").update(key + GUID).digest(\"base64\");\n        const headers = [\n            \"HTTP/1.1 101 Switching Protocols\",\n            \"Upgrade: websocket\",\n            \"Connection: Upgrade\",\n            `Sec-WebSocket-Accept: ${digest}`\n        ];\n        const ws = new WebSocket(null);\n        let protocol = req.headers[\"sec-websocket-protocol\"];\n        if (protocol) {\n            protocol = protocol.split(\",\").map(trim);\n            //\n            // Optionally call external protocol selection handler.\n            //\n            if (this.options.handleProtocols) {\n                protocol = this.options.handleProtocols(protocol, req);\n            } else {\n                protocol = protocol[0];\n            }\n            if (protocol) {\n                headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n                ws._protocol = protocol;\n            }\n        }\n        if (extensions[PerMessageDeflate.extensionName]) {\n            const params = extensions[PerMessageDeflate.extensionName].params;\n            const value = format({\n                [PerMessageDeflate.extensionName]: [\n                    params\n                ]\n            });\n            headers.push(`Sec-WebSocket-Extensions: ${value}`);\n            ws._extensions = extensions;\n        }\n        //\n        // Allow external modification/inspection of handshake headers.\n        //\n        this.emit(\"headers\", headers, req);\n        socket.write(headers.concat(\"\\r\\n\").join(\"\\r\\n\"));\n        socket.removeListener(\"error\", socketOnError);\n        ws.setSocket(socket, head, this.options.maxPayload);\n        if (this.clients) {\n            this.clients.add(ws);\n            ws.on(\"close\", ()=>this.clients.delete(ws));\n        }\n        cb(ws, req);\n    }\n}\nmodule.exports = WebSocketServer;\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */ function addListeners(server, map) {\n    for (const event of Object.keys(map))server.on(event, map[event]);\n    return function removeListeners() {\n        for (const event of Object.keys(map)){\n            server.removeListener(event, map[event]);\n        }\n    };\n}\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */ function emitClose(server) {\n    server._state = CLOSED;\n    server.emit(\"close\");\n}\n/**\n * Handle premature socket errors.\n *\n * @private\n */ function socketOnError() {\n    this.destroy();\n}\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */ function abortHandshake(socket, code, message, headers) {\n    if (socket.writable) {\n        message = message || http.STATUS_CODES[code];\n        headers = {\n            Connection: \"close\",\n            \"Content-Type\": \"text/html\",\n            \"Content-Length\": Buffer.byteLength(message),\n            ...headers\n        };\n        socket.write(`HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` + Object.keys(headers).map((h)=>`${h}: ${headers[h]}`).join(\"\\r\\n\") + \"\\r\\n\\r\\n\" + message);\n    }\n    socket.removeListener(\"error\", socketOnError);\n    socket.destroy();\n}\n/**\n * Remove whitespace characters from both ends of a string.\n *\n * @param {String} str The string\n * @return {String} A new string representing `str` stripped of whitespace\n *     characters from both its beginning and end\n * @private\n */ function trim(str) {\n    return str.trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket-server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */ \nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { randomBytes, createHash } = __webpack_require__(/*! crypto */ \"crypto\");\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\nconst { URL } = __webpack_require__(/*! url */ \"url\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js\");\nconst Receiver = __webpack_require__(/*! ./receiver */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/receiver.js\");\nconst Sender = __webpack_require__(/*! ./sender */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/sender.js\");\nconst { BINARY_TYPES, EMPTY_BUFFER, GUID, kStatusCode, kWebSocket, NOOP } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\nconst { addEventListener, removeEventListener } = __webpack_require__(/*! ./event-target */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/event-target.js\");\nconst { format, parse } = __webpack_require__(/*! ./extension */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/extension.js\");\nconst { toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js\");\nconst readyStates = [\n    \"CONNECTING\",\n    \"OPEN\",\n    \"CLOSING\",\n    \"CLOSED\"\n];\nconst protocolVersions = [\n    8,\n    13\n];\nconst closeTimeout = 30 * 1000;\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */ class WebSocket extends EventEmitter {\n    /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */ constructor(address, protocols, options){\n        super();\n        this._binaryType = BINARY_TYPES[0];\n        this._closeCode = 1006;\n        this._closeFrameReceived = false;\n        this._closeFrameSent = false;\n        this._closeMessage = \"\";\n        this._closeTimer = null;\n        this._extensions = {};\n        this._protocol = \"\";\n        this._readyState = WebSocket.CONNECTING;\n        this._receiver = null;\n        this._sender = null;\n        this._socket = null;\n        if (address !== null) {\n            this._bufferedAmount = 0;\n            this._isServer = false;\n            this._redirects = 0;\n            if (Array.isArray(protocols)) {\n                protocols = protocols.join(\", \");\n            } else if (typeof protocols === \"object\" && protocols !== null) {\n                options = protocols;\n                protocols = undefined;\n            }\n            initAsClient(this, address, protocols, options);\n        } else {\n            this._isServer = true;\n        }\n    }\n    /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */ get binaryType() {\n        return this._binaryType;\n    }\n    set binaryType(type) {\n        if (!BINARY_TYPES.includes(type)) return;\n        this._binaryType = type;\n        //\n        // Allow to change `binaryType` on the fly.\n        //\n        if (this._receiver) this._receiver._binaryType = type;\n    }\n    /**\n   * @type {Number}\n   */ get bufferedAmount() {\n        if (!this._socket) return this._bufferedAmount;\n        return this._socket._writableState.length + this._sender._bufferedBytes;\n    }\n    /**\n   * @type {String}\n   */ get extensions() {\n        return Object.keys(this._extensions).join();\n    }\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onclose() {\n        return undefined;\n    }\n    /* istanbul ignore next */ set onclose(listener) {}\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onerror() {\n        return undefined;\n    }\n    /* istanbul ignore next */ set onerror(listener) {}\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onopen() {\n        return undefined;\n    }\n    /* istanbul ignore next */ set onopen(listener) {}\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onmessage() {\n        return undefined;\n    }\n    /* istanbul ignore next */ set onmessage(listener) {}\n    /**\n   * @type {String}\n   */ get protocol() {\n        return this._protocol;\n    }\n    /**\n   * @type {Number}\n   */ get readyState() {\n        return this._readyState;\n    }\n    /**\n   * @type {String}\n   */ get url() {\n        return this._url;\n    }\n    /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Number} [maxPayload=0] The maximum allowed message size\n   * @private\n   */ setSocket(socket, head, maxPayload) {\n        const receiver = new Receiver(this.binaryType, this._extensions, this._isServer, maxPayload);\n        this._sender = new Sender(socket, this._extensions);\n        this._receiver = receiver;\n        this._socket = socket;\n        receiver[kWebSocket] = this;\n        socket[kWebSocket] = this;\n        receiver.on(\"conclude\", receiverOnConclude);\n        receiver.on(\"drain\", receiverOnDrain);\n        receiver.on(\"error\", receiverOnError);\n        receiver.on(\"message\", receiverOnMessage);\n        receiver.on(\"ping\", receiverOnPing);\n        receiver.on(\"pong\", receiverOnPong);\n        socket.setTimeout(0);\n        socket.setNoDelay();\n        if (head.length > 0) socket.unshift(head);\n        socket.on(\"close\", socketOnClose);\n        socket.on(\"data\", socketOnData);\n        socket.on(\"end\", socketOnEnd);\n        socket.on(\"error\", socketOnError);\n        this._readyState = WebSocket.OPEN;\n        this.emit(\"open\");\n    }\n    /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */ emitClose() {\n        if (!this._socket) {\n            this._readyState = WebSocket.CLOSED;\n            this.emit(\"close\", this._closeCode, this._closeMessage);\n            return;\n        }\n        if (this._extensions[PerMessageDeflate.extensionName]) {\n            this._extensions[PerMessageDeflate.extensionName].cleanup();\n        }\n        this._receiver.removeAllListeners();\n        this._readyState = WebSocket.CLOSED;\n        this.emit(\"close\", this._closeCode, this._closeMessage);\n    }\n    /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {String} [data] A string explaining why the connection is closing\n   * @public\n   */ close(code, data) {\n        if (this.readyState === WebSocket.CLOSED) return;\n        if (this.readyState === WebSocket.CONNECTING) {\n            const msg = \"WebSocket was closed before the connection was established\";\n            return abortHandshake(this, this._req, msg);\n        }\n        if (this.readyState === WebSocket.CLOSING) {\n            if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {\n                this._socket.end();\n            }\n            return;\n        }\n        this._readyState = WebSocket.CLOSING;\n        this._sender.close(code, data, !this._isServer, (err)=>{\n            //\n            // This error is handled by the `'error'` listener on the socket. We only\n            // want to know if the close frame has been sent here.\n            //\n            if (err) return;\n            this._closeFrameSent = true;\n            if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {\n                this._socket.end();\n            }\n        });\n        //\n        // Specify a timeout for the closing handshake to complete.\n        //\n        this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), closeTimeout);\n    }\n    /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */ ping(data, mask, cb) {\n        if (this.readyState === WebSocket.CONNECTING) {\n            throw new Error(\"WebSocket is not open: readyState 0 (CONNECTING)\");\n        }\n        if (typeof data === \"function\") {\n            cb = data;\n            data = mask = undefined;\n        } else if (typeof mask === \"function\") {\n            cb = mask;\n            mask = undefined;\n        }\n        if (typeof data === \"number\") data = data.toString();\n        if (this.readyState !== WebSocket.OPEN) {\n            sendAfterClose(this, data, cb);\n            return;\n        }\n        if (mask === undefined) mask = !this._isServer;\n        this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n    }\n    /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */ pong(data, mask, cb) {\n        if (this.readyState === WebSocket.CONNECTING) {\n            throw new Error(\"WebSocket is not open: readyState 0 (CONNECTING)\");\n        }\n        if (typeof data === \"function\") {\n            cb = data;\n            data = mask = undefined;\n        } else if (typeof mask === \"function\") {\n            cb = mask;\n            mask = undefined;\n        }\n        if (typeof data === \"number\") data = data.toString();\n        if (this.readyState !== WebSocket.OPEN) {\n            sendAfterClose(this, data, cb);\n            return;\n        }\n        if (mask === undefined) mask = !this._isServer;\n        this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n    }\n    /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */ send(data, options, cb) {\n        if (this.readyState === WebSocket.CONNECTING) {\n            throw new Error(\"WebSocket is not open: readyState 0 (CONNECTING)\");\n        }\n        if (typeof options === \"function\") {\n            cb = options;\n            options = {};\n        }\n        if (typeof data === \"number\") data = data.toString();\n        if (this.readyState !== WebSocket.OPEN) {\n            sendAfterClose(this, data, cb);\n            return;\n        }\n        const opts = {\n            binary: typeof data !== \"string\",\n            mask: !this._isServer,\n            compress: true,\n            fin: true,\n            ...options\n        };\n        if (!this._extensions[PerMessageDeflate.extensionName]) {\n            opts.compress = false;\n        }\n        this._sender.send(data || EMPTY_BUFFER, opts, cb);\n    }\n    /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */ terminate() {\n        if (this.readyState === WebSocket.CLOSED) return;\n        if (this.readyState === WebSocket.CONNECTING) {\n            const msg = \"WebSocket was closed before the connection was established\";\n            return abortHandshake(this, this._req, msg);\n        }\n        if (this._socket) {\n            this._readyState = WebSocket.CLOSING;\n            this._socket.destroy();\n        }\n    }\n}\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"CONNECTING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CONNECTING\")\n});\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"CONNECTING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CONNECTING\")\n});\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"OPEN\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"OPEN\")\n});\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"OPEN\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"OPEN\")\n});\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"CLOSING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSING\")\n});\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"CLOSING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSING\")\n});\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"CLOSED\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSED\")\n});\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"CLOSED\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSED\")\n});\n[\n    \"binaryType\",\n    \"bufferedAmount\",\n    \"extensions\",\n    \"protocol\",\n    \"readyState\",\n    \"url\"\n].forEach((property)=>{\n    Object.defineProperty(WebSocket.prototype, property, {\n        enumerable: true\n    });\n});\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n[\n    \"open\",\n    \"error\",\n    \"close\",\n    \"message\"\n].forEach((method)=>{\n    Object.defineProperty(WebSocket.prototype, `on${method}`, {\n        enumerable: true,\n        get () {\n            const listeners = this.listeners(method);\n            for(let i = 0; i < listeners.length; i++){\n                if (listeners[i]._listener) return listeners[i]._listener;\n            }\n            return undefined;\n        },\n        set (listener) {\n            const listeners = this.listeners(method);\n            for(let i = 0; i < listeners.length; i++){\n                //\n                // Remove only the listeners added via `addEventListener`.\n                //\n                if (listeners[i]._listener) this.removeListener(method, listeners[i]);\n            }\n            this.addEventListener(method, listener);\n        }\n    });\n});\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\nmodule.exports = WebSocket;\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {String} [protocols] The subprotocols\n * @param {Object} [options] Connection options\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @private\n */ function initAsClient(websocket, address, protocols, options) {\n    const opts = {\n        protocolVersion: protocolVersions[1],\n        maxPayload: 100 * 1024 * 1024,\n        perMessageDeflate: true,\n        followRedirects: false,\n        maxRedirects: 10,\n        ...options,\n        createConnection: undefined,\n        socketPath: undefined,\n        hostname: undefined,\n        protocol: undefined,\n        timeout: undefined,\n        method: undefined,\n        host: undefined,\n        path: undefined,\n        port: undefined\n    };\n    if (!protocolVersions.includes(opts.protocolVersion)) {\n        throw new RangeError(`Unsupported protocol version: ${opts.protocolVersion} ` + `(supported versions: ${protocolVersions.join(\", \")})`);\n    }\n    let parsedUrl;\n    if (address instanceof URL) {\n        parsedUrl = address;\n        websocket._url = address.href;\n    } else {\n        parsedUrl = new URL(address);\n        websocket._url = address;\n    }\n    const isUnixSocket = parsedUrl.protocol === \"ws+unix:\";\n    if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {\n        const err = new Error(`Invalid URL: ${websocket.url}`);\n        if (websocket._redirects === 0) {\n            throw err;\n        } else {\n            emitErrorAndClose(websocket, err);\n            return;\n        }\n    }\n    const isSecure = parsedUrl.protocol === \"wss:\" || parsedUrl.protocol === \"https:\";\n    const defaultPort = isSecure ? 443 : 80;\n    const key = randomBytes(16).toString(\"base64\");\n    const get = isSecure ? https.get : http.get;\n    let perMessageDeflate;\n    opts.createConnection = isSecure ? tlsConnect : netConnect;\n    opts.defaultPort = opts.defaultPort || defaultPort;\n    opts.port = parsedUrl.port || defaultPort;\n    opts.host = parsedUrl.hostname.startsWith(\"[\") ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;\n    opts.headers = {\n        \"Sec-WebSocket-Version\": opts.protocolVersion,\n        \"Sec-WebSocket-Key\": key,\n        Connection: \"Upgrade\",\n        Upgrade: \"websocket\",\n        ...opts.headers\n    };\n    opts.path = parsedUrl.pathname + parsedUrl.search;\n    opts.timeout = opts.handshakeTimeout;\n    if (opts.perMessageDeflate) {\n        perMessageDeflate = new PerMessageDeflate(opts.perMessageDeflate !== true ? opts.perMessageDeflate : {}, false, opts.maxPayload);\n        opts.headers[\"Sec-WebSocket-Extensions\"] = format({\n            [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n        });\n    }\n    if (protocols) {\n        opts.headers[\"Sec-WebSocket-Protocol\"] = protocols;\n    }\n    if (opts.origin) {\n        if (opts.protocolVersion < 13) {\n            opts.headers[\"Sec-WebSocket-Origin\"] = opts.origin;\n        } else {\n            opts.headers.Origin = opts.origin;\n        }\n    }\n    if (parsedUrl.username || parsedUrl.password) {\n        opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n    }\n    if (isUnixSocket) {\n        const parts = opts.path.split(\":\");\n        opts.socketPath = parts[0];\n        opts.path = parts[1];\n    }\n    if (opts.followRedirects) {\n        if (websocket._redirects === 0) {\n            websocket._originalUnixSocket = isUnixSocket;\n            websocket._originalSecure = isSecure;\n            websocket._originalHostOrSocketPath = isUnixSocket ? opts.socketPath : parsedUrl.host;\n            const headers = options && options.headers;\n            //\n            // Shallow copy the user provided options so that headers can be changed\n            // without mutating the original object.\n            //\n            options = {\n                ...options,\n                headers: {}\n            };\n            if (headers) {\n                for (const [key, value] of Object.entries(headers)){\n                    options.headers[key.toLowerCase()] = value;\n                }\n            }\n        } else {\n            const isSameHost = isUnixSocket ? websocket._originalUnixSocket ? opts.socketPath === websocket._originalHostOrSocketPath : false : websocket._originalUnixSocket ? false : parsedUrl.host === websocket._originalHostOrSocketPath;\n            if (!isSameHost || websocket._originalSecure && !isSecure) {\n                //\n                // Match curl 7.77.0 behavior and drop the following headers. These\n                // headers are also dropped when following a redirect to a subdomain.\n                //\n                delete opts.headers.authorization;\n                delete opts.headers.cookie;\n                if (!isSameHost) delete opts.headers.host;\n                opts.auth = undefined;\n            }\n        }\n        //\n        // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n        // If the `Authorization` header is set, then there is nothing to do as it\n        // will take precedence.\n        //\n        if (opts.auth && !options.headers.authorization) {\n            options.headers.authorization = \"Basic \" + Buffer.from(opts.auth).toString(\"base64\");\n        }\n    }\n    let req = websocket._req = get(opts);\n    if (opts.timeout) {\n        req.on(\"timeout\", ()=>{\n            abortHandshake(websocket, req, \"Opening handshake has timed out\");\n        });\n    }\n    req.on(\"error\", (err)=>{\n        if (req === null || req.aborted) return;\n        req = websocket._req = null;\n        emitErrorAndClose(websocket, err);\n    });\n    req.on(\"response\", (res)=>{\n        const location = res.headers.location;\n        const statusCode = res.statusCode;\n        if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {\n            if (++websocket._redirects > opts.maxRedirects) {\n                abortHandshake(websocket, req, \"Maximum redirects exceeded\");\n                return;\n            }\n            req.abort();\n            let addr;\n            try {\n                addr = new URL(location, address);\n            } catch (err) {\n                emitErrorAndClose(websocket, err);\n                return;\n            }\n            initAsClient(websocket, addr, protocols, options);\n        } else if (!websocket.emit(\"unexpected-response\", req, res)) {\n            abortHandshake(websocket, req, `Unexpected server response: ${res.statusCode}`);\n        }\n    });\n    req.on(\"upgrade\", (res, socket, head)=>{\n        websocket.emit(\"upgrade\", res);\n        //\n        // The user may have closed the connection from a listener of the `upgrade`\n        // event.\n        //\n        if (websocket.readyState !== WebSocket.CONNECTING) return;\n        req = websocket._req = null;\n        const upgrade = res.headers.upgrade;\n        if (upgrade === undefined || upgrade.toLowerCase() !== \"websocket\") {\n            abortHandshake(websocket, socket, \"Invalid Upgrade header\");\n            return;\n        }\n        const digest = createHash(\"sha1\").update(key + GUID).digest(\"base64\");\n        if (res.headers[\"sec-websocket-accept\"] !== digest) {\n            abortHandshake(websocket, socket, \"Invalid Sec-WebSocket-Accept header\");\n            return;\n        }\n        const serverProt = res.headers[\"sec-websocket-protocol\"];\n        const protList = (protocols || \"\").split(/, */);\n        let protError;\n        if (!protocols && serverProt) {\n            protError = \"Server sent a subprotocol but none was requested\";\n        } else if (protocols && !serverProt) {\n            protError = \"Server sent no subprotocol\";\n        } else if (serverProt && !protList.includes(serverProt)) {\n            protError = \"Server sent an invalid subprotocol\";\n        }\n        if (protError) {\n            abortHandshake(websocket, socket, protError);\n            return;\n        }\n        if (serverProt) websocket._protocol = serverProt;\n        const secWebSocketExtensions = res.headers[\"sec-websocket-extensions\"];\n        if (secWebSocketExtensions !== undefined) {\n            if (!perMessageDeflate) {\n                const message = \"Server sent a Sec-WebSocket-Extensions header but no extension \" + \"was requested\";\n                abortHandshake(websocket, socket, message);\n                return;\n            }\n            let extensions;\n            try {\n                extensions = parse(secWebSocketExtensions);\n            } catch (err) {\n                const message = \"Invalid Sec-WebSocket-Extensions header\";\n                abortHandshake(websocket, socket, message);\n                return;\n            }\n            const extensionNames = Object.keys(extensions);\n            if (extensionNames.length) {\n                if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {\n                    const message = \"Server indicated an extension that was not requested\";\n                    abortHandshake(websocket, socket, message);\n                    return;\n                }\n                try {\n                    perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n                } catch (err) {\n                    const message = \"Invalid Sec-WebSocket-Extensions header\";\n                    abortHandshake(websocket, socket, message);\n                    return;\n                }\n                websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n            }\n        }\n        websocket.setSocket(socket, head, opts.maxPayload);\n    });\n}\n/**\n * Emit the `'error'` and `'close'` event.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */ function emitErrorAndClose(websocket, err) {\n    websocket._readyState = WebSocket.CLOSING;\n    websocket.emit(\"error\", err);\n    websocket.emitClose();\n}\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */ function netConnect(options) {\n    options.path = options.socketPath;\n    return net.connect(options);\n}\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */ function tlsConnect(options) {\n    options.path = undefined;\n    if (!options.servername && options.servername !== \"\") {\n        options.servername = net.isIP(options.host) ? \"\" : options.host;\n    }\n    return tls.connect(options);\n}\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */ function abortHandshake(websocket, stream, message) {\n    websocket._readyState = WebSocket.CLOSING;\n    const err = new Error(message);\n    Error.captureStackTrace(err, abortHandshake);\n    if (stream.setHeader) {\n        stream.abort();\n        if (stream.socket && !stream.socket.destroyed) {\n            //\n            // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n            // called after the request completed. See\n            // https://github.com/websockets/ws/issues/1869.\n            //\n            stream.socket.destroy();\n        }\n        stream.once(\"abort\", websocket.emitClose.bind(websocket));\n        websocket.emit(\"error\", err);\n    } else {\n        stream.destroy(err);\n        stream.once(\"error\", websocket.emit.bind(websocket, \"error\"));\n        stream.once(\"close\", websocket.emitClose.bind(websocket));\n    }\n}\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */ function sendAfterClose(websocket, data, cb) {\n    if (data) {\n        const length = toBuffer(data).length;\n        //\n        // The `_bufferedAmount` property is used only when the peer is a client and\n        // the opening handshake fails. Under these circumstances, in fact, the\n        // `setSocket()` method is not called, so the `_socket` and `_sender`\n        // properties are set to `null`.\n        //\n        if (websocket._socket) websocket._sender._bufferedBytes += length;\n        else websocket._bufferedAmount += length;\n    }\n    if (cb) {\n        const err = new Error(`WebSocket is not open: readyState ${websocket.readyState} ` + `(${readyStates[websocket.readyState]})`);\n        cb(err);\n    }\n}\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {String} reason The reason for closing\n * @private\n */ function receiverOnConclude(code, reason) {\n    const websocket = this[kWebSocket];\n    websocket._closeFrameReceived = true;\n    websocket._closeMessage = reason;\n    websocket._closeCode = code;\n    if (websocket._socket[kWebSocket] === undefined) return;\n    websocket._socket.removeListener(\"data\", socketOnData);\n    process.nextTick(resume, websocket._socket);\n    if (code === 1005) websocket.close();\n    else websocket.close(code, reason);\n}\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */ function receiverOnDrain() {\n    this[kWebSocket]._socket.resume();\n}\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */ function receiverOnError(err) {\n    const websocket = this[kWebSocket];\n    if (websocket._socket[kWebSocket] !== undefined) {\n        websocket._socket.removeListener(\"data\", socketOnData);\n        //\n        // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n        // https://github.com/websockets/ws/issues/1940.\n        //\n        process.nextTick(resume, websocket._socket);\n        websocket.close(err[kStatusCode]);\n    }\n    websocket.emit(\"error\", err);\n}\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */ function receiverOnFinish() {\n    this[kWebSocket].emitClose();\n}\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message\n * @private\n */ function receiverOnMessage(data) {\n    this[kWebSocket].emit(\"message\", data);\n}\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */ function receiverOnPing(data) {\n    const websocket = this[kWebSocket];\n    websocket.pong(data, !websocket._isServer, NOOP);\n    websocket.emit(\"ping\", data);\n}\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */ function receiverOnPong(data) {\n    this[kWebSocket].emit(\"pong\", data);\n}\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */ function resume(stream) {\n    stream.resume();\n}\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */ function socketOnClose() {\n    const websocket = this[kWebSocket];\n    this.removeListener(\"close\", socketOnClose);\n    this.removeListener(\"data\", socketOnData);\n    this.removeListener(\"end\", socketOnEnd);\n    websocket._readyState = WebSocket.CLOSING;\n    let chunk;\n    //\n    // The close frame might not have been received or the `'end'` event emitted,\n    // for example, if the socket was destroyed due to an error. Ensure that the\n    // `receiver` stream is closed after writing any remaining buffered data to\n    // it. If the readable side of the socket is in flowing mode then there is no\n    // buffered data as everything has been already written and `readable.read()`\n    // will return `null`. If instead, the socket is paused, any possible buffered\n    // data will be read as a single chunk.\n    //\n    if (!this._readableState.endEmitted && !websocket._closeFrameReceived && !websocket._receiver._writableState.errorEmitted && (chunk = websocket._socket.read()) !== null) {\n        websocket._receiver.write(chunk);\n    }\n    websocket._receiver.end();\n    this[kWebSocket] = undefined;\n    clearTimeout(websocket._closeTimer);\n    if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {\n        websocket.emitClose();\n    } else {\n        websocket._receiver.on(\"error\", receiverOnFinish);\n        websocket._receiver.on(\"finish\", receiverOnFinish);\n    }\n}\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */ function socketOnData(chunk) {\n    if (!this[kWebSocket]._receiver.write(chunk)) {\n        this.pause();\n    }\n}\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */ function socketOnEnd() {\n    const websocket = this[kWebSocket];\n    websocket._readyState = WebSocket.CLOSING;\n    websocket._receiver.end();\n    this.end();\n}\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */ function socketOnError() {\n    const websocket = this[kWebSocket];\n    this.removeListener(\"error\", socketOnError);\n    this.on(\"error\", NOOP);\n    if (websocket) {\n        websocket._readyState = WebSocket.CLOSING;\n        this.destroy();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/keyvaluestorage/dist/index.es.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/keyvaluestorage/dist/index.es.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyValueStorage: () => (/* binding */ h),\n/* harmony export */   \"default\": () => (/* binding */ h)\n/* harmony export */ });\n/* harmony import */ var unstorage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unstorage */ \"(ssr)/./node_modules/unstorage/dist/index.mjs\");\n/* harmony import */ var idb_keyval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! idb-keyval */ \"(ssr)/./node_modules/idb-keyval/dist/index.js\");\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n\n\n\nfunction C(i) {\n    return i;\n}\nconst x = \"idb-keyval\";\nvar z = (i = {})=>{\n    const t = i.base && i.base.length > 0 ? `${i.base}:` : \"\", e = (s)=>t + s;\n    let n;\n    return i.dbName && i.storeName && (n = (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.createStore)(i.dbName, i.storeName)), {\n        name: x,\n        options: i,\n        async hasItem (s) {\n            return !(typeof await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.get)(e(s), n) > \"u\");\n        },\n        async getItem (s) {\n            return await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.get)(e(s), n) ?? null;\n        },\n        setItem (s, a) {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.set)(e(s), a, n);\n        },\n        removeItem (s) {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.del)(e(s), n);\n        },\n        getKeys () {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.keys)(n);\n        },\n        clear () {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.clear)(n);\n        }\n    };\n};\nconst D = \"WALLET_CONNECT_V2_INDEXED_DB\", E = \"keyvaluestorage\";\nclass _ {\n    constructor(){\n        this.indexedDb = (0,unstorage__WEBPACK_IMPORTED_MODULE_2__.createStorage)({\n            driver: z({\n                dbName: D,\n                storeName: E\n            })\n        });\n    }\n    async getKeys() {\n        return this.indexedDb.getKeys();\n    }\n    async getEntries() {\n        return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t)=>[\n                t.key,\n                t.value\n            ]);\n    }\n    async getItem(t) {\n        const e = await this.indexedDb.getItem(t);\n        if (e !== null) return e;\n    }\n    async setItem(t, e) {\n        await this.indexedDb.setItem(t, (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonStringify)(e));\n    }\n    async removeItem(t) {\n        await this.indexedDb.removeItem(t);\n    }\n}\nvar l = typeof globalThis < \"u\" ? globalThis :  false ? 0 : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {}, c = {\n    exports: {}\n};\n(function() {\n    let i;\n    function t() {}\n    i = t, i.prototype.getItem = function(e) {\n        return this.hasOwnProperty(e) ? String(this[e]) : null;\n    }, i.prototype.setItem = function(e, n) {\n        this[e] = String(n);\n    }, i.prototype.removeItem = function(e) {\n        delete this[e];\n    }, i.prototype.clear = function() {\n        const e = this;\n        Object.keys(e).forEach(function(n) {\n            e[n] = void 0, delete e[n];\n        });\n    }, i.prototype.key = function(e) {\n        return e = e || 0, Object.keys(this)[e];\n    }, i.prototype.__defineGetter__(\"length\", function() {\n        return Object.keys(this).length;\n    }), typeof l < \"u\" && l.localStorage ? c.exports = l.localStorage :  false ? 0 : c.exports = new t;\n})();\nfunction k(i) {\n    var t;\n    return [\n        i[0],\n        (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonParse)((t = i[1]) != null ? t : \"\")\n    ];\n}\nclass K {\n    constructor(){\n        this.localStorage = c.exports;\n    }\n    async getKeys() {\n        return Object.keys(this.localStorage);\n    }\n    async getEntries() {\n        return Object.entries(this.localStorage).map(k);\n    }\n    async getItem(t) {\n        const e = this.localStorage.getItem(t);\n        if (e !== null) return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonParse)(e);\n    }\n    async setItem(t, e) {\n        this.localStorage.setItem(t, (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonStringify)(e));\n    }\n    async removeItem(t) {\n        this.localStorage.removeItem(t);\n    }\n}\nconst N = \"wc_storage_version\", y = 1, O = async (i, t, e)=>{\n    const n = N, s = await t.getItem(n);\n    if (s && s >= y) {\n        e(t);\n        return;\n    }\n    const a = await i.getKeys();\n    if (!a.length) {\n        e(t);\n        return;\n    }\n    const m = [];\n    for(; a.length;){\n        const r = a.shift();\n        if (!r) continue;\n        const o = r.toLowerCase();\n        if (o.includes(\"wc@\") || o.includes(\"walletconnect\") || o.includes(\"wc_\") || o.includes(\"wallet_connect\")) {\n            const f = await i.getItem(r);\n            await t.setItem(r, f), m.push(r);\n        }\n    }\n    await t.setItem(n, y), e(t), j(i, m);\n}, j = async (i, t)=>{\n    t.length && t.forEach(async (e)=>{\n        await i.removeItem(e);\n    });\n};\nclass h {\n    constructor(){\n        this.initialized = !1, this.setInitialized = (e)=>{\n            this.storage = e, this.initialized = !0;\n        };\n        const t = new K;\n        this.storage = t;\n        try {\n            const e = new _;\n            O(t, e, this.setInitialized);\n        } catch  {\n            this.initialized = !0;\n        }\n    }\n    async getKeys() {\n        return await this.initialize(), this.storage.getKeys();\n    }\n    async getEntries() {\n        return await this.initialize(), this.storage.getEntries();\n    }\n    async getItem(t) {\n        return await this.initialize(), this.storage.getItem(t);\n    }\n    async setItem(t, e) {\n        return await this.initialize(), this.storage.setItem(t, e);\n    }\n    async removeItem(t) {\n        return await this.initialize(), this.storage.removeItem(t);\n    }\n    async initialize() {\n        this.initialized || await new Promise((t)=>{\n            const e = setInterval(()=>{\n                this.initialized && (clearInterval(e), t());\n            }, 20);\n        });\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/keyvaluestorage/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/logger/dist/index.es.js":
/*!*************************************************************!*\
  !*** ./node_modules/@walletconnect/logger/dist/index.es.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_LOG_SIZE_IN_BYTES_DEFAULT: () => (/* binding */ l),\n/* harmony export */   PINO_CUSTOM_CONTEXT_KEY: () => (/* binding */ n),\n/* harmony export */   PINO_LOGGER_DEFAULTS: () => (/* binding */ c),\n/* harmony export */   formatChildLoggerContext: () => (/* binding */ w),\n/* harmony export */   generateChildLogger: () => (/* binding */ E),\n/* harmony export */   generateClientLogger: () => (/* binding */ C),\n/* harmony export */   generatePlatformLogger: () => (/* binding */ A),\n/* harmony export */   generateServerLogger: () => (/* binding */ I),\n/* harmony export */   getBrowserLoggerContext: () => (/* binding */ v),\n/* harmony export */   getDefaultLoggerOptions: () => (/* binding */ k),\n/* harmony export */   getLoggerContext: () => (/* binding */ y),\n/* harmony export */   pino: () => (/* reexport default from dynamic */ pino__WEBPACK_IMPORTED_MODULE_0___default.a),\n/* harmony export */   setBrowserLoggerContext: () => (/* binding */ b)\n/* harmony export */ });\n/* harmony import */ var pino__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pino */ \"(ssr)/./node_modules/pino/pino.js\");\n/* harmony import */ var pino__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pino__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n\n\n\nconst c = {\n    level: \"info\"\n}, n = \"custom_context\", l = 1e3 * 1024;\nclass O {\n    constructor(e){\n        this.nodeValue = e, this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length, this.next = null;\n    }\n    get value() {\n        return this.nodeValue;\n    }\n    get size() {\n        return this.sizeInBytes;\n    }\n}\nclass d {\n    constructor(e){\n        this.head = null, this.tail = null, this.lengthInNodes = 0, this.maxSizeInBytes = e, this.sizeInBytes = 0;\n    }\n    append(e) {\n        const t = new O(e);\n        if (t.size > this.maxSizeInBytes) throw new Error(`[LinkedList] Value too big to insert into list: ${e} with size ${t.size}`);\n        for(; this.size + t.size > this.maxSizeInBytes;)this.shift();\n        this.head ? (this.tail && (this.tail.next = t), this.tail = t) : (this.head = t, this.tail = t), this.lengthInNodes++, this.sizeInBytes += t.size;\n    }\n    shift() {\n        if (!this.head) return;\n        const e = this.head;\n        this.head = this.head.next, this.head || (this.tail = null), this.lengthInNodes--, this.sizeInBytes -= e.size;\n    }\n    toArray() {\n        const e = [];\n        let t = this.head;\n        for(; t !== null;)e.push(t.value), t = t.next;\n        return e;\n    }\n    get length() {\n        return this.lengthInNodes;\n    }\n    get size() {\n        return this.sizeInBytes;\n    }\n    toOrderedArray() {\n        return Array.from(this);\n    }\n    [Symbol.iterator]() {\n        let e = this.head;\n        return {\n            next: ()=>{\n                if (!e) return {\n                    done: !0,\n                    value: null\n                };\n                const t = e.value;\n                return e = e.next, {\n                    done: !1,\n                    value: t\n                };\n            }\n        };\n    }\n}\nclass L {\n    constructor(e, t = l){\n        this.level = e ?? \"error\", this.levelValue = pino__WEBPACK_IMPORTED_MODULE_0__.levels.values[this.level], this.MAX_LOG_SIZE_IN_BYTES = t, this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);\n    }\n    forwardToConsole(e, t) {\n        t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.error ? console.error(e) : t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.warn ? console.warn(e) : t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.debug ? console.debug(e) : t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.trace ? console.trace(e) : console.log(e);\n    }\n    appendToLogs(e) {\n        this.logs.append((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)({\n            timestamp: new Date().toISOString(),\n            log: e\n        }));\n        const t = typeof e == \"string\" ? JSON.parse(e).level : e.level;\n        t >= this.levelValue && this.forwardToConsole(e, t);\n    }\n    getLogs() {\n        return this.logs;\n    }\n    clearLogs() {\n        this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);\n    }\n    getLogArray() {\n        return Array.from(this.logs);\n    }\n    logsToBlob(e) {\n        const t = this.getLogArray();\n        return t.push((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)({\n            extraMetadata: e\n        })), new Blob(t, {\n            type: \"application/json\"\n        });\n    }\n}\nclass m {\n    constructor(e, t = l){\n        this.baseChunkLogger = new L(e, t);\n    }\n    write(e) {\n        this.baseChunkLogger.appendToLogs(e);\n    }\n    getLogs() {\n        return this.baseChunkLogger.getLogs();\n    }\n    clearLogs() {\n        this.baseChunkLogger.clearLogs();\n    }\n    getLogArray() {\n        return this.baseChunkLogger.getLogArray();\n    }\n    logsToBlob(e) {\n        return this.baseChunkLogger.logsToBlob(e);\n    }\n    downloadLogsBlobInBrowser(e) {\n        const t = URL.createObjectURL(this.logsToBlob(e)), o = document.createElement(\"a\");\n        o.href = t, o.download = `walletconnect-logs-${new Date().toISOString()}.txt`, document.body.appendChild(o), o.click(), document.body.removeChild(o), URL.revokeObjectURL(t);\n    }\n}\nclass B {\n    constructor(e, t = l){\n        this.baseChunkLogger = new L(e, t);\n    }\n    write(e) {\n        this.baseChunkLogger.appendToLogs(e);\n    }\n    getLogs() {\n        return this.baseChunkLogger.getLogs();\n    }\n    clearLogs() {\n        this.baseChunkLogger.clearLogs();\n    }\n    getLogArray() {\n        return this.baseChunkLogger.getLogArray();\n    }\n    logsToBlob(e) {\n        return this.baseChunkLogger.logsToBlob(e);\n    }\n}\nvar x = Object.defineProperty, S = Object.defineProperties, _ = Object.getOwnPropertyDescriptors, p = Object.getOwnPropertySymbols, T = Object.prototype.hasOwnProperty, z = Object.prototype.propertyIsEnumerable, f = (r, e, t)=>e in r ? x(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, i = (r, e)=>{\n    for(var t in e || (e = {}))T.call(e, t) && f(r, t, e[t]);\n    if (p) for (var t of p(e))z.call(e, t) && f(r, t, e[t]);\n    return r;\n}, g = (r, e)=>S(r, _(e));\nfunction k(r) {\n    return g(i({}, r), {\n        level: r?.level || c.level\n    });\n}\nfunction v(r, e = n) {\n    return r[e] || \"\";\n}\nfunction b(r, e, t = n) {\n    return r[t] = e, r;\n}\nfunction y(r, e = n) {\n    let t = \"\";\n    return typeof r.bindings > \"u\" ? t = v(r, e) : t = r.bindings().context || \"\", t;\n}\nfunction w(r, e, t = n) {\n    const o = y(r, t);\n    return o.trim() ? `${o}/${e}` : e;\n}\nfunction E(r, e, t = n) {\n    const o = w(r, e, t), a = r.child({\n        context: o\n    });\n    return b(a, o, t);\n}\nfunction C(r) {\n    var e, t;\n    const o = new m((e = r.opts) == null ? void 0 : e.level, r.maxSizeInBytes);\n    return {\n        logger: pino__WEBPACK_IMPORTED_MODULE_0___default()(g(i({}, r.opts), {\n            level: \"trace\",\n            browser: g(i({}, (t = r.opts) == null ? void 0 : t.browser), {\n                write: (a)=>o.write(a)\n            })\n        })),\n        chunkLoggerController: o\n    };\n}\nfunction I(r) {\n    var e;\n    const t = new B((e = r.opts) == null ? void 0 : e.level, r.maxSizeInBytes);\n    return {\n        logger: pino__WEBPACK_IMPORTED_MODULE_0___default()(g(i({}, r.opts), {\n            level: \"trace\"\n        }), t),\n        chunkLoggerController: t\n    };\n}\nfunction A(r) {\n    return typeof r.loggerOverride < \"u\" && typeof r.loggerOverride != \"string\" ? {\n        logger: r.loggerOverride,\n        chunkLoggerController: null\n    } :  false ? 0 : I(r);\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/logger/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-api/dist/index.es.js":
/*!****************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-api/dist/index.es.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RELAY_JSONRPC: () => (/* binding */ C),\n/* harmony export */   isPublishMethod: () => (/* binding */ c),\n/* harmony export */   isPublishParams: () => (/* binding */ h),\n/* harmony export */   isPublishRequest: () => (/* binding */ P),\n/* harmony export */   isSubscribeMethod: () => (/* binding */ b),\n/* harmony export */   isSubscribeParams: () => (/* binding */ a),\n/* harmony export */   isSubscribeRequest: () => (/* binding */ R),\n/* harmony export */   isSubscriptionMethod: () => (/* binding */ m),\n/* harmony export */   isSubscriptionParams: () => (/* binding */ d),\n/* harmony export */   isSubscriptionRequest: () => (/* binding */ S),\n/* harmony export */   isUnsubscribeMethod: () => (/* binding */ o),\n/* harmony export */   isUnsubscribeParams: () => (/* binding */ p),\n/* harmony export */   isUnsubscribeRequest: () => (/* binding */ _),\n/* harmony export */   parsePublishRequest: () => (/* binding */ q),\n/* harmony export */   parseSubscribeRequest: () => (/* binding */ g),\n/* harmony export */   parseSubscriptionRequest: () => (/* binding */ k),\n/* harmony export */   parseUnsubscribeRequest: () => (/* binding */ E)\n/* harmony export */ });\nfunction e(s, r, i = \"string\") {\n    if (!s[r] || typeof s[r] !== i) throw new Error(`Missing or invalid \"${r}\" param`);\n}\nfunction l(s, r) {\n    let i = !0;\n    return r.forEach((t)=>{\n        t in s || (i = !1);\n    }), i;\n}\nfunction f(s, r) {\n    return Array.isArray(s) ? s.length === r : Object.keys(s).length === r;\n}\nfunction w(s, r) {\n    return Array.isArray(s) ? s.length >= r : Object.keys(s).length >= r;\n}\nfunction u(s, r, i) {\n    return (i.length ? w(s, r.length) : f(s, r.length)) ? l(s, r) : !1;\n}\nfunction n(s, r, i = \"_\") {\n    const t = s.split(i);\n    return t[t.length - 1].trim().toLowerCase() === r.trim().toLowerCase();\n}\nfunction R(s) {\n    return b(s.method) && a(s.params);\n}\nfunction b(s) {\n    return n(s, \"subscribe\");\n}\nfunction a(s) {\n    return u(s, [\n        \"topic\"\n    ], []);\n}\nfunction P(s) {\n    return c(s.method) && h(s.params);\n}\nfunction c(s) {\n    return n(s, \"publish\");\n}\nfunction h(s) {\n    return u(s, [\n        \"message\",\n        \"topic\",\n        \"ttl\"\n    ], [\n        \"prompt\",\n        \"tag\"\n    ]);\n}\nfunction _(s) {\n    return o(s.method) && p(s.params);\n}\nfunction o(s) {\n    return n(s, \"unsubscribe\");\n}\nfunction p(s) {\n    return u(s, [\n        \"id\",\n        \"topic\"\n    ], []);\n}\nfunction S(s) {\n    return m(s.method) && d(s.params);\n}\nfunction m(s) {\n    return n(s, \"subscription\");\n}\nfunction d(s) {\n    return u(s, [\n        \"id\",\n        \"data\"\n    ], []);\n}\nfunction g(s) {\n    if (!b(s.method)) throw new Error(\"JSON-RPC Request has invalid subscribe method\");\n    if (!a(s.params)) throw new Error(\"JSON-RPC Request has invalid subscribe params\");\n    const r = s.params;\n    return e(r, \"topic\"), r;\n}\nfunction q(s) {\n    if (!c(s.method)) throw new Error(\"JSON-RPC Request has invalid publish method\");\n    if (!h(s.params)) throw new Error(\"JSON-RPC Request has invalid publish params\");\n    const r = s.params;\n    return e(r, \"topic\"), e(r, \"message\"), e(r, \"ttl\", \"number\"), r;\n}\nfunction E(s) {\n    if (!o(s.method)) throw new Error(\"JSON-RPC Request has invalid unsubscribe method\");\n    if (!p(s.params)) throw new Error(\"JSON-RPC Request has invalid unsubscribe params\");\n    const r = s.params;\n    return e(r, \"id\"), r;\n}\nfunction k(s) {\n    if (!m(s.method)) throw new Error(\"JSON-RPC Request has invalid subscription method\");\n    if (!d(s.params)) throw new Error(\"JSON-RPC Request has invalid subscription params\");\n    const r = s.params;\n    return e(r, \"id\"), e(r, \"data\"), r;\n}\nconst C = {\n    waku: {\n        publish: \"waku_publish\",\n        batchPublish: \"waku_batchPublish\",\n        subscribe: \"waku_subscribe\",\n        batchSubscribe: \"waku_batchSubscribe\",\n        subscription: \"waku_subscription\",\n        unsubscribe: \"waku_unsubscribe\",\n        batchUnsubscribe: \"waku_batchUnsubscribe\",\n        batchFetchMessages: \"waku_batchFetchMessages\"\n    },\n    irn: {\n        publish: \"irn_publish\",\n        batchPublish: \"irn_batchPublish\",\n        subscribe: \"irn_subscribe\",\n        batchSubscribe: \"irn_batchSubscribe\",\n        subscription: \"irn_subscription\",\n        unsubscribe: \"irn_unsubscribe\",\n        batchUnsubscribe: \"irn_batchUnsubscribe\",\n        batchFetchMessages: \"irn_batchFetchMessages\"\n    },\n    iridium: {\n        publish: \"iridium_publish\",\n        batchPublish: \"iridium_batchPublish\",\n        subscribe: \"iridium_subscribe\",\n        batchSubscribe: \"iridium_batchSubscribe\",\n        subscription: \"iridium_subscription\",\n        unsubscribe: \"iridium_unsubscribe\",\n        batchUnsubscribe: \"iridium_batchUnsubscribe\",\n        batchFetchMessages: \"iridium_batchFetchMessages\"\n    }\n};\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-api/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/api.js":
/*!****************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/dist/esm/api.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair),\n/* harmony export */   signJWT: () => (/* binding */ signJWT),\n/* harmony export */   verifyJWT: () => (/* binding */ verifyJWT)\n/* harmony export */ });\n/* harmony import */ var _stablelib_ed25519__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stablelib/ed25519 */ \"(ssr)/./node_modules/@stablelib/ed25519/lib/ed25519.js\");\n/* harmony import */ var _stablelib_random__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stablelib/random */ \"(ssr)/./node_modules/@stablelib/random/lib/random.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/constants.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/utils.js\");\n\n\n\n\n\nfunction generateKeyPair(seed = (0,_stablelib_random__WEBPACK_IMPORTED_MODULE_1__.randomBytes)(_constants__WEBPACK_IMPORTED_MODULE_3__.KEY_PAIR_SEED_LENGTH)) {\n    return _stablelib_ed25519__WEBPACK_IMPORTED_MODULE_0__.generateKeyPairFromSeed(seed);\n}\nasync function signJWT(sub, aud, ttl, keyPair, iat = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.fromMiliseconds)(Date.now())) {\n    const header = {\n        alg: _constants__WEBPACK_IMPORTED_MODULE_3__.JWT_IRIDIUM_ALG,\n        typ: _constants__WEBPACK_IMPORTED_MODULE_3__.JWT_IRIDIUM_TYP\n    };\n    const iss = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.encodeIss)(keyPair.publicKey);\n    const exp = iat + ttl;\n    const payload = {\n        iss,\n        sub,\n        aud,\n        iat,\n        exp\n    };\n    const data = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.encodeData)({\n        header,\n        payload\n    });\n    const signature = _stablelib_ed25519__WEBPACK_IMPORTED_MODULE_0__.sign(keyPair.secretKey, data);\n    return (0,_utils__WEBPACK_IMPORTED_MODULE_4__.encodeJWT)({\n        header,\n        payload,\n        signature\n    });\n}\nasync function verifyJWT(jwt) {\n    const { header, payload, data, signature } = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.decodeJWT)(jwt);\n    if (header.alg !== _constants__WEBPACK_IMPORTED_MODULE_3__.JWT_IRIDIUM_ALG || header.typ !== _constants__WEBPACK_IMPORTED_MODULE_3__.JWT_IRIDIUM_TYP) {\n        throw new Error(\"JWT must use EdDSA algorithm\");\n    }\n    const publicKey = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.decodeIss)(payload.iss);\n    return _stablelib_ed25519__WEBPACK_IMPORTED_MODULE_0__.verify(publicKey, data, signature);\n} //# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9kaXN0L2VzbS9hcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQThDO0FBQ0U7QUFDTTtBQUNnQztBQUNKO0FBQzNFLFNBQVNXLGdCQUFnQkMsT0FBT1gsOERBQVdBLENBQUNJLDREQUFvQkEsQ0FBQztJQUNwRSxPQUFPTCx1RUFBK0IsQ0FBQ1k7QUFDM0M7QUFDTyxlQUFlRSxRQUFRQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxPQUFPLEVBQUVDLE1BQU1qQixvRUFBZUEsQ0FBQ2tCLEtBQUtDLEdBQUcsR0FBRztJQUNuRixNQUFNQyxTQUFTO1FBQUVDLEtBQUtwQix1REFBZUE7UUFBRXFCLEtBQUtwQix1REFBZUE7SUFBQztJQUM1RCxNQUFNcUIsTUFBTWhCLGlEQUFTQSxDQUFDUyxRQUFRUSxTQUFTO0lBQ3ZDLE1BQU1DLE1BQU1SLE1BQU1GO0lBQ2xCLE1BQU1XLFVBQVU7UUFBRUg7UUFBS1Y7UUFBS0M7UUFBS0c7UUFBS1E7SUFBSTtJQUMxQyxNQUFNRSxPQUFPckIsa0RBQVVBLENBQUM7UUFBRWM7UUFBUU07SUFBUTtJQUMxQyxNQUFNRSxZQUFZOUIsb0RBQVksQ0FBQ2tCLFFBQVFjLFNBQVMsRUFBRUg7SUFDbEQsT0FBT25CLGlEQUFTQSxDQUFDO1FBQUVZO1FBQVFNO1FBQVNFO0lBQVU7QUFDbEQ7QUFDTyxlQUFlRyxVQUFVQyxHQUFHO0lBQy9CLE1BQU0sRUFBRVosTUFBTSxFQUFFTSxPQUFPLEVBQUVDLElBQUksRUFBRUMsU0FBUyxFQUFFLEdBQUd2QixpREFBU0EsQ0FBQzJCO0lBQ3ZELElBQUlaLE9BQU9DLEdBQUcsS0FBS3BCLHVEQUFlQSxJQUFJbUIsT0FBT0UsR0FBRyxLQUFLcEIsdURBQWVBLEVBQUU7UUFDbEUsTUFBTSxJQUFJK0IsTUFBTTtJQUNwQjtJQUNBLE1BQU1ULFlBQVlwQixpREFBU0EsQ0FBQ3NCLFFBQVFILEdBQUc7SUFDdkMsT0FBT3pCLHNEQUFjLENBQUMwQixXQUFXRyxNQUFNQztBQUMzQyxFQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL0BzZS0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9yZWxheS1hdXRoL2Rpc3QvZXNtL2FwaS5qcz8yYzQwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGVkMjU1MTkgZnJvbSBcIkBzdGFibGVsaWIvZWQyNTUxOVwiO1xuaW1wb3J0IHsgcmFuZG9tQnl0ZXMgfSBmcm9tIFwiQHN0YWJsZWxpYi9yYW5kb21cIjtcbmltcG9ydCB7IGZyb21NaWxpc2Vjb25kcyB9IGZyb20gXCJAd2FsbGV0Y29ubmVjdC90aW1lXCI7XG5pbXBvcnQgeyBKV1RfSVJJRElVTV9BTEcsIEpXVF9JUklESVVNX1RZUCwgS0VZX1BBSVJfU0VFRF9MRU5HVEgsIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBkZWNvZGVJc3MsIGRlY29kZUpXVCwgZW5jb2RlRGF0YSwgZW5jb2RlSXNzLCBlbmNvZGVKV1QsIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUtleVBhaXIoc2VlZCA9IHJhbmRvbUJ5dGVzKEtFWV9QQUlSX1NFRURfTEVOR1RIKSkge1xuICAgIHJldHVybiBlZDI1NTE5LmdlbmVyYXRlS2V5UGFpckZyb21TZWVkKHNlZWQpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25KV1Qoc3ViLCBhdWQsIHR0bCwga2V5UGFpciwgaWF0ID0gZnJvbU1pbGlzZWNvbmRzKERhdGUubm93KCkpKSB7XG4gICAgY29uc3QgaGVhZGVyID0geyBhbGc6IEpXVF9JUklESVVNX0FMRywgdHlwOiBKV1RfSVJJRElVTV9UWVAgfTtcbiAgICBjb25zdCBpc3MgPSBlbmNvZGVJc3Moa2V5UGFpci5wdWJsaWNLZXkpO1xuICAgIGNvbnN0IGV4cCA9IGlhdCArIHR0bDtcbiAgICBjb25zdCBwYXlsb2FkID0geyBpc3MsIHN1YiwgYXVkLCBpYXQsIGV4cCB9O1xuICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVEYXRhKHsgaGVhZGVyLCBwYXlsb2FkIH0pO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IGVkMjU1MTkuc2lnbihrZXlQYWlyLnNlY3JldEtleSwgZGF0YSk7XG4gICAgcmV0dXJuIGVuY29kZUpXVCh7IGhlYWRlciwgcGF5bG9hZCwgc2lnbmF0dXJlIH0pO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZlcmlmeUpXVChqd3QpIHtcbiAgICBjb25zdCB7IGhlYWRlciwgcGF5bG9hZCwgZGF0YSwgc2lnbmF0dXJlIH0gPSBkZWNvZGVKV1Qoand0KTtcbiAgICBpZiAoaGVhZGVyLmFsZyAhPT0gSldUX0lSSURJVU1fQUxHIHx8IGhlYWRlci50eXAgIT09IEpXVF9JUklESVVNX1RZUCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJKV1QgbXVzdCB1c2UgRWREU0EgYWxnb3JpdGhtXCIpO1xuICAgIH1cbiAgICBjb25zdCBwdWJsaWNLZXkgPSBkZWNvZGVJc3MocGF5bG9hZC5pc3MpO1xuICAgIHJldHVybiBlZDI1NTE5LnZlcmlmeShwdWJsaWNLZXksIGRhdGEsIHNpZ25hdHVyZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkuanMubWFwIl0sIm5hbWVzIjpbImVkMjU1MTkiLCJyYW5kb21CeXRlcyIsImZyb21NaWxpc2Vjb25kcyIsIkpXVF9JUklESVVNX0FMRyIsIkpXVF9JUklESVVNX1RZUCIsIktFWV9QQUlSX1NFRURfTEVOR1RIIiwiZGVjb2RlSXNzIiwiZGVjb2RlSldUIiwiZW5jb2RlRGF0YSIsImVuY29kZUlzcyIsImVuY29kZUpXVCIsImdlbmVyYXRlS2V5UGFpciIsInNlZWQiLCJnZW5lcmF0ZUtleVBhaXJGcm9tU2VlZCIsInNpZ25KV1QiLCJzdWIiLCJhdWQiLCJ0dGwiLCJrZXlQYWlyIiwiaWF0IiwiRGF0ZSIsIm5vdyIsImhlYWRlciIsImFsZyIsInR5cCIsImlzcyIsInB1YmxpY0tleSIsImV4cCIsInBheWxvYWQiLCJkYXRhIiwic2lnbmF0dXJlIiwic2lnbiIsInNlY3JldEtleSIsInZlcmlmeUpXVCIsImp3dCIsIkVycm9yIiwidmVyaWZ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/constants.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/dist/esm/constants.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DATA_ENCODING: () => (/* binding */ DATA_ENCODING),\n/* harmony export */   DID_DELIMITER: () => (/* binding */ DID_DELIMITER),\n/* harmony export */   DID_METHOD: () => (/* binding */ DID_METHOD),\n/* harmony export */   DID_PREFIX: () => (/* binding */ DID_PREFIX),\n/* harmony export */   JSON_ENCODING: () => (/* binding */ JSON_ENCODING),\n/* harmony export */   JWT_DELIMITER: () => (/* binding */ JWT_DELIMITER),\n/* harmony export */   JWT_ENCODING: () => (/* binding */ JWT_ENCODING),\n/* harmony export */   JWT_IRIDIUM_ALG: () => (/* binding */ JWT_IRIDIUM_ALG),\n/* harmony export */   JWT_IRIDIUM_TYP: () => (/* binding */ JWT_IRIDIUM_TYP),\n/* harmony export */   KEY_PAIR_SEED_LENGTH: () => (/* binding */ KEY_PAIR_SEED_LENGTH),\n/* harmony export */   MULTICODEC_ED25519_BASE: () => (/* binding */ MULTICODEC_ED25519_BASE),\n/* harmony export */   MULTICODEC_ED25519_ENCODING: () => (/* binding */ MULTICODEC_ED25519_ENCODING),\n/* harmony export */   MULTICODEC_ED25519_HEADER: () => (/* binding */ MULTICODEC_ED25519_HEADER),\n/* harmony export */   MULTICODEC_ED25519_LENGTH: () => (/* binding */ MULTICODEC_ED25519_LENGTH)\n/* harmony export */ });\nconst JWT_IRIDIUM_ALG = \"EdDSA\";\nconst JWT_IRIDIUM_TYP = \"JWT\";\nconst JWT_DELIMITER = \".\";\nconst JWT_ENCODING = \"base64url\";\nconst JSON_ENCODING = \"utf8\";\nconst DATA_ENCODING = \"utf8\";\nconst DID_DELIMITER = \":\";\nconst DID_PREFIX = \"did\";\nconst DID_METHOD = \"key\";\nconst MULTICODEC_ED25519_ENCODING = \"base58btc\";\nconst MULTICODEC_ED25519_BASE = \"z\";\nconst MULTICODEC_ED25519_HEADER = \"K36\";\nconst MULTICODEC_ED25519_LENGTH = 32;\nconst KEY_PAIR_SEED_LENGTH = 32; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9kaXN0L2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBTyxNQUFNQSxrQkFBa0IsUUFBUTtBQUNoQyxNQUFNQyxrQkFBa0IsTUFBTTtBQUM5QixNQUFNQyxnQkFBZ0IsSUFBSTtBQUMxQixNQUFNQyxlQUFlLFlBQVk7QUFDakMsTUFBTUMsZ0JBQWdCLE9BQU87QUFDN0IsTUFBTUMsZ0JBQWdCLE9BQU87QUFDN0IsTUFBTUMsZ0JBQWdCLElBQUk7QUFDMUIsTUFBTUMsYUFBYSxNQUFNO0FBQ3pCLE1BQU1DLGFBQWEsTUFBTTtBQUN6QixNQUFNQyw4QkFBOEIsWUFBWTtBQUNoRCxNQUFNQywwQkFBMEIsSUFBSTtBQUNwQyxNQUFNQyw0QkFBNEIsTUFBTTtBQUN4QyxNQUFNQyw0QkFBNEIsR0FBRztBQUNyQyxNQUFNQyx1QkFBdUIsR0FBRyxDQUN2QyxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9kaXN0L2VzbS9jb25zdGFudHMuanM/NWQ4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgSldUX0lSSURJVU1fQUxHID0gXCJFZERTQVwiO1xuZXhwb3J0IGNvbnN0IEpXVF9JUklESVVNX1RZUCA9IFwiSldUXCI7XG5leHBvcnQgY29uc3QgSldUX0RFTElNSVRFUiA9IFwiLlwiO1xuZXhwb3J0IGNvbnN0IEpXVF9FTkNPRElORyA9IFwiYmFzZTY0dXJsXCI7XG5leHBvcnQgY29uc3QgSlNPTl9FTkNPRElORyA9IFwidXRmOFwiO1xuZXhwb3J0IGNvbnN0IERBVEFfRU5DT0RJTkcgPSBcInV0ZjhcIjtcbmV4cG9ydCBjb25zdCBESURfREVMSU1JVEVSID0gXCI6XCI7XG5leHBvcnQgY29uc3QgRElEX1BSRUZJWCA9IFwiZGlkXCI7XG5leHBvcnQgY29uc3QgRElEX01FVEhPRCA9IFwia2V5XCI7XG5leHBvcnQgY29uc3QgTVVMVElDT0RFQ19FRDI1NTE5X0VOQ09ESU5HID0gXCJiYXNlNThidGNcIjtcbmV4cG9ydCBjb25zdCBNVUxUSUNPREVDX0VEMjU1MTlfQkFTRSA9IFwielwiO1xuZXhwb3J0IGNvbnN0IE1VTFRJQ09ERUNfRUQyNTUxOV9IRUFERVIgPSBcIkszNlwiO1xuZXhwb3J0IGNvbnN0IE1VTFRJQ09ERUNfRUQyNTUxOV9MRU5HVEggPSAzMjtcbmV4cG9ydCBjb25zdCBLRVlfUEFJUl9TRUVEX0xFTkdUSCA9IDMyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJKV1RfSVJJRElVTV9BTEciLCJKV1RfSVJJRElVTV9UWVAiLCJKV1RfREVMSU1JVEVSIiwiSldUX0VOQ09ESU5HIiwiSlNPTl9FTkNPRElORyIsIkRBVEFfRU5DT0RJTkciLCJESURfREVMSU1JVEVSIiwiRElEX1BSRUZJWCIsIkRJRF9NRVRIT0QiLCJNVUxUSUNPREVDX0VEMjU1MTlfRU5DT0RJTkciLCJNVUxUSUNPREVDX0VEMjU1MTlfQkFTRSIsIk1VTFRJQ09ERUNfRUQyNTUxOV9IRUFERVIiLCJNVUxUSUNPREVDX0VEMjU1MTlfTEVOR1RIIiwiS0VZX1BBSVJfU0VFRF9MRU5HVEgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/dist/esm/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DATA_ENCODING: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.DATA_ENCODING),\n/* harmony export */   DID_DELIMITER: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.DID_DELIMITER),\n/* harmony export */   DID_METHOD: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.DID_METHOD),\n/* harmony export */   DID_PREFIX: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.DID_PREFIX),\n/* harmony export */   JSON_ENCODING: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.JSON_ENCODING),\n/* harmony export */   JWT_DELIMITER: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.JWT_DELIMITER),\n/* harmony export */   JWT_ENCODING: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.JWT_ENCODING),\n/* harmony export */   JWT_IRIDIUM_ALG: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.JWT_IRIDIUM_ALG),\n/* harmony export */   JWT_IRIDIUM_TYP: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.JWT_IRIDIUM_TYP),\n/* harmony export */   KEY_PAIR_SEED_LENGTH: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.KEY_PAIR_SEED_LENGTH),\n/* harmony export */   MULTICODEC_ED25519_BASE: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.MULTICODEC_ED25519_BASE),\n/* harmony export */   MULTICODEC_ED25519_ENCODING: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.MULTICODEC_ED25519_ENCODING),\n/* harmony export */   MULTICODEC_ED25519_HEADER: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.MULTICODEC_ED25519_HEADER),\n/* harmony export */   MULTICODEC_ED25519_LENGTH: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.MULTICODEC_ED25519_LENGTH),\n/* harmony export */   decodeData: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.decodeData),\n/* harmony export */   decodeIss: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.decodeIss),\n/* harmony export */   decodeJSON: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.decodeJSON),\n/* harmony export */   decodeJWT: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.decodeJWT),\n/* harmony export */   decodeSig: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.decodeSig),\n/* harmony export */   encodeData: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.encodeData),\n/* harmony export */   encodeIss: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.encodeIss),\n/* harmony export */   encodeJSON: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.encodeJSON),\n/* harmony export */   encodeJWT: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.encodeJWT),\n/* harmony export */   encodeSig: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.encodeSig),\n/* harmony export */   generateKeyPair: () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.generateKeyPair),\n/* harmony export */   signJWT: () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.signJWT),\n/* harmony export */   verifyJWT: () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.verifyJWT)\n/* harmony export */ });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/api.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/constants.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/types.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_types__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _types__WEBPACK_IMPORTED_MODULE_2__) if([\"default\",\"generateKeyPair\",\"signJWT\",\"verifyJWT\",\"DATA_ENCODING\",\"DID_DELIMITER\",\"DID_METHOD\",\"DID_PREFIX\",\"JSON_ENCODING\",\"JWT_DELIMITER\",\"JWT_ENCODING\",\"JWT_IRIDIUM_ALG\",\"JWT_IRIDIUM_TYP\",\"KEY_PAIR_SEED_LENGTH\",\"MULTICODEC_ED25519_BASE\",\"MULTICODEC_ED25519_ENCODING\",\"MULTICODEC_ED25519_HEADER\",\"MULTICODEC_ED25519_LENGTH\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _types__WEBPACK_IMPORTED_MODULE_2__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/utils.js\");\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFzQjtBQUNNO0FBQ0o7QUFDQSxDQUN4QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9kaXN0L2VzbS9pbmRleC5qcz81NGUwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2FwaVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90eXBlc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdXRpbHNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/types.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/dist/esm/types.js ***!
  \******************************************************************/
/***/ (() => {

eval("//# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9kaXN0L2VzbS90eXBlcy5qcz82NzNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUMiLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9kaXN0L2VzbS90eXBlcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/dist/esm/utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeData: () => (/* binding */ decodeData),\n/* harmony export */   decodeIss: () => (/* binding */ decodeIss),\n/* harmony export */   decodeJSON: () => (/* binding */ decodeJSON),\n/* harmony export */   decodeJWT: () => (/* binding */ decodeJWT),\n/* harmony export */   decodeSig: () => (/* binding */ decodeSig),\n/* harmony export */   encodeData: () => (/* binding */ encodeData),\n/* harmony export */   encodeIss: () => (/* binding */ encodeIss),\n/* harmony export */   encodeJSON: () => (/* binding */ encodeJSON),\n/* harmony export */   encodeJWT: () => (/* binding */ encodeJWT),\n/* harmony export */   encodeSig: () => (/* binding */ encodeSig)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/concat */ \"(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/concat.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/to-string.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/from-string */ \"(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/from-string.js\");\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/constants.js\");\n\n\n\n\n\nfunction decodeJSON(str) {\n    return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_3__.safeJsonParse)((0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(str, _constants__WEBPACK_IMPORTED_MODULE_4__.JWT_ENCODING), _constants__WEBPACK_IMPORTED_MODULE_4__.JSON_ENCODING));\n}\nfunction encodeJSON(val) {\n    return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_3__.safeJsonStringify)(val), _constants__WEBPACK_IMPORTED_MODULE_4__.JSON_ENCODING), _constants__WEBPACK_IMPORTED_MODULE_4__.JWT_ENCODING);\n}\nfunction encodeIss(publicKey) {\n    const header = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(_constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_HEADER, _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_ENCODING);\n    const multicodec = _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_BASE + (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)((0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__.concat)([\n        header,\n        publicKey\n    ]), _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_ENCODING);\n    return [\n        _constants__WEBPACK_IMPORTED_MODULE_4__.DID_PREFIX,\n        _constants__WEBPACK_IMPORTED_MODULE_4__.DID_METHOD,\n        multicodec\n    ].join(_constants__WEBPACK_IMPORTED_MODULE_4__.DID_DELIMITER);\n}\nfunction decodeIss(issuer) {\n    const [prefix, method, multicodec] = issuer.split(_constants__WEBPACK_IMPORTED_MODULE_4__.DID_DELIMITER);\n    if (prefix !== _constants__WEBPACK_IMPORTED_MODULE_4__.DID_PREFIX || method !== _constants__WEBPACK_IMPORTED_MODULE_4__.DID_METHOD) {\n        throw new Error(`Issuer must be a DID with method \"key\"`);\n    }\n    const base = multicodec.slice(0, 1);\n    if (base !== _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_BASE) {\n        throw new Error(`Issuer must be a key in mulicodec format`);\n    }\n    const bytes = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(multicodec.slice(1), _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_ENCODING);\n    const type = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)(bytes.slice(0, 2), _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_ENCODING);\n    if (type !== _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_HEADER) {\n        throw new Error(`Issuer must be a public key with type \"Ed25519\"`);\n    }\n    const publicKey = bytes.slice(2);\n    if (publicKey.length !== _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_LENGTH) {\n        throw new Error(`Issuer must be a public key with length 32 bytes`);\n    }\n    return publicKey;\n}\nfunction encodeSig(bytes) {\n    return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)(bytes, _constants__WEBPACK_IMPORTED_MODULE_4__.JWT_ENCODING);\n}\nfunction decodeSig(encoded) {\n    return (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(encoded, _constants__WEBPACK_IMPORTED_MODULE_4__.JWT_ENCODING);\n}\nfunction encodeData(params) {\n    return (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)([\n        encodeJSON(params.header),\n        encodeJSON(params.payload)\n    ].join(_constants__WEBPACK_IMPORTED_MODULE_4__.JWT_DELIMITER), _constants__WEBPACK_IMPORTED_MODULE_4__.DATA_ENCODING);\n}\nfunction decodeData(data) {\n    const params = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)(data, _constants__WEBPACK_IMPORTED_MODULE_4__.DATA_ENCODING).split(_constants__WEBPACK_IMPORTED_MODULE_4__.JWT_DELIMITER);\n    const header = decodeJSON(params[0]);\n    const payload = decodeJSON(params[1]);\n    return {\n        header,\n        payload\n    };\n}\nfunction encodeJWT(params) {\n    return [\n        encodeJSON(params.header),\n        encodeJSON(params.payload),\n        encodeSig(params.signature)\n    ].join(_constants__WEBPACK_IMPORTED_MODULE_4__.JWT_DELIMITER);\n}\nfunction decodeJWT(jwt) {\n    const params = jwt.split(_constants__WEBPACK_IMPORTED_MODULE_4__.JWT_DELIMITER);\n    const header = decodeJSON(params[0]);\n    const payload = decodeJSON(params[1]);\n    const signature = decodeSig(params[2]);\n    const data = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(params.slice(0, 2).join(_constants__WEBPACK_IMPORTED_MODULE_4__.JWT_DELIMITER), _constants__WEBPACK_IMPORTED_MODULE_4__.DATA_ENCODING);\n    return {\n        header,\n        payload,\n        signature,\n        data\n    };\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/safe-json/dist/esm/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   safeJsonParse: () => (/* binding */ safeJsonParse),\n/* harmony export */   safeJsonStringify: () => (/* binding */ safeJsonStringify)\n/* harmony export */ });\nconst JSONStringify = (data)=>JSON.stringify(data, (_, value)=>typeof value === \"bigint\" ? value.toString() + \"n\" : value);\nconst JSONParse = (json)=>{\n    const numbersBiggerThanMaxInt = /([\\[:])?(\\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\\}\\]])/g;\n    const serializedData = json.replace(numbersBiggerThanMaxInt, '$1\"$2n\"$3');\n    return JSON.parse(serializedData, (_, value)=>{\n        const isCustomFormatBigInt = typeof value === \"string\" && value.match(/^\\d+n$/);\n        if (isCustomFormatBigInt) return BigInt(value.substring(0, value.length - 1));\n        return value;\n    });\n};\nfunction safeJsonParse(value) {\n    if (typeof value !== \"string\") {\n        throw new Error(`Cannot safe json parse value of type ${typeof value}`);\n    }\n    try {\n        return JSONParse(value);\n    } catch (_a) {\n        return value;\n    }\n}\nfunction safeJsonStringify(value) {\n    return typeof value === \"string\" ? value : JSONStringify(value) || \"\";\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvc2FmZS1qc29uL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTUEsZ0JBQWdCQyxDQUFBQSxPQUFRQyxLQUFLQyxTQUFTLENBQUNGLE1BQU0sQ0FBQ0csR0FBR0MsUUFBVSxPQUFPQSxVQUFVLFdBQVdBLE1BQU1DLFFBQVEsS0FBSyxNQUFNRDtBQUN0SCxNQUFNRSxZQUFZQyxDQUFBQTtJQUNkLE1BQU1DLDBCQUEwQjtJQUNoQyxNQUFNQyxpQkFBaUJGLEtBQUtHLE9BQU8sQ0FBQ0YseUJBQXlCO0lBQzdELE9BQU9QLEtBQUtVLEtBQUssQ0FBQ0YsZ0JBQWdCLENBQUNOLEdBQUdDO1FBQ2xDLE1BQU1RLHVCQUF1QixPQUFPUixVQUFVLFlBQVlBLE1BQU1TLEtBQUssQ0FBQztRQUN0RSxJQUFJRCxzQkFDQSxPQUFPRSxPQUFPVixNQUFNVyxTQUFTLENBQUMsR0FBR1gsTUFBTVksTUFBTSxHQUFHO1FBQ3BELE9BQU9aO0lBQ1g7QUFDSjtBQUNPLFNBQVNhLGNBQWNiLEtBQUs7SUFDL0IsSUFBSSxPQUFPQSxVQUFVLFVBQVU7UUFDM0IsTUFBTSxJQUFJYyxNQUFNLENBQUMscUNBQXFDLEVBQUUsT0FBT2QsTUFBTSxDQUFDO0lBQzFFO0lBQ0EsSUFBSTtRQUNBLE9BQU9FLFVBQVVGO0lBQ3JCLEVBQ0EsT0FBT2UsSUFBSTtRQUNQLE9BQU9mO0lBQ1g7QUFDSjtBQUNPLFNBQVNnQixrQkFBa0JoQixLQUFLO0lBQ25DLE9BQU8sT0FBT0EsVUFBVSxXQUFXQSxRQUFRTCxjQUFjSyxVQUFVO0FBQ3ZFLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3NhZmUtanNvbi9kaXN0L2VzbS9pbmRleC5qcz9lMmQ5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEpTT05TdHJpbmdpZnkgPSBkYXRhID0+IEpTT04uc3RyaW5naWZ5KGRhdGEsIChfLCB2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcImJpZ2ludFwiID8gdmFsdWUudG9TdHJpbmcoKSArIFwiblwiIDogdmFsdWUpO1xuY29uc3QgSlNPTlBhcnNlID0ganNvbiA9PiB7XG4gICAgY29uc3QgbnVtYmVyc0JpZ2dlclRoYW5NYXhJbnQgPSAvKFtcXFs6XSk/KFxcZHsxNyx9fCg/Ols5XSg/OlsxLTldMDcxOTkyNTQ3NDA5OTF8MFsxLTldNzE5OTI1NDc0MDk5MXwwMFs4LTldMTk5MjU0NzQwOTkxfDAwN1syLTldOTkyNTQ3NDA5OTF8MDA3MTk5WzMtOV01NDc0MDk5MXwwMDcxOTkyWzYtOV00NzQwOTkxfDAwNzE5OTI1WzUtOV03NDA5OTF8MDA3MTk5MjU0WzgtOV00MDk5MXwwMDcxOTkyNTQ3WzUtOV0wOTkxfDAwNzE5OTI1NDc0WzEtOV05OTF8MDA3MTk5MjU0NzQwOTlbMi05XSkpKShbLFxcfVxcXV0pL2c7XG4gICAgY29uc3Qgc2VyaWFsaXplZERhdGEgPSBqc29uLnJlcGxhY2UobnVtYmVyc0JpZ2dlclRoYW5NYXhJbnQsIFwiJDFcXFwiJDJuXFxcIiQzXCIpO1xuICAgIHJldHVybiBKU09OLnBhcnNlKHNlcmlhbGl6ZWREYXRhLCAoXywgdmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgaXNDdXN0b21Gb3JtYXRCaWdJbnQgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUubWF0Y2goL15cXGQrbiQvKTtcbiAgICAgICAgaWYgKGlzQ3VzdG9tRm9ybWF0QmlnSW50KVxuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludCh2YWx1ZS5zdWJzdHJpbmcoMCwgdmFsdWUubGVuZ3RoIC0gMSkpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHNhZmVKc29uUGFyc2UodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHNhZmUganNvbiBwYXJzZSB2YWx1ZSBvZiB0eXBlICR7dHlwZW9mIHZhbHVlfWApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTlBhcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc2FmZUpzb25TdHJpbmdpZnkodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUgOiBKU09OU3RyaW5naWZ5KHZhbHVlKSB8fCBcIlwiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIkpTT05TdHJpbmdpZnkiLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsIl8iLCJ2YWx1ZSIsInRvU3RyaW5nIiwiSlNPTlBhcnNlIiwianNvbiIsIm51bWJlcnNCaWdnZXJUaGFuTWF4SW50Iiwic2VyaWFsaXplZERhdGEiLCJyZXBsYWNlIiwicGFyc2UiLCJpc0N1c3RvbUZvcm1hdEJpZ0ludCIsIm1hdGNoIiwiQmlnSW50Iiwic3Vic3RyaW5nIiwibGVuZ3RoIiwic2FmZUpzb25QYXJzZSIsIkVycm9yIiwiX2EiLCJzYWZlSnNvblN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/sign-client/dist/index.es.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/sign-client/dist/index.es.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTH_CONTEXT: () => (/* binding */ Be),\n/* harmony export */   AUTH_KEYS_CONTEXT: () => (/* binding */ We),\n/* harmony export */   AUTH_PAIRING_TOPIC_CONTEXT: () => (/* binding */ Ze),\n/* harmony export */   AUTH_PROTOCOL: () => (/* binding */ Je),\n/* harmony export */   AUTH_PUBLIC_KEY_NAME: () => (/* binding */ ie),\n/* harmony export */   AUTH_REQUEST_CONTEXT: () => (/* binding */ et),\n/* harmony export */   AUTH_STORAGE_PREFIX: () => (/* binding */ se),\n/* harmony export */   AUTH_VERSION: () => (/* binding */ Wt),\n/* harmony export */   ENGINE_CONTEXT: () => (/* binding */ ze),\n/* harmony export */   ENGINE_QUEUE_STATES: () => (/* binding */ x),\n/* harmony export */   ENGINE_RPC_OPTS: () => (/* binding */ S),\n/* harmony export */   HISTORY_CONTEXT: () => (/* binding */ Xt),\n/* harmony export */   HISTORY_EVENTS: () => (/* binding */ Yt),\n/* harmony export */   HISTORY_STORAGE_VERSION: () => (/* binding */ Jt),\n/* harmony export */   METHODS_TO_VERIFY: () => (/* binding */ Xe),\n/* harmony export */   PROPOSAL_CONTEXT: () => (/* binding */ Fe),\n/* harmony export */   PROPOSAL_EXPIRY: () => (/* binding */ Bt),\n/* harmony export */   PROPOSAL_EXPIRY_MESSAGE: () => (/* binding */ Qe),\n/* harmony export */   REQUEST_CONTEXT: () => (/* binding */ Ye),\n/* harmony export */   SESSION_CONTEXT: () => (/* binding */ He),\n/* harmony export */   SESSION_EXPIRY: () => (/* binding */ k),\n/* harmony export */   SESSION_REQUEST_EXPIRY_BOUNDARIES: () => (/* binding */ he),\n/* harmony export */   SIGN_CLIENT_CONTEXT: () => (/* binding */ Ne),\n/* harmony export */   SIGN_CLIENT_DEFAULT: () => (/* binding */ le),\n/* harmony export */   SIGN_CLIENT_EVENTS: () => (/* binding */ Ht),\n/* harmony export */   SIGN_CLIENT_PROTOCOL: () => (/* binding */ qe),\n/* harmony export */   SIGN_CLIENT_STORAGE_OPTIONS: () => (/* binding */ zt),\n/* harmony export */   SIGN_CLIENT_STORAGE_PREFIX: () => (/* binding */ ce),\n/* harmony export */   SIGN_CLIENT_VERSION: () => (/* binding */ ve),\n/* harmony export */   SessionStore: () => (/* binding */ ps),\n/* harmony export */   SignClient: () => (/* binding */ ds),\n/* harmony export */   WALLETCONNECT_DEEPLINK_CHOICE: () => (/* binding */ Pe),\n/* harmony export */   \"default\": () => (/* binding */ pe)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/core */ \"(ssr)/./node_modules/@walletconnect/core/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/logger */ \"(ssr)/./node_modules/@walletconnect/logger/dist/index.es.js\");\n/* harmony import */ var _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/types */ \"(ssr)/./node_modules/@walletconnect/types/dist/index.es.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\n\n\n\nconst qe = \"wc\", ve = 2, Ne = \"client\", ce = `${qe}@${ve}:${Ne}:`, le = {\n    name: Ne,\n    logger: \"error\",\n    controller: !1,\n    relayUrl: \"wss://relay.walletconnect.com\"\n}, Ht = {\n    session_proposal: \"session_proposal\",\n    session_update: \"session_update\",\n    session_extend: \"session_extend\",\n    session_ping: \"session_ping\",\n    session_delete: \"session_delete\",\n    session_expire: \"session_expire\",\n    session_request: \"session_request\",\n    session_request_sent: \"session_request_sent\",\n    session_event: \"session_event\",\n    proposal_expire: \"proposal_expire\",\n    session_authenticate: \"session_authenticate\",\n    session_request_expire: \"session_request_expire\"\n}, zt = {\n    database: \":memory:\"\n}, Pe = \"WALLETCONNECT_DEEPLINK_CHOICE\", Yt = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, Xt = \"history\", Jt = \"0.3\", Fe = \"proposal\", Bt = _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.THIRTY_DAYS, Qe = \"Proposal expired\", He = \"session\", k = _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.SEVEN_DAYS, ze = \"engine\", S = {\n    wc_sessionPropose: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1100\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1101\n        },\n        reject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1120\n        },\n        autoReject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1121\n        }\n    },\n    wc_sessionSettle: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1102\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1103\n        }\n    },\n    wc_sessionUpdate: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1104\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1105\n        }\n    },\n    wc_sessionExtend: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1106\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1107\n        }\n    },\n    wc_sessionRequest: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1108\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1109\n        }\n    },\n    wc_sessionEvent: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1110\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1111\n        }\n    },\n    wc_sessionDelete: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1112\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1113\n        }\n    },\n    wc_sessionPing: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1114\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1115\n        }\n    },\n    wc_sessionAuthenticate: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_HOUR,\n            prompt: !0,\n            tag: 1116\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_HOUR,\n            prompt: !1,\n            tag: 1117\n        },\n        reject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1118\n        },\n        autoReject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1119\n        }\n    }\n}, he = {\n    min: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n    max: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.SEVEN_DAYS\n}, x = {\n    idle: \"IDLE\",\n    active: \"ACTIVE\"\n}, Ye = \"request\", Xe = [\n    \"wc_sessionPropose\",\n    \"wc_sessionRequest\",\n    \"wc_authRequest\",\n    \"wc_sessionAuthenticate\"\n], Je = \"wc\", Wt = 1.5, Be = \"auth\", We = \"authKeys\", Ze = \"pairingTopics\", et = \"requests\", se = `${Je}@${1.5}:${Be}:`, ie = `${se}:PUB_KEY`;\nvar Zt = Object.defineProperty, es = Object.defineProperties, ts = Object.getOwnPropertyDescriptors, tt = Object.getOwnPropertySymbols, ss = Object.prototype.hasOwnProperty, is = Object.prototype.propertyIsEnumerable, st = (I, n, t)=>n in I ? Zt(I, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : I[n] = t, E = (I, n)=>{\n    for(var t in n || (n = {}))ss.call(n, t) && st(I, t, n[t]);\n    if (tt) for (var t of tt(n))is.call(n, t) && st(I, t, n[t]);\n    return I;\n}, j = (I, n)=>es(I, ts(n));\nclass rs extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__.IEngine {\n    constructor(n){\n        super(n), this.name = ze, this.events = new (events__WEBPACK_IMPORTED_MODULE_1___default()), this.initialized = !1, this.requestQueue = {\n            state: x.idle,\n            queue: []\n        }, this.sessionRequestQueue = {\n            state: x.idle,\n            queue: []\n        }, this.requestQueueDelay = _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_SECOND, this.expectedPairingMethodMap = new Map, this.recentlyDeletedMap = new Map, this.recentlyDeletedLimit = 200, this.relayMessageCache = [], this.init = async ()=>{\n            this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), this.client.core.pairing.register({\n                methods: Object.keys(S)\n            }), this.initialized = !0, setTimeout(()=>{\n                this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.toMiliseconds)(this.requestQueueDelay)));\n        }, this.connect = async (t)=>{\n            await this.isInitialized();\n            const e = j(E({}, t), {\n                requiredNamespaces: t.requiredNamespaces || {},\n                optionalNamespaces: t.optionalNamespaces || {}\n            });\n            await this.isValidConnect(e);\n            const { pairingTopic: s, requiredNamespaces: i, optionalNamespaces: r, sessionProperties: o, relays: a } = e;\n            let c = s, h, l = !1;\n            try {\n                c && (l = this.client.core.pairing.pairings.get(c).active);\n            } catch (y) {\n                throw this.client.logger.error(`connect() -> pairing.get(${c}) failed`), y;\n            }\n            if (!c || !l) {\n                const { topic: y, uri: R } = await this.client.core.pairing.create();\n                c = y, h = R;\n            }\n            if (!c) {\n                const { message: y } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", `connect() pairing topic: ${c}`);\n                throw new Error(y);\n            }\n            const g = await this.client.core.crypto.generateKeyPair(), d = S.wc_sessionPropose.req.ttl || _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES, u = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(d), _ = E({\n                requiredNamespaces: i,\n                optionalNamespaces: r,\n                relays: a ?? [\n                    {\n                        protocol: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_DEFAULT_PROTOCOL\n                    }\n                ],\n                proposer: {\n                    publicKey: g,\n                    metadata: this.client.metadata\n                },\n                expiryTimestamp: u,\n                pairingTopic: c\n            }, o && {\n                sessionProperties: o\n            }), { reject: q, resolve: m, done: O } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(d, Qe);\n            this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), async ({ error: y, session: R })=>{\n                if (y) q(y);\n                else if (R) {\n                    R.self.publicKey = g;\n                    const K = j(E({}, R), {\n                        pairingTopic: _.pairingTopic,\n                        requiredNamespaces: _.requiredNamespaces,\n                        optionalNamespaces: _.optionalNamespaces\n                    });\n                    await this.client.session.set(R.topic, K), await this.setExpiry(R.topic, R.expiry), c && await this.client.core.pairing.updateMetadata({\n                        topic: c,\n                        metadata: R.peer.metadata\n                    }), this.cleanupDuplicatePairings(K), m(K);\n                }\n            });\n            const D = await this.sendRequest({\n                topic: c,\n                method: \"wc_sessionPropose\",\n                params: _,\n                throwOnFailedPublish: !0\n            });\n            return await this.setProposal(D, E({\n                id: D\n            }, _)), {\n                uri: h,\n                approval: O\n            };\n        }, this.pair = async (t)=>{\n            await this.isInitialized();\n            try {\n                return await this.client.core.pairing.pair(t);\n            } catch (e) {\n                throw this.client.logger.error(\"pair() failed\"), e;\n            }\n        }, this.approve = async (t)=>{\n            var e, s, i;\n            const r = this.client.core.eventClient.createEvent({\n                properties: {\n                    topic: (e = t?.id) == null ? void 0 : e.toString(),\n                    trace: [\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_started\n                    ]\n                }\n            });\n            try {\n                await this.isInitialized();\n            } catch (f) {\n                throw r.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.no_internet_connection), f;\n            }\n            try {\n                await this.isValidProposalId(t?.id);\n            } catch (f) {\n                throw this.client.logger.error(`approve() -> proposal.get(${t?.id}) failed`), r.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.proposal_not_found), f;\n            }\n            try {\n                await this.isValidApprove(t);\n            } catch (f) {\n                throw this.client.logger.error(\"approve() -> isValidApprove() failed\"), r.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure), f;\n            }\n            const { id: o, relayProtocol: a, namespaces: c, sessionProperties: h, sessionConfig: l } = t, g = this.client.proposal.get(o);\n            this.client.core.eventClient.deleteEvent({\n                eventId: r.eventId\n            });\n            const { pairingTopic: d, proposer: u, requiredNamespaces: _, optionalNamespaces: q } = g;\n            let m = (s = this.client.core.eventClient) == null ? void 0 : s.getEvent({\n                topic: d\n            });\n            m || (m = (i = this.client.core.eventClient) == null ? void 0 : i.createEvent({\n                type: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n                properties: {\n                    topic: d,\n                    trace: [\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success\n                    ]\n                }\n            }));\n            const O = await this.client.core.crypto.generateKeyPair(), D = u.publicKey, y = await this.client.core.crypto.generateSharedKey(O, D), R = E(E({\n                relay: {\n                    protocol: a ?? \"irn\"\n                },\n                namespaces: c,\n                controller: {\n                    publicKey: O,\n                    metadata: this.client.metadata\n                },\n                expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(k)\n            }, h && {\n                sessionProperties: h\n            }), l && {\n                sessionConfig: l\n            });\n            m.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);\n            try {\n                await this.client.core.relayer.subscribe(y);\n            } catch (f) {\n                throw m.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure), f;\n            }\n            m.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);\n            const K = j(E({}, R), {\n                topic: y,\n                requiredNamespaces: _,\n                optionalNamespaces: q,\n                pairingTopic: d,\n                acknowledged: !1,\n                self: R.controller,\n                peer: {\n                    publicKey: u.publicKey,\n                    metadata: u.metadata\n                },\n                controller: O\n            });\n            await this.client.session.set(y, K), m.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.store_session);\n            try {\n                m.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.publishing_session_settle), await this.sendRequest({\n                    topic: y,\n                    method: \"wc_sessionSettle\",\n                    params: R,\n                    throwOnFailedPublish: !0\n                }).catch((f)=>{\n                    throw m?.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.session_settle_publish_failure), f;\n                }), m.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_settle_publish_success), m.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.publishing_session_approve), await this.sendResult({\n                    id: o,\n                    topic: d,\n                    result: {\n                        relay: {\n                            protocol: a ?? \"irn\"\n                        },\n                        responderPublicKey: O\n                    },\n                    throwOnFailedPublish: !0\n                }).catch((f)=>{\n                    throw m?.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.session_approve_publish_failure), f;\n                }), m.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success);\n            } catch (f) {\n                throw this.client.logger.error(f), this.client.session.delete(y, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), await this.client.core.relayer.unsubscribe(y), f;\n            }\n            return this.client.core.eventClient.deleteEvent({\n                eventId: m.eventId\n            }), await this.client.core.pairing.updateMetadata({\n                topic: d,\n                metadata: u.metadata\n            }), await this.client.proposal.delete(o, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), await this.client.core.pairing.activate({\n                topic: d\n            }), await this.setExpiry(y, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(k)), {\n                topic: y,\n                acknowledged: ()=>Promise.resolve(this.client.session.get(y))\n            };\n        }, this.reject = async (t)=>{\n            await this.isInitialized();\n            try {\n                await this.isValidReject(t);\n            } catch (r) {\n                throw this.client.logger.error(\"reject() -> isValidReject() failed\"), r;\n            }\n            const { id: e, reason: s } = t;\n            let i;\n            try {\n                i = this.client.proposal.get(e).pairingTopic;\n            } catch (r) {\n                throw this.client.logger.error(`reject() -> proposal.get(${e}) failed`), r;\n            }\n            i && (await this.sendError({\n                id: e,\n                topic: i,\n                error: s,\n                rpcOpts: S.wc_sessionPropose.reject\n            }), await this.client.proposal.delete(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")));\n        }, this.update = async (t)=>{\n            await this.isInitialized();\n            try {\n                await this.isValidUpdate(t);\n            } catch (l) {\n                throw this.client.logger.error(\"update() -> isValidUpdate() failed\"), l;\n            }\n            const { topic: e, namespaces: s } = t, { done: i, resolve: r, reject: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(), a = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), c = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), h = this.client.session.get(e).namespaces;\n            return this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", a), ({ error: l })=>{\n                l ? o(l) : r();\n            }), await this.client.session.update(e, {\n                namespaces: s\n            }), await this.sendRequest({\n                topic: e,\n                method: \"wc_sessionUpdate\",\n                params: {\n                    namespaces: s\n                },\n                throwOnFailedPublish: !0,\n                clientRpcId: a,\n                relayRpcId: c\n            }).catch((l)=>{\n                this.client.logger.error(l), this.client.session.update(e, {\n                    namespaces: h\n                }), o(l);\n            }), {\n                acknowledged: i\n            };\n        }, this.extend = async (t)=>{\n            await this.isInitialized();\n            try {\n                await this.isValidExtend(t);\n            } catch (a) {\n                throw this.client.logger.error(\"extend() -> isValidExtend() failed\"), a;\n            }\n            const { topic: e } = t, s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), { done: i, resolve: r, reject: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)();\n            return this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s), ({ error: a })=>{\n                a ? o(a) : r();\n            }), await this.setExpiry(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(k)), this.sendRequest({\n                topic: e,\n                method: \"wc_sessionExtend\",\n                params: {},\n                clientRpcId: s,\n                throwOnFailedPublish: !0\n            }).catch((a)=>{\n                o(a);\n            }), {\n                acknowledged: i\n            };\n        }, this.request = async (t)=>{\n            await this.isInitialized();\n            try {\n                await this.isValidRequest(t);\n            } catch (d) {\n                throw this.client.logger.error(\"request() -> isValidRequest() failed\"), d;\n            }\n            const { chainId: e, request: s, topic: i, expiry: r = S.wc_sessionRequest.req.ttl } = t, o = this.client.session.get(i), a = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), c = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), { done: h, resolve: l, reject: g } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(r, \"Request expired. Please try again.\");\n            return this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", a), ({ error: d, result: u })=>{\n                d ? g(d) : l(u);\n            }), await Promise.all([\n                new Promise(async (d)=>{\n                    await this.sendRequest({\n                        clientRpcId: a,\n                        relayRpcId: c,\n                        topic: i,\n                        method: \"wc_sessionRequest\",\n                        params: {\n                            request: j(E({}, s), {\n                                expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(r)\n                            }),\n                            chainId: e\n                        },\n                        expiry: r,\n                        throwOnFailedPublish: !0\n                    }).catch((u)=>g(u)), this.client.events.emit(\"session_request_sent\", {\n                        topic: i,\n                        request: s,\n                        chainId: e,\n                        id: a\n                    }), d();\n                }),\n                new Promise(async (d)=>{\n                    var u;\n                    if (!((u = o.sessionConfig) != null && u.disableDeepLink)) {\n                        const _ = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDeepLink)(this.client.core.storage, Pe);\n                        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.handleDeeplinkRedirect)({\n                            id: a,\n                            topic: i,\n                            wcDeepLink: _\n                        });\n                    }\n                    d();\n                }),\n                h()\n            ]).then((d)=>d[2]);\n        }, this.respond = async (t)=>{\n            await this.isInitialized(), await this.isValidRespond(t);\n            const { topic: e, response: s } = t, { id: i } = s;\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(s) ? await this.sendResult({\n                id: i,\n                topic: e,\n                result: s.result,\n                throwOnFailedPublish: !0\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(s) && await this.sendError({\n                id: i,\n                topic: e,\n                error: s.error\n            }), this.cleanupAfterResponse(t);\n        }, this.ping = async (t)=>{\n            await this.isInitialized();\n            try {\n                await this.isValidPing(t);\n            } catch (s) {\n                throw this.client.logger.error(\"ping() -> isValidPing() failed\"), s;\n            }\n            const { topic: e } = t;\n            if (this.client.session.keys.includes(e)) {\n                const s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), i = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), { done: r, resolve: o, reject: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)();\n                this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s), ({ error: c })=>{\n                    c ? a(c) : o();\n                }), await Promise.all([\n                    this.sendRequest({\n                        topic: e,\n                        method: \"wc_sessionPing\",\n                        params: {},\n                        throwOnFailedPublish: !0,\n                        clientRpcId: s,\n                        relayRpcId: i\n                    }),\n                    r()\n                ]);\n            } else this.client.core.pairing.pairings.keys.includes(e) && await this.client.core.pairing.ping({\n                topic: e\n            });\n        }, this.emit = async (t)=>{\n            await this.isInitialized(), await this.isValidEmit(t);\n            const { topic: e, event: s, chainId: i } = t, r = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString();\n            await this.sendRequest({\n                topic: e,\n                method: \"wc_sessionEvent\",\n                params: {\n                    event: s,\n                    chainId: i\n                },\n                throwOnFailedPublish: !0,\n                relayRpcId: r\n            });\n        }, this.disconnect = async (t)=>{\n            await this.isInitialized(), await this.isValidDisconnect(t);\n            const { topic: e } = t;\n            if (this.client.session.keys.includes(e)) await this.sendRequest({\n                topic: e,\n                method: \"wc_sessionDelete\",\n                params: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"),\n                throwOnFailedPublish: !0\n            }), await this.deleteSession({\n                topic: e,\n                emitEvent: !1\n            });\n            else if (this.client.core.pairing.pairings.keys.includes(e)) await this.client.core.pairing.disconnect({\n                topic: e\n            });\n            else {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISMATCHED_TOPIC\", `Session or pairing topic not found: ${e}`);\n                throw new Error(s);\n            }\n        }, this.find = (t)=>(this.isInitialized(), this.client.session.getAll().filter((e)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isSessionCompatible)(e, t))), this.getPendingSessionRequests = ()=>this.client.pendingRequest.getAll(), this.authenticate = async (t)=>{\n            this.isInitialized(), this.isValidAuthenticate(t);\n            const { chains: e, statement: s = \"\", uri: i, domain: r, nonce: o, type: a, exp: c, nbf: h, methods: l = [], expiry: g } = t, d = [\n                ...t.resources || []\n            ], { topic: u, uri: _ } = await this.client.core.pairing.create({\n                methods: [\n                    \"wc_sessionAuthenticate\"\n                ]\n            });\n            this.client.logger.info({\n                message: \"Generated new pairing\",\n                pairing: {\n                    topic: u,\n                    uri: _\n                }\n            });\n            const q = await this.client.core.crypto.generateKeyPair(), m = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashKey)(q);\n            if (await Promise.all([\n                this.client.auth.authKeys.set(ie, {\n                    responseTopic: m,\n                    publicKey: q\n                }),\n                this.client.auth.pairingTopics.set(m, {\n                    topic: m,\n                    pairingTopic: u\n                })\n            ]), await this.client.core.relayer.subscribe(m), this.client.logger.info(`sending request to new pairing topic: ${u}`), l.length > 0) {\n                const { namespace: A } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(e[0]);\n                let v = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createEncodedRecap)(A, \"request\", l);\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRecapFromResources)(d) && (v = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeEncodedRecaps)(v, d.pop())), d.push(v);\n            }\n            const O = g && g > S.wc_sessionAuthenticate.req.ttl ? g : S.wc_sessionAuthenticate.req.ttl, D = {\n                authPayload: {\n                    type: a ?? \"caip122\",\n                    chains: e,\n                    statement: s,\n                    aud: i,\n                    domain: r,\n                    version: \"1\",\n                    nonce: o,\n                    iat: new Date().toISOString(),\n                    exp: c,\n                    nbf: h,\n                    resources: d\n                },\n                requester: {\n                    publicKey: q,\n                    metadata: this.client.metadata\n                },\n                expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(O)\n            }, y = {\n                eip155: {\n                    chains: e,\n                    methods: [\n                        ...new Set([\n                            \"personal_sign\",\n                            ...l\n                        ])\n                    ],\n                    events: [\n                        \"chainChanged\",\n                        \"accountsChanged\"\n                    ]\n                }\n            }, R = {\n                requiredNamespaces: {},\n                optionalNamespaces: y,\n                relays: [\n                    {\n                        protocol: \"irn\"\n                    }\n                ],\n                pairingTopic: u,\n                proposer: {\n                    publicKey: q,\n                    metadata: this.client.metadata\n                },\n                expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(S.wc_sessionPropose.req.ttl)\n            }, { done: K, resolve: f, reject: de } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(O, \"Request expired\"), re = async ({ error: A, session: v })=>{\n                if (this.events.off((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", F), ue), A) de(A);\n                else if (v) {\n                    v.self.publicKey = q, await this.client.session.set(v.topic, v), await this.setExpiry(v.topic, v.expiry), u && await this.client.core.pairing.updateMetadata({\n                        topic: u,\n                        metadata: v.peer.metadata\n                    });\n                    const Q = this.client.session.get(v.topic);\n                    await this.deleteProposal(B), f({\n                        session: Q\n                    });\n                }\n            }, ue = async (A)=>{\n                if (await this.deletePendingAuthRequest(F, {\n                    message: \"fulfilled\",\n                    code: 0\n                }), A.error) {\n                    const W = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n                    return A.error.code === W.code ? void 0 : (this.events.off((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), re), de(A.error.message));\n                }\n                await this.deleteProposal(B), this.events.off((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), re);\n                const { cacaos: v, responder: Q } = A.result, ge = [], Te = [];\n                for (const W of v){\n                    await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.validateSignedCacao)({\n                        cacao: W,\n                        projectId: this.client.core.projectId\n                    }) || (this.client.logger.error(W, \"Signature verification failed\"), de((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\")));\n                    const { p: we } = W, ye = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRecapFromResources)(we.resources), Oe = [\n                        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getNamespacedDidChainId)(we.iss)\n                    ], rt = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDidAddress)(we.iss);\n                    if (ye) {\n                        const me = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getMethodsFromRecap)(ye), nt = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getChainsFromRecap)(ye);\n                        ge.push(...me), Oe.push(...nt);\n                    }\n                    for (const me of Oe)Te.push(`${me}:${rt}`);\n                }\n                const ne = await this.client.core.crypto.generateSharedKey(q, Q.publicKey);\n                let oe;\n                ge.length > 0 && (oe = {\n                    topic: ne,\n                    acknowledged: !0,\n                    self: {\n                        publicKey: q,\n                        metadata: this.client.metadata\n                    },\n                    peer: Q,\n                    controller: Q.publicKey,\n                    expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(k),\n                    requiredNamespaces: {},\n                    optionalNamespaces: {},\n                    relay: {\n                        protocol: \"irn\"\n                    },\n                    pairingTopic: u,\n                    namespaces: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.buildNamespacesFromAuth)([\n                        ...new Set(ge)\n                    ], [\n                        ...new Set(Te)\n                    ])\n                }, await this.client.core.relayer.subscribe(ne), await this.client.session.set(ne, oe), u && await this.client.core.pairing.updateMetadata({\n                    topic: u,\n                    metadata: Q.metadata\n                }), oe = this.client.session.get(ne)), f({\n                    auths: v,\n                    session: oe\n                });\n            }, F = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), B = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)();\n            this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), re), this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", F), ue);\n            try {\n                await Promise.all([\n                    this.sendRequest({\n                        topic: u,\n                        method: \"wc_sessionAuthenticate\",\n                        params: D,\n                        expiry: t.expiry,\n                        throwOnFailedPublish: !0,\n                        clientRpcId: F\n                    }),\n                    this.sendRequest({\n                        topic: u,\n                        method: \"wc_sessionPropose\",\n                        params: R,\n                        expiry: S.wc_sessionPropose.req.ttl,\n                        throwOnFailedPublish: !0,\n                        clientRpcId: B\n                    })\n                ]);\n            } catch (A) {\n                throw this.events.off((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), re), this.events.off((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", F), ue), A;\n            }\n            return await this.setProposal(B, E({\n                id: B\n            }, R)), await this.setAuthRequest(F, {\n                request: j(E({}, D), {\n                    verifyContext: {}\n                }),\n                pairingTopic: u\n            }), {\n                uri: _,\n                response: K\n            };\n        }, this.approveSessionAuthenticate = async (t)=>{\n            const { id: e, auths: s } = t, i = this.client.core.eventClient.createEvent({\n                properties: {\n                    topic: e.toString(),\n                    trace: [\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started\n                    ]\n                }\n            });\n            try {\n                this.isInitialized();\n            } catch (_) {\n                throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection), _;\n            }\n            const r = this.getPendingAuthRequest(e);\n            if (!r) throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${e}`);\n            const o = r.requester.publicKey, a = await this.client.core.crypto.generateKeyPair(), c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashKey)(o), h = {\n                type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_1,\n                receiverPublicKey: o,\n                senderPublicKey: a\n            }, l = [], g = [];\n            for (const _ of s){\n                if (!await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.validateSignedCacao)({\n                    cacao: _,\n                    projectId: this.client.core.projectId\n                })) {\n                    i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);\n                    const y = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\");\n                    throw await this.sendError({\n                        id: e,\n                        topic: c,\n                        error: y,\n                        encodeOpts: h\n                    }), new Error(y.message);\n                }\n                i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);\n                const { p: q } = _, m = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRecapFromResources)(q.resources), O = [\n                    (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getNamespacedDidChainId)(q.iss)\n                ], D = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDidAddress)(q.iss);\n                if (m) {\n                    const y = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getMethodsFromRecap)(m), R = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getChainsFromRecap)(m);\n                    l.push(...y), O.push(...R);\n                }\n                for (const y of O)g.push(`${y}:${D}`);\n            }\n            const d = await this.client.core.crypto.generateSharedKey(a, o);\n            i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);\n            let u;\n            if (l?.length > 0) {\n                u = {\n                    topic: d,\n                    acknowledged: !0,\n                    self: {\n                        publicKey: a,\n                        metadata: this.client.metadata\n                    },\n                    peer: {\n                        publicKey: o,\n                        metadata: r.requester.metadata\n                    },\n                    controller: o,\n                    expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(k),\n                    authentication: s,\n                    requiredNamespaces: {},\n                    optionalNamespaces: {},\n                    relay: {\n                        protocol: \"irn\"\n                    },\n                    pairingTopic: r.pairingTopic,\n                    namespaces: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.buildNamespacesFromAuth)([\n                        ...new Set(l)\n                    ], [\n                        ...new Set(g)\n                    ])\n                }, i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);\n                try {\n                    await this.client.core.relayer.subscribe(d);\n                } catch (_) {\n                    throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure), _;\n                }\n                i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success), await this.client.session.set(d, u), i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session), await this.client.core.pairing.updateMetadata({\n                    topic: r.pairingTopic,\n                    metadata: r.requester.metadata\n                });\n            }\n            i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);\n            try {\n                await this.sendResult({\n                    topic: c,\n                    id: e,\n                    result: {\n                        cacaos: s,\n                        responder: {\n                            publicKey: a,\n                            metadata: this.client.metadata\n                        }\n                    },\n                    encodeOpts: h,\n                    throwOnFailedPublish: !0\n                });\n            } catch (_) {\n                throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure), _;\n            }\n            return await this.client.auth.requests.delete(e, {\n                message: \"fulfilled\",\n                code: 0\n            }), await this.client.core.pairing.activate({\n                topic: r.pairingTopic\n            }), this.client.core.eventClient.deleteEvent({\n                eventId: i.eventId\n            }), {\n                session: u\n            };\n        }, this.rejectSessionAuthenticate = async (t)=>{\n            await this.isInitialized();\n            const { id: e, reason: s } = t, i = this.getPendingAuthRequest(e);\n            if (!i) throw new Error(`Could not find pending auth request with id ${e}`);\n            const r = i.requester.publicKey, o = await this.client.core.crypto.generateKeyPair(), a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashKey)(r), c = {\n                type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_1,\n                receiverPublicKey: r,\n                senderPublicKey: o\n            };\n            await this.sendError({\n                id: e,\n                topic: a,\n                error: s,\n                encodeOpts: c,\n                rpcOpts: S.wc_sessionAuthenticate.reject\n            }), await this.client.auth.requests.delete(e, {\n                message: \"rejected\",\n                code: 0\n            }), await this.client.proposal.delete(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"));\n        }, this.formatAuthMessage = (t)=>{\n            this.isInitialized();\n            const { request: e, iss: s } = t;\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.formatMessage)(e, s);\n        }, this.processRelayMessageCache = ()=>{\n            setTimeout(async ()=>{\n                if (this.relayMessageCache.length !== 0) for(; this.relayMessageCache.length > 0;)try {\n                    const t = this.relayMessageCache.shift();\n                    t && await this.onRelayMessage(t);\n                } catch (t) {\n                    this.client.logger.error(t);\n                }\n            }, 50);\n        }, this.cleanupDuplicatePairings = async (t)=>{\n            if (t.pairingTopic) try {\n                const e = this.client.core.pairing.pairings.get(t.pairingTopic), s = this.client.core.pairing.pairings.getAll().filter((i)=>{\n                    var r, o;\n                    return ((r = i.peerMetadata) == null ? void 0 : r.url) && ((o = i.peerMetadata) == null ? void 0 : o.url) === t.peer.metadata.url && i.topic && i.topic !== e.topic;\n                });\n                if (s.length === 0) return;\n                this.client.logger.info(`Cleaning up ${s.length} duplicate pairing(s)`), await Promise.all(s.map((i)=>this.client.core.pairing.disconnect({\n                        topic: i.topic\n                    }))), this.client.logger.info(\"Duplicate pairings clean up finished\");\n            } catch (e) {\n                this.client.logger.error(e);\n            }\n        }, this.deleteSession = async (t)=>{\n            var e;\n            const { topic: s, expirerHasDeleted: i = !1, emitEvent: r = !0, id: o = 0 } = t, { self: a } = this.client.session.get(s);\n            await this.client.core.relayer.unsubscribe(s), await this.client.session.delete(s, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), this.addToRecentlyDeleted(s, \"session\"), this.client.core.crypto.keychain.has(a.publicKey) && await this.client.core.crypto.deleteKeyPair(a.publicKey), this.client.core.crypto.keychain.has(s) && await this.client.core.crypto.deleteSymKey(s), i || this.client.core.expirer.del(s), this.client.core.storage.removeItem(Pe).catch((c)=>this.client.logger.warn(c)), this.getPendingSessionRequests().forEach((c)=>{\n                c.topic === s && this.deletePendingSessionRequest(c.id, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"));\n            }), s === ((e = this.sessionRequestQueue.queue[0]) == null ? void 0 : e.topic) && (this.sessionRequestQueue.state = x.idle), r && this.client.events.emit(\"session_delete\", {\n                id: o,\n                topic: s\n            });\n        }, this.deleteProposal = async (t, e)=>{\n            if (e) try {\n                const s = this.client.proposal.get(t), i = this.client.core.eventClient.getEvent({\n                    topic: s.pairingTopic\n                });\n                i?.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.proposal_expired);\n            } catch  {}\n            await Promise.all([\n                this.client.proposal.delete(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")),\n                e ? Promise.resolve() : this.client.core.expirer.del(t)\n            ]), this.addToRecentlyDeleted(t, \"proposal\");\n        }, this.deletePendingSessionRequest = async (t, e, s = !1)=>{\n            await Promise.all([\n                this.client.pendingRequest.delete(t, e),\n                s ? Promise.resolve() : this.client.core.expirer.del(t)\n            ]), this.addToRecentlyDeleted(t, \"request\"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i)=>i.id !== t), s && (this.sessionRequestQueue.state = x.idle, this.client.events.emit(\"session_request_expire\", {\n                id: t\n            }));\n        }, this.deletePendingAuthRequest = async (t, e, s = !1)=>{\n            await Promise.all([\n                this.client.auth.requests.delete(t, e),\n                s ? Promise.resolve() : this.client.core.expirer.del(t)\n            ]);\n        }, this.setExpiry = async (t, e)=>{\n            this.client.session.keys.includes(t) && (this.client.core.expirer.set(t, e), await this.client.session.update(t, {\n                expiry: e\n            }));\n        }, this.setProposal = async (t, e)=>{\n            this.client.core.expirer.set(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(S.wc_sessionPropose.req.ttl)), await this.client.proposal.set(t, e);\n        }, this.setAuthRequest = async (t, e)=>{\n            const { request: s, pairingTopic: i } = e;\n            this.client.core.expirer.set(t, s.expiryTimestamp), await this.client.auth.requests.set(t, {\n                authPayload: s.authPayload,\n                requester: s.requester,\n                expiryTimestamp: s.expiryTimestamp,\n                id: t,\n                pairingTopic: i,\n                verifyContext: s.verifyContext\n            });\n        }, this.setPendingSessionRequest = async (t)=>{\n            const { id: e, topic: s, params: i, verifyContext: r } = t, o = i.request.expiryTimestamp || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(S.wc_sessionRequest.req.ttl);\n            this.client.core.expirer.set(e, o), await this.client.pendingRequest.set(e, {\n                id: e,\n                topic: s,\n                params: i,\n                verifyContext: r\n            });\n        }, this.sendRequest = async (t)=>{\n            const { topic: e, method: s, params: i, expiry: r, relayRpcId: o, clientRpcId: a, throwOnFailedPublish: c } = t, h = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(s, i, a);\n            let l;\n            try {\n                l = await this.client.core.crypto.encode(e, h);\n            } catch (u) {\n                throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${e} failed`), u;\n            }\n            let g;\n            if (Xe.includes(s)) {\n                const u = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(h)), _ = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(l);\n                g = await this.client.core.verify.register({\n                    id: _,\n                    decryptedId: u\n                });\n            }\n            const d = S[s].req;\n            return d.attestation = g, r && (d.ttl = r), o && (d.id = o), this.client.core.history.set(e, h), c ? (d.internal = j(E({}, d.internal), {\n                throwOnFailedPublish: !0\n            }), await this.client.core.relayer.publish(e, l, d)) : this.client.core.relayer.publish(e, l, d).catch((u)=>this.client.logger.error(u)), h.id;\n        }, this.sendResult = async (t)=>{\n            const { id: e, topic: s, result: i, throwOnFailedPublish: r, encodeOpts: o } = t, a = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcResult)(e, i);\n            let c;\n            try {\n                c = await this.client.core.crypto.encode(s, a, o);\n            } catch (g) {\n                throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s} failed`), g;\n            }\n            let h;\n            try {\n                h = await this.client.core.history.get(s, e);\n            } catch (g) {\n                throw this.client.logger.error(`sendResult() -> history.get(${s}, ${e}) failed`), g;\n            }\n            const l = S[h.request.method].res;\n            r ? (l.internal = j(E({}, l.internal), {\n                throwOnFailedPublish: !0\n            }), await this.client.core.relayer.publish(s, c, l)) : this.client.core.relayer.publish(s, c, l).catch((g)=>this.client.logger.error(g)), await this.client.core.history.resolve(a);\n        }, this.sendError = async (t)=>{\n            const { id: e, topic: s, error: i, encodeOpts: r, rpcOpts: o } = t, a = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError)(e, i);\n            let c;\n            try {\n                c = await this.client.core.crypto.encode(s, a, r);\n            } catch (g) {\n                throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s} failed`), g;\n            }\n            let h;\n            try {\n                h = await this.client.core.history.get(s, e);\n            } catch (g) {\n                throw this.client.logger.error(`sendError() -> history.get(${s}, ${e}) failed`), g;\n            }\n            const l = o || S[h.request.method].res;\n            this.client.core.relayer.publish(s, c, l), await this.client.core.history.resolve(a);\n        }, this.cleanup = async ()=>{\n            const t = [], e = [];\n            this.client.session.getAll().forEach((s)=>{\n                let i = !1;\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(s.expiry) && (i = !0), this.client.core.crypto.keychain.has(s.topic) || (i = !0), i && t.push(s.topic);\n            }), this.client.proposal.getAll().forEach((s)=>{\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(s.expiryTimestamp) && e.push(s.id);\n            }), await Promise.all([\n                ...t.map((s)=>this.deleteSession({\n                        topic: s\n                    })),\n                ...e.map((s)=>this.deleteProposal(s))\n            ]);\n        }, this.onRelayEventRequest = async (t)=>{\n            this.requestQueue.queue.push(t), await this.processRequestsQueue();\n        }, this.processRequestsQueue = async ()=>{\n            if (this.requestQueue.state === x.active) {\n                this.client.logger.info(\"Request queue already active, skipping...\");\n                return;\n            }\n            for(this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0;){\n                this.requestQueue.state = x.active;\n                const t = this.requestQueue.queue.shift();\n                if (t) try {\n                    await this.processRequest(t);\n                } catch (e) {\n                    this.client.logger.warn(e);\n                }\n            }\n            this.requestQueue.state = x.idle;\n        }, this.processRequest = async (t)=>{\n            const { topic: e, payload: s, attestation: i, encryptedId: r } = t, o = s.method;\n            if (!this.shouldIgnorePairingRequest({\n                topic: e,\n                requestMethod: o\n            })) switch(o){\n                case \"wc_sessionPropose\":\n                    return await this.onSessionProposeRequest({\n                        topic: e,\n                        payload: s,\n                        attestation: i,\n                        encryptedId: r\n                    });\n                case \"wc_sessionSettle\":\n                    return await this.onSessionSettleRequest(e, s);\n                case \"wc_sessionUpdate\":\n                    return await this.onSessionUpdateRequest(e, s);\n                case \"wc_sessionExtend\":\n                    return await this.onSessionExtendRequest(e, s);\n                case \"wc_sessionPing\":\n                    return await this.onSessionPingRequest(e, s);\n                case \"wc_sessionDelete\":\n                    return await this.onSessionDeleteRequest(e, s);\n                case \"wc_sessionRequest\":\n                    return await this.onSessionRequest({\n                        topic: e,\n                        payload: s,\n                        attestation: i,\n                        encryptedId: r\n                    });\n                case \"wc_sessionEvent\":\n                    return await this.onSessionEventRequest(e, s);\n                case \"wc_sessionAuthenticate\":\n                    return await this.onSessionAuthenticateRequest({\n                        topic: e,\n                        payload: s,\n                        attestation: i,\n                        encryptedId: r\n                    });\n                default:\n                    return this.client.logger.info(`Unsupported request method ${o}`);\n            }\n        }, this.onRelayEventResponse = async (t)=>{\n            const { topic: e, payload: s } = t, i = (await this.client.core.history.get(e, s.id)).request.method;\n            switch(i){\n                case \"wc_sessionPropose\":\n                    return this.onSessionProposeResponse(e, s);\n                case \"wc_sessionSettle\":\n                    return this.onSessionSettleResponse(e, s);\n                case \"wc_sessionUpdate\":\n                    return this.onSessionUpdateResponse(e, s);\n                case \"wc_sessionExtend\":\n                    return this.onSessionExtendResponse(e, s);\n                case \"wc_sessionPing\":\n                    return this.onSessionPingResponse(e, s);\n                case \"wc_sessionRequest\":\n                    return this.onSessionRequestResponse(e, s);\n                case \"wc_sessionAuthenticate\":\n                    return this.onSessionAuthenticateResponse(e, s);\n                default:\n                    return this.client.logger.info(`Unsupported response method ${i}`);\n            }\n        }, this.onRelayEventUnknownPayload = (t)=>{\n            const { topic: e } = t, { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `Decoded payload on topic ${e} is not identifiable as a JSON-RPC request or a response.`);\n            throw new Error(s);\n        }, this.shouldIgnorePairingRequest = (t)=>{\n            const { topic: e, requestMethod: s } = t, i = this.expectedPairingMethodMap.get(e);\n            return !i || i.includes(s) ? !1 : !!(i.includes(\"wc_sessionAuthenticate\") && this.client.events.listenerCount(\"session_authenticate\") > 0);\n        }, this.onSessionProposeRequest = async (t)=>{\n            const { topic: e, payload: s, attestation: i, encryptedId: r } = t, { params: o, id: a } = s;\n            try {\n                const c = this.client.core.eventClient.getEvent({\n                    topic: e\n                });\n                this.isValidConnect(E({}, s.params));\n                const h = o.expiryTimestamp || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(S.wc_sessionPropose.req.ttl), l = E({\n                    id: a,\n                    pairingTopic: e,\n                    expiryTimestamp: h\n                }, o);\n                await this.setProposal(a, l);\n                const g = await this.getVerifyContext({\n                    attestationId: i,\n                    hash: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(s)),\n                    encryptedId: r,\n                    metadata: l.proposer.metadata\n                });\n                this.client.events.listenerCount(\"session_proposal\") === 0 && (console.warn(\"No listener for session_proposal event\"), c?.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found)), c?.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal), this.client.events.emit(\"session_proposal\", {\n                    id: a,\n                    params: l,\n                    verifyContext: g\n                });\n            } catch (c) {\n                await this.sendError({\n                    id: a,\n                    topic: e,\n                    error: c,\n                    rpcOpts: S.wc_sessionPropose.autoReject\n                }), this.client.logger.error(c);\n            }\n        }, this.onSessionProposeResponse = async (t, e)=>{\n            const { id: s } = e;\n            if ((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(e)) {\n                const { result: i } = e;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    result: i\n                });\n                const r = this.client.proposal.get(s);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    proposal: r\n                });\n                const o = r.proposer.publicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    selfPublicKey: o\n                });\n                const a = i.responderPublicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    peerPublicKey: a\n                });\n                const c = await this.client.core.crypto.generateSharedKey(o, a);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    sessionTopic: c\n                });\n                const h = await this.client.core.relayer.subscribe(c);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    subscriptionId: h\n                }), await this.client.core.pairing.activate({\n                    topic: t\n                });\n            } else if ((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(e)) {\n                await this.client.proposal.delete(s, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"));\n                const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\");\n                if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners, 954`);\n                this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), {\n                    error: e.error\n                });\n            }\n        }, this.onSessionSettleRequest = async (t, e)=>{\n            const { id: s, params: i } = e;\n            try {\n                this.isValidSessionSettleRequest(i);\n                const { relay: r, controller: o, expiry: a, namespaces: c, sessionProperties: h, sessionConfig: l } = e.params, g = E(E({\n                    topic: t,\n                    relay: r,\n                    expiry: a,\n                    namespaces: c,\n                    acknowledged: !0,\n                    pairingTopic: \"\",\n                    requiredNamespaces: {},\n                    optionalNamespaces: {},\n                    controller: o.publicKey,\n                    self: {\n                        publicKey: \"\",\n                        metadata: this.client.metadata\n                    },\n                    peer: {\n                        publicKey: o.publicKey,\n                        metadata: o.metadata\n                    }\n                }, h && {\n                    sessionProperties: h\n                }), l && {\n                    sessionConfig: l\n                }), d = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\");\n                if (this.events.listenerCount(d) === 0) throw new Error(`emitting ${d} without any listeners 997`);\n                this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), {\n                    session: g\n                }), await this.sendResult({\n                    id: e.id,\n                    topic: t,\n                    result: !0,\n                    throwOnFailedPublish: !0\n                });\n            } catch (r) {\n                await this.sendError({\n                    id: s,\n                    topic: t,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }, this.onSessionSettleResponse = async (t, e)=>{\n            const { id: s } = e;\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(e) ? (await this.client.session.update(t, {\n                acknowledged: !0\n            }), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_approve\", s), {})) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(e) && (await this.client.session.delete(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_approve\", s), {\n                error: e.error\n            }));\n        }, this.onSessionUpdateRequest = async (t, e)=>{\n            const { params: s, id: i } = e;\n            try {\n                const r = `${t}_session_update`, o = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.get(r);\n                if (o && this.isRequestOutOfSync(o, i)) {\n                    this.client.logger.info(`Discarding out of sync request - ${i}`), this.sendError({\n                        id: i,\n                        topic: t,\n                        error: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"INVALID_UPDATE_REQUEST\")\n                    });\n                    return;\n                }\n                this.isValidUpdate(E({\n                    topic: t\n                }, s));\n                try {\n                    _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.set(r, i), await this.client.session.update(t, {\n                        namespaces: s.namespaces\n                    }), await this.sendResult({\n                        id: i,\n                        topic: t,\n                        result: !0,\n                        throwOnFailedPublish: !0\n                    });\n                } catch (a) {\n                    throw _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.delete(r), a;\n                }\n                this.client.events.emit(\"session_update\", {\n                    id: i,\n                    topic: t,\n                    params: s\n                });\n            } catch (r) {\n                await this.sendError({\n                    id: i,\n                    topic: t,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }, this.isRequestOutOfSync = (t, e)=>parseInt(e.toString().slice(0, -3)) <= parseInt(t.toString().slice(0, -3)), this.onSessionUpdateResponse = (t, e)=>{\n            const { id: s } = e, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners`);\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(e) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", s), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(e) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", s), {\n                error: e.error\n            });\n        }, this.onSessionExtendRequest = async (t, e)=>{\n            const { id: s } = e;\n            try {\n                this.isValidExtend({\n                    topic: t\n                }), await this.setExpiry(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(k)), await this.sendResult({\n                    id: s,\n                    topic: t,\n                    result: !0,\n                    throwOnFailedPublish: !0\n                }), this.client.events.emit(\"session_extend\", {\n                    id: s,\n                    topic: t\n                });\n            } catch (i) {\n                await this.sendError({\n                    id: s,\n                    topic: t,\n                    error: i\n                }), this.client.logger.error(i);\n            }\n        }, this.onSessionExtendResponse = (t, e)=>{\n            const { id: s } = e, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners`);\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(e) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(e) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s), {\n                error: e.error\n            });\n        }, this.onSessionPingRequest = async (t, e)=>{\n            const { id: s } = e;\n            try {\n                this.isValidPing({\n                    topic: t\n                }), await this.sendResult({\n                    id: s,\n                    topic: t,\n                    result: !0,\n                    throwOnFailedPublish: !0\n                }), this.client.events.emit(\"session_ping\", {\n                    id: s,\n                    topic: t\n                });\n            } catch (i) {\n                await this.sendError({\n                    id: s,\n                    topic: t,\n                    error: i\n                }), this.client.logger.error(i);\n            }\n        }, this.onSessionPingResponse = (t, e)=>{\n            const { id: s } = e, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners`);\n            setTimeout(()=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(e) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(e) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s), {\n                    error: e.error\n                });\n            }, 500);\n        }, this.onSessionDeleteRequest = async (t, e)=>{\n            const { id: s } = e;\n            try {\n                this.isValidDisconnect({\n                    topic: t,\n                    reason: e.params\n                }), await Promise.all([\n                    new Promise((i)=>{\n                        this.client.core.relayer.once(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_EVENTS.publish, async ()=>{\n                            i(await this.deleteSession({\n                                topic: t,\n                                id: s\n                            }));\n                        });\n                    }),\n                    this.sendResult({\n                        id: s,\n                        topic: t,\n                        result: !0,\n                        throwOnFailedPublish: !0\n                    }),\n                    this.cleanupPendingSentRequestsForTopic({\n                        topic: t,\n                        error: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")\n                    })\n                ]);\n            } catch (i) {\n                this.client.logger.error(i);\n            }\n        }, this.onSessionRequest = async (t)=>{\n            var e;\n            const { topic: s, payload: i, attestation: r, encryptedId: o } = t, { id: a, params: c } = i;\n            try {\n                await this.isValidRequest(E({\n                    topic: s\n                }, c));\n                const h = this.client.session.get(s), l = await this.getVerifyContext({\n                    attestationId: r,\n                    hash: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"wc_sessionRequest\", c, a))),\n                    encryptedId: o,\n                    metadata: h.peer.metadata\n                }), g = {\n                    id: a,\n                    topic: s,\n                    params: c,\n                    verifyContext: l\n                };\n                await this.setPendingSessionRequest(g), (e = this.client.signConfig) != null && e.disableRequestQueue ? this.emitSessionRequest(g) : (this.addSessionRequestToSessionRequestQueue(g), this.processSessionRequestQueue());\n            } catch (h) {\n                await this.sendError({\n                    id: a,\n                    topic: s,\n                    error: h\n                }), this.client.logger.error(h);\n            }\n        }, this.onSessionRequestResponse = (t, e)=>{\n            const { id: s } = e, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners`);\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(e) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                result: e.result\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(e) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                error: e.error\n            });\n        }, this.onSessionEventRequest = async (t, e)=>{\n            const { id: s, params: i } = e;\n            try {\n                const r = `${t}_session_event_${i.event.name}`, o = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.get(r);\n                if (o && this.isRequestOutOfSync(o, s)) {\n                    this.client.logger.info(`Discarding out of sync request - ${s}`);\n                    return;\n                }\n                this.isValidEmit(E({\n                    topic: t\n                }, i)), this.client.events.emit(\"session_event\", {\n                    id: s,\n                    topic: t,\n                    params: i\n                }), _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.set(r, s);\n            } catch (r) {\n                await this.sendError({\n                    id: s,\n                    topic: t,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }, this.onSessionAuthenticateResponse = (t, e)=>{\n            const { id: s } = e;\n            this.client.logger.trace({\n                type: \"method\",\n                method: \"onSessionAuthenticateResponse\",\n                topic: t,\n                payload: e\n            }), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(e) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                result: e.result\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(e) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                error: e.error\n            });\n        }, this.onSessionAuthenticateRequest = async (t)=>{\n            const { topic: e, payload: s, attestation: i, encryptedId: r } = t;\n            try {\n                const { requester: o, authPayload: a, expiryTimestamp: c } = s.params, h = await this.getVerifyContext({\n                    attestationId: i,\n                    hash: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(s)),\n                    encryptedId: r,\n                    metadata: this.client.metadata\n                }), l = {\n                    requester: o,\n                    pairingTopic: e,\n                    id: s.id,\n                    authPayload: a,\n                    verifyContext: h,\n                    expiryTimestamp: c\n                };\n                await this.setAuthRequest(s.id, {\n                    request: l,\n                    pairingTopic: e\n                }), this.client.events.emit(\"session_authenticate\", {\n                    topic: e,\n                    params: s.params,\n                    id: s.id,\n                    verifyContext: h\n                });\n            } catch (o) {\n                this.client.logger.error(o);\n                const a = s.params.requester.publicKey, c = await this.client.core.crypto.generateKeyPair(), h = {\n                    type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_1,\n                    receiverPublicKey: a,\n                    senderPublicKey: c\n                };\n                await this.sendError({\n                    id: s.id,\n                    topic: e,\n                    error: o,\n                    encodeOpts: h,\n                    rpcOpts: S.wc_sessionAuthenticate.autoReject\n                });\n            }\n        }, this.addSessionRequestToSessionRequestQueue = (t)=>{\n            this.sessionRequestQueue.queue.push(t);\n        }, this.cleanupAfterResponse = (t)=>{\n            this.deletePendingSessionRequest(t.response.id, {\n                message: \"fulfilled\",\n                code: 0\n            }), setTimeout(()=>{\n                this.sessionRequestQueue.state = x.idle, this.processSessionRequestQueue();\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.toMiliseconds)(this.requestQueueDelay));\n        }, this.cleanupPendingSentRequestsForTopic = ({ topic: t, error: e })=>{\n            const s = this.client.core.history.pending;\n            s.length > 0 && s.filter((i)=>i.topic === t && i.request.method === \"wc_sessionRequest\").forEach((i)=>{\n                const r = i.request.id, o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", r);\n                if (this.events.listenerCount(o) === 0) throw new Error(`emitting ${o} without any listeners`);\n                this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", i.request.id), {\n                    error: e\n                });\n            });\n        }, this.processSessionRequestQueue = ()=>{\n            if (this.sessionRequestQueue.state === x.active) {\n                this.client.logger.info(\"session request queue is already active.\");\n                return;\n            }\n            const t = this.sessionRequestQueue.queue[0];\n            if (!t) {\n                this.client.logger.info(\"session request queue is empty.\");\n                return;\n            }\n            try {\n                this.sessionRequestQueue.state = x.active, this.emitSessionRequest(t);\n            } catch (e) {\n                this.client.logger.error(e);\n            }\n        }, this.emitSessionRequest = (t)=>{\n            this.client.events.emit(\"session_request\", t);\n        }, this.onPairingCreated = (t)=>{\n            if (t.methods && this.expectedPairingMethodMap.set(t.topic, t.methods), t.active) return;\n            const e = this.client.proposal.getAll().find((s)=>s.pairingTopic === t.topic);\n            e && this.onSessionProposeRequest({\n                topic: t.topic,\n                payload: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"wc_sessionPropose\", {\n                    requiredNamespaces: e.requiredNamespaces,\n                    optionalNamespaces: e.optionalNamespaces,\n                    relays: e.relays,\n                    proposer: e.proposer,\n                    sessionProperties: e.sessionProperties\n                }, e.id)\n            });\n        }, this.isValidConnect = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `connect() params: ${JSON.stringify(t)}`);\n                throw new Error(a);\n            }\n            const { pairingTopic: e, requiredNamespaces: s, optionalNamespaces: i, sessionProperties: r, relays: o } = t;\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(e) || await this.isValidPairingTopic(e), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRelays)(o, !0)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `connect() relays: ${o}`);\n                throw new Error(a);\n            }\n            !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(s) && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(s) !== 0 && this.validateNamespaces(s, \"requiredNamespaces\"), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(i) && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(i) !== 0 && this.validateNamespaces(i, \"optionalNamespaces\"), (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(r) || this.validateSessionProps(r, \"sessionProperties\");\n        }, this.validateNamespaces = (t, e)=>{\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequiredNamespaces)(t, \"connect()\", e);\n            if (s) throw new Error(s.message);\n        }, this.isValidApprove = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) throw new Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `approve() params: ${t}`).message);\n            const { id: e, namespaces: s, relayProtocol: i, sessionProperties: r } = t;\n            this.checkRecentlyDeleted(e), await this.isValidProposalId(e);\n            const o = this.client.proposal.get(e), a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(s, \"approve()\");\n            if (a) throw new Error(a.message);\n            const c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isConformingNamespaces)(o.requiredNamespaces, s, \"approve()\");\n            if (c) throw new Error(c.message);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(i, !0)) {\n                const { message: h } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `approve() relayProtocol: ${i}`);\n                throw new Error(h);\n            }\n            (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(r) || this.validateSessionProps(r, \"sessionProperties\");\n        }, this.isValidReject = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `reject() params: ${t}`);\n                throw new Error(i);\n            }\n            const { id: e, reason: s } = t;\n            if (this.checkRecentlyDeleted(e), await this.isValidProposalId(e), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidErrorReason)(s)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `reject() reason: ${JSON.stringify(s)}`);\n                throw new Error(i);\n            }\n        }, this.isValidSessionSettleRequest = (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: c } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `onSessionSettleRequest() params: ${t}`);\n                throw new Error(c);\n            }\n            const { relay: e, controller: s, namespaces: i, expiry: r } = t;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRelay)(e)) {\n                const { message: c } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() relay protocol should be a string\");\n                throw new Error(c);\n            }\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidController)(s, \"onSessionSettleRequest()\");\n            if (o) throw new Error(o.message);\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(i, \"onSessionSettleRequest()\");\n            if (a) throw new Error(a.message);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(r)) {\n                const { message: c } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", \"onSessionSettleRequest()\");\n                throw new Error(c);\n            }\n        }, this.isValidUpdate = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `update() params: ${t}`);\n                throw new Error(a);\n            }\n            const { topic: e, namespaces: s } = t;\n            this.checkRecentlyDeleted(e), await this.isValidSessionTopic(e);\n            const i = this.client.session.get(e), r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(s, \"update()\");\n            if (r) throw new Error(r.message);\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isConformingNamespaces)(i.requiredNamespaces, s, \"update()\");\n            if (o) throw new Error(o.message);\n        }, this.isValidExtend = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `extend() params: ${t}`);\n                throw new Error(s);\n            }\n            const { topic: e } = t;\n            this.checkRecentlyDeleted(e), await this.isValidSessionTopic(e);\n        }, this.isValidRequest = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `request() params: ${t}`);\n                throw new Error(a);\n            }\n            const { topic: e, request: s, chainId: i, expiry: r } = t;\n            this.checkRecentlyDeleted(e), await this.isValidSessionTopic(e);\n            const { namespaces: o } = this.client.session.get(e);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesChainId)(o, i)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `request() chainId: ${i}`);\n                throw new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequest)(s)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `request() ${JSON.stringify(s)}`);\n                throw new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesRequest)(o, i, s.method)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `request() method: ${s.method}`);\n                throw new Error(a);\n            }\n            if (r && !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequestExpiry)(r, he)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `request() expiry: ${r}. Expiry must be a number (in seconds) between ${he.min} and ${he.max}`);\n                throw new Error(a);\n            }\n        }, this.isValidRespond = async (t)=>{\n            var e;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `respond() params: ${t}`);\n                throw new Error(r);\n            }\n            const { topic: s, response: i } = t;\n            try {\n                await this.isValidSessionTopic(s);\n            } catch (r) {\n                throw (e = t?.response) != null && e.id && this.cleanupAfterResponse(t), r;\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidResponse)(i)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `respond() response: ${JSON.stringify(i)}`);\n                throw new Error(r);\n            }\n        }, this.isValidPing = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `ping() params: ${t}`);\n                throw new Error(s);\n            }\n            const { topic: e } = t;\n            await this.isValidSessionOrPairingTopic(e);\n        }, this.isValidEmit = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `emit() params: ${t}`);\n                throw new Error(o);\n            }\n            const { topic: e, event: s, chainId: i } = t;\n            await this.isValidSessionTopic(e);\n            const { namespaces: r } = this.client.session.get(e);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesChainId)(r, i)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `emit() chainId: ${i}`);\n                throw new Error(o);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidEvent)(s)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(s)}`);\n                throw new Error(o);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesEvent)(r, i, s.name)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(s)}`);\n                throw new Error(o);\n            }\n        }, this.isValidDisconnect = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `disconnect() params: ${t}`);\n                throw new Error(s);\n            }\n            const { topic: e } = t;\n            await this.isValidSessionOrPairingTopic(e);\n        }, this.isValidAuthenticate = (t)=>{\n            const { chains: e, uri: s, domain: i, nonce: r } = t;\n            if (!Array.isArray(e) || e.length === 0) throw new Error(\"chains is required and must be a non-empty array\");\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(s, !1)) throw new Error(\"uri is required parameter\");\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(i, !1)) throw new Error(\"domain is required parameter\");\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(r, !1)) throw new Error(\"nonce is required parameter\");\n            if ([\n                ...new Set(e.map((a)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(a).namespace))\n            ].length > 1) throw new Error(\"Multi-namespace requests are not supported. Please request single namespace only.\");\n            const { namespace: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(e[0]);\n            if (o !== \"eip155\") throw new Error(\"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\");\n        }, this.getVerifyContext = async (t)=>{\n            const { attestationId: e, hash: s, encryptedId: i, metadata: r } = t, o = {\n                verified: {\n                    verifyUrl: r.verifyUrl || _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.VERIFY_SERVER,\n                    validation: \"UNKNOWN\",\n                    origin: r.url || \"\"\n                }\n            };\n            try {\n                const a = await this.client.core.verify.resolve({\n                    attestationId: e,\n                    hash: s,\n                    encryptedId: i,\n                    verifyUrl: r.verifyUrl\n                });\n                a && (o.verified.origin = a.origin, o.verified.isScam = a.isScam, o.verified.validation = a.origin === new URL(r.url).origin ? \"VALID\" : \"INVALID\");\n            } catch (a) {\n                this.client.logger.warn(a);\n            }\n            return this.client.logger.debug(`Verify context: ${JSON.stringify(o)}`), o;\n        }, this.validateSessionProps = (t, e)=>{\n            Object.values(t).forEach((s)=>{\n                if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(s, !1)) {\n                    const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `${e} must be in Record<string, string> format. Received: ${JSON.stringify(s)}`);\n                    throw new Error(i);\n                }\n            });\n        }, this.getPendingAuthRequest = (t)=>{\n            const e = this.client.auth.requests.get(t);\n            return typeof e == \"object\" ? e : void 0;\n        }, this.addToRecentlyDeleted = (t, e)=>{\n            if (this.recentlyDeletedMap.set(t, e), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n                let s = 0;\n                const i = this.recentlyDeletedLimit / 2;\n                for (const r of this.recentlyDeletedMap.keys()){\n                    if (s++ >= i) break;\n                    this.recentlyDeletedMap.delete(r);\n                }\n            }\n        }, this.checkRecentlyDeleted = (t)=>{\n            const e = this.recentlyDeletedMap.get(t);\n            if (e) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `Record was recently deleted - ${e}: ${t}`);\n                throw new Error(s);\n            }\n        };\n    }\n    async isInitialized() {\n        if (!this.initialized) {\n            const { message: n } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(n);\n        }\n        await this.client.core.relayer.confirmOnlineStateOrThrow();\n    }\n    registerRelayerEvents() {\n        this.client.core.relayer.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_EVENTS.message, (n)=>{\n            !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(n) : this.onRelayMessage(n);\n        });\n    }\n    async onRelayMessage(n) {\n        const { topic: t, message: e, attestation: s } = n, { publicKey: i } = this.client.auth.authKeys.keys.includes(ie) ? this.client.auth.authKeys.get(ie) : {\n            responseTopic: void 0,\n            publicKey: void 0\n        }, r = await this.client.core.crypto.decode(t, e, {\n            receiverPublicKey: i\n        });\n        try {\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcRequest)(r) ? (this.client.core.history.set(t, r), this.onRelayEventRequest({\n                topic: t,\n                payload: r,\n                attestation: s,\n                encryptedId: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(e)\n            })) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResponse)(r) ? (await this.client.core.history.resolve(r), await this.onRelayEventResponse({\n                topic: t,\n                payload: r\n            }), this.client.core.history.delete(t, r.id)) : this.onRelayEventUnknownPayload({\n                topic: t,\n                payload: r\n            });\n        } catch (o) {\n            this.client.logger.error(o);\n        }\n    }\n    registerExpirerEvents() {\n        this.client.core.expirer.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EXPIRER_EVENTS.expired, async (n)=>{\n            const { topic: t, id: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseExpirerTarget)(n.target);\n            if (e && this.client.pendingRequest.keys.includes(e)) return await this.deletePendingSessionRequest(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\"), !0);\n            if (e && this.client.auth.requests.keys.includes(e)) return await this.deletePendingAuthRequest(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\"), !0);\n            t ? this.client.session.keys.includes(t) && (await this.deleteSession({\n                topic: t,\n                expirerHasDeleted: !0\n            }), this.client.events.emit(\"session_expire\", {\n                topic: t\n            })) : e && (await this.deleteProposal(e, !0), this.client.events.emit(\"proposal_expire\", {\n                id: e\n            }));\n        });\n    }\n    registerPairingEvents() {\n        this.client.core.pairing.events.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.PAIRING_EVENTS.create, (n)=>this.onPairingCreated(n)), this.client.core.pairing.events.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.PAIRING_EVENTS.delete, (n)=>{\n            this.addToRecentlyDeleted(n.topic, \"pairing\");\n        });\n    }\n    isValidPairingTopic(n) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(n, !1)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${n}`);\n            throw new Error(t);\n        }\n        if (!this.client.core.pairing.pairings.keys.includes(n)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${n}`);\n            throw new Error(t);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.core.pairing.pairings.get(n).expiry)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", `pairing topic: ${n}`);\n            throw new Error(t);\n        }\n    }\n    async isValidSessionTopic(n) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(n, !1)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `session topic should be a string: ${n}`);\n            throw new Error(t);\n        }\n        if (this.checkRecentlyDeleted(n), !this.client.session.keys.includes(n)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", `session topic doesn't exist: ${n}`);\n            throw new Error(t);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.session.get(n).expiry)) {\n            await this.deleteSession({\n                topic: n\n            });\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", `session topic: ${n}`);\n            throw new Error(t);\n        }\n        if (!this.client.core.crypto.keychain.has(n)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `session topic does not exist in keychain: ${n}`);\n            throw await this.deleteSession({\n                topic: n\n            }), new Error(t);\n        }\n    }\n    async isValidSessionOrPairingTopic(n) {\n        if (this.checkRecentlyDeleted(n), this.client.session.keys.includes(n)) await this.isValidSessionTopic(n);\n        else if (this.client.core.pairing.pairings.keys.includes(n)) this.isValidPairingTopic(n);\n        else if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(n, !1)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", `session or pairing topic doesn't exist: ${n}`);\n            throw new Error(t);\n        } else {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `session or pairing topic should be a string: ${n}`);\n            throw new Error(t);\n        }\n    }\n    async isValidProposalId(n) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidId)(n)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `proposal id should be a number: ${n}`);\n            throw new Error(t);\n        }\n        if (!this.client.proposal.keys.includes(n)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${n}`);\n            throw new Error(t);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.proposal.get(n).expiryTimestamp)) {\n            await this.deleteProposal(n);\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", `proposal id: ${n}`);\n            throw new Error(t);\n        }\n    }\n}\nclass ns extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, t){\n        super(n, t, Fe, ce), this.core = n, this.logger = t;\n    }\n}\nclass it extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, t){\n        super(n, t, He, ce), this.core = n, this.logger = t;\n    }\n}\nclass os extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, t){\n        super(n, t, Ye, ce, (e)=>e.id), this.core = n, this.logger = t;\n    }\n}\nclass as extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, t){\n        super(n, t, We, se, ()=>ie), this.core = n, this.logger = t;\n    }\n}\nclass cs extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, t){\n        super(n, t, Ze, se), this.core = n, this.logger = t;\n    }\n}\nclass ls extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, t){\n        super(n, t, et, se, (e)=>e.id), this.core = n, this.logger = t;\n    }\n}\nclass hs {\n    constructor(n, t){\n        this.core = n, this.logger = t, this.authKeys = new as(this.core, this.logger), this.pairingTopics = new cs(this.core, this.logger), this.requests = new ls(this.core, this.logger);\n    }\n    async init() {\n        await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();\n    }\n}\nclass pe extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__.ISignClient {\n    constructor(n){\n        super(n), this.protocol = qe, this.version = ve, this.name = le.name, this.events = new events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter, this.on = (e, s)=>this.events.on(e, s), this.once = (e, s)=>this.events.once(e, s), this.off = (e, s)=>this.events.off(e, s), this.removeListener = (e, s)=>this.events.removeListener(e, s), this.removeAllListeners = (e)=>this.events.removeAllListeners(e), this.connect = async (e)=>{\n            try {\n                return await this.engine.connect(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.pair = async (e)=>{\n            try {\n                return await this.engine.pair(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.approve = async (e)=>{\n            try {\n                return await this.engine.approve(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.reject = async (e)=>{\n            try {\n                return await this.engine.reject(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.update = async (e)=>{\n            try {\n                return await this.engine.update(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.extend = async (e)=>{\n            try {\n                return await this.engine.extend(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.request = async (e)=>{\n            try {\n                return await this.engine.request(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.respond = async (e)=>{\n            try {\n                return await this.engine.respond(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.ping = async (e)=>{\n            try {\n                return await this.engine.ping(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.emit = async (e)=>{\n            try {\n                return await this.engine.emit(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.disconnect = async (e)=>{\n            try {\n                return await this.engine.disconnect(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.find = (e)=>{\n            try {\n                return this.engine.find(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.getPendingSessionRequests = ()=>{\n            try {\n                return this.engine.getPendingSessionRequests();\n            } catch (e) {\n                throw this.logger.error(e.message), e;\n            }\n        }, this.authenticate = async (e)=>{\n            try {\n                return await this.engine.authenticate(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.formatAuthMessage = (e)=>{\n            try {\n                return this.engine.formatAuthMessage(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.approveSessionAuthenticate = async (e)=>{\n            try {\n                return await this.engine.approveSessionAuthenticate(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.rejectSessionAuthenticate = async (e)=>{\n            try {\n                return await this.engine.rejectSessionAuthenticate(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.name = n?.name || le.name, this.metadata = n?.metadata || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getAppMetadata)(), this.signConfig = n?.signConfig;\n        const t = typeof n?.logger < \"u\" && typeof n?.logger != \"string\" ? n.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getDefaultLoggerOptions)({\n            level: n?.logger || le.logger\n        }));\n        this.core = n?.core || new _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Core(n), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.generateChildLogger)(t, this.name), this.session = new it(this.core, this.logger), this.proposal = new ns(this.core, this.logger), this.pendingRequest = new os(this.core, this.logger), this.engine = new rs(this), this.auth = new hs(this.core, this.logger);\n    }\n    static async init(n) {\n        const t = new pe(n);\n        return await t.initialize(), t;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getLoggerContext)(this.logger);\n    }\n    get pairing() {\n        return this.core.pairing.pairings;\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.engine.init(), await this.auth.init(), this.logger.info(\"SignClient Initialization Success\"), this.engine.processRelayMessageCache();\n        } catch (n) {\n            throw this.logger.info(\"SignClient Initialization Failure\"), this.logger.error(n.message), n;\n        }\n    }\n}\nconst ps = it, ds = pe;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/sign-client/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/constants/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./misc */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/misc.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/time.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsVUFBVUMsbUJBQU9BLENBQUMsdUZBQU87QUFDL0JELFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsbUZBQVEsR0FBR0g7QUFDeENFLFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsbUZBQVEsR0FBR0gsVUFDeEMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3RpbWUvZGlzdC9janMvY29uc3RhbnRzL2luZGV4LmpzPzJlZTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbWlzY1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90aW1lXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiX19leHBvcnRTdGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/misc.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/constants/misc.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;\nexports.ONE_HUNDRED = 100;\nexports.ONE_THOUSAND = 1000; //# sourceMappingURL=misc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvbWlzYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLG1CQUFtQixHQUFHLEtBQUs7QUFDbERBLG1CQUFtQixHQUFHO0FBQ3RCQSxvQkFBb0IsR0FBRyxNQUN2QixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvbWlzYy5qcz9iNDM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PTkVfVEhPVVNBTkQgPSBleHBvcnRzLk9ORV9IVU5EUkVEID0gdm9pZCAwO1xuZXhwb3J0cy5PTkVfSFVORFJFRCA9IDEwMDtcbmV4cG9ydHMuT05FX1RIT1VTQU5EID0gMTAwMDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pc2MuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiT05FX1RIT1VTQU5EIiwiT05FX0hVTkRSRUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/misc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/time.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/constants/time.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;\nexports.ONE_SECOND = 1;\nexports.FIVE_SECONDS = 5;\nexports.TEN_SECONDS = 10;\nexports.THIRTY_SECONDS = 30;\nexports.SIXTY_SECONDS = 60;\nexports.ONE_MINUTE = exports.SIXTY_SECONDS;\nexports.FIVE_MINUTES = exports.ONE_MINUTE * 5;\nexports.TEN_MINUTES = exports.ONE_MINUTE * 10;\nexports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;\nexports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;\nexports.ONE_HOUR = exports.SIXTY_MINUTES;\nexports.THREE_HOURS = exports.ONE_HOUR * 3;\nexports.SIX_HOURS = exports.ONE_HOUR * 6;\nexports.TWELVE_HOURS = exports.ONE_HOUR * 12;\nexports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;\nexports.ONE_DAY = exports.TWENTY_FOUR_HOURS;\nexports.THREE_DAYS = exports.ONE_DAY * 3;\nexports.FIVE_DAYS = exports.ONE_DAY * 5;\nexports.SEVEN_DAYS = exports.ONE_DAY * 7;\nexports.THIRTY_DAYS = exports.ONE_DAY * 30;\nexports.ONE_WEEK = exports.SEVEN_DAYS;\nexports.TWO_WEEKS = exports.ONE_WEEK * 2;\nexports.THREE_WEEKS = exports.ONE_WEEK * 3;\nexports.FOUR_WEEKS = exports.ONE_WEEK * 4;\nexports.ONE_YEAR = exports.ONE_DAY * 365; //# sourceMappingURL=time.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvdGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUdBLGtCQUFrQixHQUFHQSxtQkFBbUIsR0FBR0EsaUJBQWlCLEdBQUdBLGdCQUFnQixHQUFHQSxtQkFBbUIsR0FBR0Esa0JBQWtCLEdBQUdBLGlCQUFpQixHQUFHQSxrQkFBa0IsR0FBR0EsZUFBZSxHQUFHQSx5QkFBeUIsR0FBR0Esb0JBQW9CLEdBQUdBLGlCQUFpQixHQUFHQSxtQkFBbUIsR0FBR0EsZ0JBQWdCLEdBQUdBLHFCQUFxQixHQUFHQSxzQkFBc0IsR0FBR0EsbUJBQW1CLEdBQUdBLG9CQUFvQixHQUFHQSxrQkFBa0IsR0FBR0EscUJBQXFCLEdBQUdBLHNCQUFzQixHQUFHQSxtQkFBbUIsR0FBR0Esb0JBQW9CLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFDdGlCQSxrQkFBa0IsR0FBRztBQUNyQkEsb0JBQW9CLEdBQUc7QUFDdkJBLG1CQUFtQixHQUFHO0FBQ3RCQSxzQkFBc0IsR0FBRztBQUN6QkEscUJBQXFCLEdBQUc7QUFDeEJBLGtCQUFrQixHQUFHQSxRQUFRc0IsYUFBYTtBQUMxQ3RCLG9CQUFvQixHQUFHQSxRQUFRcUIsVUFBVSxHQUFHO0FBQzVDckIsbUJBQW1CLEdBQUdBLFFBQVFxQixVQUFVLEdBQUc7QUFDM0NyQixzQkFBc0IsR0FBR0EsUUFBUXFCLFVBQVUsR0FBRztBQUM5Q3JCLHFCQUFxQixHQUFHQSxRQUFRcUIsVUFBVSxHQUFHO0FBQzdDckIsZ0JBQWdCLEdBQUdBLFFBQVFpQixhQUFhO0FBQ3hDakIsbUJBQW1CLEdBQUdBLFFBQVFnQixRQUFRLEdBQUc7QUFDekNoQixpQkFBaUIsR0FBR0EsUUFBUWdCLFFBQVEsR0FBRztBQUN2Q2hCLG9CQUFvQixHQUFHQSxRQUFRZ0IsUUFBUSxHQUFHO0FBQzFDaEIseUJBQXlCLEdBQUdBLFFBQVFnQixRQUFRLEdBQUc7QUFDL0NoQixlQUFlLEdBQUdBLFFBQVFZLGlCQUFpQjtBQUMzQ1osa0JBQWtCLEdBQUdBLFFBQVFXLE9BQU8sR0FBRztBQUN2Q1gsaUJBQWlCLEdBQUdBLFFBQVFXLE9BQU8sR0FBRztBQUN0Q1gsa0JBQWtCLEdBQUdBLFFBQVFXLE9BQU8sR0FBRztBQUN2Q1gsbUJBQW1CLEdBQUdBLFFBQVFXLE9BQU8sR0FBRztBQUN4Q1gsZ0JBQWdCLEdBQUdBLFFBQVFRLFVBQVU7QUFDckNSLGlCQUFpQixHQUFHQSxRQUFRTSxRQUFRLEdBQUc7QUFDdkNOLG1CQUFtQixHQUFHQSxRQUFRTSxRQUFRLEdBQUc7QUFDekNOLGtCQUFrQixHQUFHQSxRQUFRTSxRQUFRLEdBQUc7QUFDeENOLGdCQUFnQixHQUFHQSxRQUFRVyxPQUFPLEdBQUcsS0FDckMsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3RpbWUvZGlzdC9janMvY29uc3RhbnRzL3RpbWUuanM/ZGRkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT05FX1lFQVIgPSBleHBvcnRzLkZPVVJfV0VFS1MgPSBleHBvcnRzLlRIUkVFX1dFRUtTID0gZXhwb3J0cy5UV09fV0VFS1MgPSBleHBvcnRzLk9ORV9XRUVLID0gZXhwb3J0cy5USElSVFlfREFZUyA9IGV4cG9ydHMuU0VWRU5fREFZUyA9IGV4cG9ydHMuRklWRV9EQVlTID0gZXhwb3J0cy5USFJFRV9EQVlTID0gZXhwb3J0cy5PTkVfREFZID0gZXhwb3J0cy5UV0VOVFlfRk9VUl9IT1VSUyA9IGV4cG9ydHMuVFdFTFZFX0hPVVJTID0gZXhwb3J0cy5TSVhfSE9VUlMgPSBleHBvcnRzLlRIUkVFX0hPVVJTID0gZXhwb3J0cy5PTkVfSE9VUiA9IGV4cG9ydHMuU0lYVFlfTUlOVVRFUyA9IGV4cG9ydHMuVEhJUlRZX01JTlVURVMgPSBleHBvcnRzLlRFTl9NSU5VVEVTID0gZXhwb3J0cy5GSVZFX01JTlVURVMgPSBleHBvcnRzLk9ORV9NSU5VVEUgPSBleHBvcnRzLlNJWFRZX1NFQ09ORFMgPSBleHBvcnRzLlRISVJUWV9TRUNPTkRTID0gZXhwb3J0cy5URU5fU0VDT05EUyA9IGV4cG9ydHMuRklWRV9TRUNPTkRTID0gZXhwb3J0cy5PTkVfU0VDT05EID0gdm9pZCAwO1xuZXhwb3J0cy5PTkVfU0VDT05EID0gMTtcbmV4cG9ydHMuRklWRV9TRUNPTkRTID0gNTtcbmV4cG9ydHMuVEVOX1NFQ09ORFMgPSAxMDtcbmV4cG9ydHMuVEhJUlRZX1NFQ09ORFMgPSAzMDtcbmV4cG9ydHMuU0lYVFlfU0VDT05EUyA9IDYwO1xuZXhwb3J0cy5PTkVfTUlOVVRFID0gZXhwb3J0cy5TSVhUWV9TRUNPTkRTO1xuZXhwb3J0cy5GSVZFX01JTlVURVMgPSBleHBvcnRzLk9ORV9NSU5VVEUgKiA1O1xuZXhwb3J0cy5URU5fTUlOVVRFUyA9IGV4cG9ydHMuT05FX01JTlVURSAqIDEwO1xuZXhwb3J0cy5USElSVFlfTUlOVVRFUyA9IGV4cG9ydHMuT05FX01JTlVURSAqIDMwO1xuZXhwb3J0cy5TSVhUWV9NSU5VVEVTID0gZXhwb3J0cy5PTkVfTUlOVVRFICogNjA7XG5leHBvcnRzLk9ORV9IT1VSID0gZXhwb3J0cy5TSVhUWV9NSU5VVEVTO1xuZXhwb3J0cy5USFJFRV9IT1VSUyA9IGV4cG9ydHMuT05FX0hPVVIgKiAzO1xuZXhwb3J0cy5TSVhfSE9VUlMgPSBleHBvcnRzLk9ORV9IT1VSICogNjtcbmV4cG9ydHMuVFdFTFZFX0hPVVJTID0gZXhwb3J0cy5PTkVfSE9VUiAqIDEyO1xuZXhwb3J0cy5UV0VOVFlfRk9VUl9IT1VSUyA9IGV4cG9ydHMuT05FX0hPVVIgKiAyNDtcbmV4cG9ydHMuT05FX0RBWSA9IGV4cG9ydHMuVFdFTlRZX0ZPVVJfSE9VUlM7XG5leHBvcnRzLlRIUkVFX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiAzO1xuZXhwb3J0cy5GSVZFX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiA1O1xuZXhwb3J0cy5TRVZFTl9EQVlTID0gZXhwb3J0cy5PTkVfREFZICogNztcbmV4cG9ydHMuVEhJUlRZX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiAzMDtcbmV4cG9ydHMuT05FX1dFRUsgPSBleHBvcnRzLlNFVkVOX0RBWVM7XG5leHBvcnRzLlRXT19XRUVLUyA9IGV4cG9ydHMuT05FX1dFRUsgKiAyO1xuZXhwb3J0cy5USFJFRV9XRUVLUyA9IGV4cG9ydHMuT05FX1dFRUsgKiAzO1xuZXhwb3J0cy5GT1VSX1dFRUtTID0gZXhwb3J0cy5PTkVfV0VFSyAqIDQ7XG5leHBvcnRzLk9ORV9ZRUFSID0gZXhwb3J0cy5PTkVfREFZICogMzY1O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJPTkVfWUVBUiIsIkZPVVJfV0VFS1MiLCJUSFJFRV9XRUVLUyIsIlRXT19XRUVLUyIsIk9ORV9XRUVLIiwiVEhJUlRZX0RBWVMiLCJTRVZFTl9EQVlTIiwiRklWRV9EQVlTIiwiVEhSRUVfREFZUyIsIk9ORV9EQVkiLCJUV0VOVFlfRk9VUl9IT1VSUyIsIlRXRUxWRV9IT1VSUyIsIlNJWF9IT1VSUyIsIlRIUkVFX0hPVVJTIiwiT05FX0hPVVIiLCJTSVhUWV9NSU5VVEVTIiwiVEhJUlRZX01JTlVURVMiLCJURU5fTUlOVVRFUyIsIkZJVkVfTUlOVVRFUyIsIk9ORV9NSU5VVEUiLCJTSVhUWV9TRUNPTkRTIiwiVEhJUlRZX1NFQ09ORFMiLCJURU5fU0VDT05EUyIsIkZJVkVfU0VDT05EUyIsIk9ORV9TRUNPTkQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/time.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./watch */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/watch.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyx1RkFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxpRkFBUyxHQUFHSDtBQUN6Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQywyRUFBUyxHQUFHSDtBQUN6Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxpRkFBUyxHQUFHSDtBQUN6Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyx5RkFBYSxHQUFHSCxVQUM3QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9pbmRleC5qcz8yOWI0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dhdGNoXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsIl9fZXhwb3J0U3RhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/types/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./watch */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/watch.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy90eXBlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyx1RkFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxpRkFBUyxHQUFHSCxVQUN6QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy90eXBlcy9pbmRleC5qcz8zNjI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dhdGNoXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiX19leHBvcnRTdGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/watch.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/types/watch.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IWatch = void 0;\nclass IWatch {\n}\nexports.IWatch = IWatch; //# sourceMappingURL=watch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy90eXBlcy93YXRjaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHLEtBQUs7QUFDdEIsTUFBTUU7QUFDTjtBQUNBRixjQUFjLEdBQUdFLFFBQ2pCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BzZS0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3R5cGVzL3dhdGNoLmpzPzRiY2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklXYXRjaCA9IHZvaWQgMDtcbmNsYXNzIElXYXRjaCB7XG59XG5leHBvcnRzLklXYXRjaCA9IElXYXRjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhdGNoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIklXYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/watch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/convert.js":
/*!********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/utils/convert.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromMiliseconds = exports.toMiliseconds = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js\");\nfunction toMiliseconds(seconds) {\n    return seconds * constants_1.ONE_THOUSAND;\n}\nexports.toMiliseconds = toMiliseconds;\nfunction fromMiliseconds(miliseconds) {\n    return Math.floor(miliseconds / constants_1.ONE_THOUSAND);\n}\nexports.fromMiliseconds = fromMiliseconds; //# sourceMappingURL=convert.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9jb252ZXJ0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx1QkFBdUIsR0FBR0EscUJBQXFCLEdBQUcsS0FBSztBQUN2RCxNQUFNSSxjQUFjQyxtQkFBT0EsQ0FBQywwRkFBYztBQUMxQyxTQUFTRixjQUFjRyxPQUFPO0lBQzFCLE9BQU9BLFVBQVVGLFlBQVlHLFlBQVk7QUFDN0M7QUFDQVAscUJBQXFCLEdBQUdHO0FBQ3hCLFNBQVNELGdCQUFnQk0sV0FBVztJQUNoQyxPQUFPQyxLQUFLQyxLQUFLLENBQUNGLGNBQWNKLFlBQVlHLFlBQVk7QUFDNUQ7QUFDQVAsdUJBQXVCLEdBQUdFLGlCQUMxQixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9jb252ZXJ0LmpzPzk5MWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZyb21NaWxpc2Vjb25kcyA9IGV4cG9ydHMudG9NaWxpc2Vjb25kcyA9IHZvaWQgMDtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmZ1bmN0aW9uIHRvTWlsaXNlY29uZHMoc2Vjb25kcykge1xuICAgIHJldHVybiBzZWNvbmRzICogY29uc3RhbnRzXzEuT05FX1RIT1VTQU5EO1xufVxuZXhwb3J0cy50b01pbGlzZWNvbmRzID0gdG9NaWxpc2Vjb25kcztcbmZ1bmN0aW9uIGZyb21NaWxpc2Vjb25kcyhtaWxpc2Vjb25kcykge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1pbGlzZWNvbmRzIC8gY29uc3RhbnRzXzEuT05FX1RIT1VTQU5EKTtcbn1cbmV4cG9ydHMuZnJvbU1pbGlzZWNvbmRzID0gZnJvbU1pbGlzZWNvbmRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udmVydC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmcm9tTWlsaXNlY29uZHMiLCJ0b01pbGlzZWNvbmRzIiwiY29uc3RhbnRzXzEiLCJyZXF1aXJlIiwic2Vjb25kcyIsIk9ORV9USE9VU0FORCIsIm1pbGlzZWNvbmRzIiwiTWF0aCIsImZsb29yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/convert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/delay.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/utils/delay.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.delay = void 0;\nfunction delay(timeout) {\n    return new Promise((resolve)=>{\n        setTimeout(()=>{\n            resolve(true);\n        }, timeout);\n    });\n}\nexports.delay = delay; //# sourceMappingURL=delay.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9kZWxheS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsYUFBYSxHQUFHLEtBQUs7QUFDckIsU0FBU0UsTUFBTUMsT0FBTztJQUNsQixPQUFPLElBQUlDLFFBQVFDLENBQUFBO1FBQ2ZDLFdBQVc7WUFDUEQsUUFBUTtRQUNaLEdBQUdGO0lBQ1A7QUFDSjtBQUNBSCxhQUFhLEdBQUdFLE9BQ2hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BzZS0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3V0aWxzL2RlbGF5LmpzPzliOTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlbGF5ID0gdm9pZCAwO1xuZnVuY3Rpb24gZGVsYXkodGltZW91dCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVsYXkgPSBkZWxheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlbGF5IiwidGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/delay.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/utils/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./delay */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/delay.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./convert */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/convert.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyx1RkFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxpRkFBUyxHQUFHSDtBQUN6Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxxRkFBVyxHQUFHSCxVQUMzQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9pbmRleC5qcz9iN2NjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2RlbGF5XCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnZlcnRcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHNsaWJfMSIsInJlcXVpcmUiLCJfX2V4cG9ydFN0YXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/watch.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/watch.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Watch = void 0;\nclass Watch {\n    constructor(){\n        this.timestamps = new Map();\n    }\n    start(label) {\n        if (this.timestamps.has(label)) {\n            throw new Error(`Watch already started for label: ${label}`);\n        }\n        this.timestamps.set(label, {\n            started: Date.now()\n        });\n    }\n    stop(label) {\n        const timestamp = this.get(label);\n        if (typeof timestamp.elapsed !== \"undefined\") {\n            throw new Error(`Watch already stopped for label: ${label}`);\n        }\n        const elapsed = Date.now() - timestamp.started;\n        this.timestamps.set(label, {\n            started: timestamp.started,\n            elapsed\n        });\n    }\n    get(label) {\n        const timestamp = this.timestamps.get(label);\n        if (typeof timestamp === \"undefined\") {\n            throw new Error(`No timestamp found for label: ${label}`);\n        }\n        return timestamp;\n    }\n    elapsed(label) {\n        const timestamp = this.get(label);\n        const elapsed = timestamp.elapsed || Date.now() - timestamp.started;\n        return elapsed;\n    }\n}\nexports.Watch = Watch;\nexports[\"default\"] = Watch; //# sourceMappingURL=watch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy93YXRjaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsYUFBYSxHQUFHLEtBQUs7QUFDckIsTUFBTUU7SUFDRkMsYUFBYztRQUNWLElBQUksQ0FBQ0MsVUFBVSxHQUFHLElBQUlDO0lBQzFCO0lBQ0FDLE1BQU1DLEtBQUssRUFBRTtRQUNULElBQUksSUFBSSxDQUFDSCxVQUFVLENBQUNJLEdBQUcsQ0FBQ0QsUUFBUTtZQUM1QixNQUFNLElBQUlFLE1BQU0sQ0FBQyxpQ0FBaUMsRUFBRUYsTUFBTSxDQUFDO1FBQy9EO1FBQ0EsSUFBSSxDQUFDSCxVQUFVLENBQUNNLEdBQUcsQ0FBQ0gsT0FBTztZQUFFSSxTQUFTQyxLQUFLQyxHQUFHO1FBQUc7SUFDckQ7SUFDQUMsS0FBS1AsS0FBSyxFQUFFO1FBQ1IsTUFBTVEsWUFBWSxJQUFJLENBQUNDLEdBQUcsQ0FBQ1Q7UUFDM0IsSUFBSSxPQUFPUSxVQUFVRSxPQUFPLEtBQUssYUFBYTtZQUMxQyxNQUFNLElBQUlSLE1BQU0sQ0FBQyxpQ0FBaUMsRUFBRUYsTUFBTSxDQUFDO1FBQy9EO1FBQ0EsTUFBTVUsVUFBVUwsS0FBS0MsR0FBRyxLQUFLRSxVQUFVSixPQUFPO1FBQzlDLElBQUksQ0FBQ1AsVUFBVSxDQUFDTSxHQUFHLENBQUNILE9BQU87WUFBRUksU0FBU0ksVUFBVUosT0FBTztZQUFFTTtRQUFRO0lBQ3JFO0lBQ0FELElBQUlULEtBQUssRUFBRTtRQUNQLE1BQU1RLFlBQVksSUFBSSxDQUFDWCxVQUFVLENBQUNZLEdBQUcsQ0FBQ1Q7UUFDdEMsSUFBSSxPQUFPUSxjQUFjLGFBQWE7WUFDbEMsTUFBTSxJQUFJTixNQUFNLENBQUMsOEJBQThCLEVBQUVGLE1BQU0sQ0FBQztRQUM1RDtRQUNBLE9BQU9RO0lBQ1g7SUFDQUUsUUFBUVYsS0FBSyxFQUFFO1FBQ1gsTUFBTVEsWUFBWSxJQUFJLENBQUNDLEdBQUcsQ0FBQ1Q7UUFDM0IsTUFBTVUsVUFBVUYsVUFBVUUsT0FBTyxJQUFJTCxLQUFLQyxHQUFHLEtBQUtFLFVBQVVKLE9BQU87UUFDbkUsT0FBT007SUFDWDtBQUNKO0FBQ0FqQixhQUFhLEdBQUdFO0FBQ2hCRixrQkFBZSxHQUFHRSxPQUNsQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy93YXRjaC5qcz8yZGM0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5XYXRjaCA9IHZvaWQgMDtcbmNsYXNzIFdhdGNoIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50aW1lc3RhbXBzID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBzdGFydChsYWJlbCkge1xuICAgICAgICBpZiAodGhpcy50aW1lc3RhbXBzLmhhcyhsYWJlbCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgV2F0Y2ggYWxyZWFkeSBzdGFydGVkIGZvciBsYWJlbDogJHtsYWJlbH1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRpbWVzdGFtcHMuc2V0KGxhYmVsLCB7IHN0YXJ0ZWQ6IERhdGUubm93KCkgfSk7XG4gICAgfVxuICAgIHN0b3AobGFiZWwpIHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gdGhpcy5nZXQobGFiZWwpO1xuICAgICAgICBpZiAodHlwZW9mIHRpbWVzdGFtcC5lbGFwc2VkICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFdhdGNoIGFscmVhZHkgc3RvcHBlZCBmb3IgbGFiZWw6ICR7bGFiZWx9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZWxhcHNlZCA9IERhdGUubm93KCkgLSB0aW1lc3RhbXAuc3RhcnRlZDtcbiAgICAgICAgdGhpcy50aW1lc3RhbXBzLnNldChsYWJlbCwgeyBzdGFydGVkOiB0aW1lc3RhbXAuc3RhcnRlZCwgZWxhcHNlZCB9KTtcbiAgICB9XG4gICAgZ2V0KGxhYmVsKSB7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IHRoaXMudGltZXN0YW1wcy5nZXQobGFiZWwpO1xuICAgICAgICBpZiAodHlwZW9mIHRpbWVzdGFtcCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyB0aW1lc3RhbXAgZm91bmQgZm9yIGxhYmVsOiAke2xhYmVsfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aW1lc3RhbXA7XG4gICAgfVxuICAgIGVsYXBzZWQobGFiZWwpIHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gdGhpcy5nZXQobGFiZWwpO1xuICAgICAgICBjb25zdCBlbGFwc2VkID0gdGltZXN0YW1wLmVsYXBzZWQgfHwgRGF0ZS5ub3coKSAtIHRpbWVzdGFtcC5zdGFydGVkO1xuICAgICAgICByZXR1cm4gZWxhcHNlZDtcbiAgICB9XG59XG5leHBvcnRzLldhdGNoID0gV2F0Y2g7XG5leHBvcnRzLmRlZmF1bHQgPSBXYXRjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhdGNoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIldhdGNoIiwiY29uc3RydWN0b3IiLCJ0aW1lc3RhbXBzIiwiTWFwIiwic3RhcnQiLCJsYWJlbCIsImhhcyIsIkVycm9yIiwic2V0Iiwic3RhcnRlZCIsIkRhdGUiLCJub3ciLCJzdG9wIiwidGltZXN0YW1wIiwiZ2V0IiwiZWxhcHNlZCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/watch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nfunction __createBinding(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}\nfunction __exportStar(m, exports) {\n    for(var p in m)if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\nfunction __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\n;\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: n === \"return\"\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n        Object.defineProperty(cooked, \"raw\", {\n            value: raw\n        });\n    } else {\n        cooked.raw = raw;\n    }\n    return cooked;\n}\n;\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    }\n    result.default = mod;\n    return result;\n}\nfunction __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction __classPrivateFieldGet(receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/types/dist/index.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/types/dist/index.es.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ICore: () => (/* binding */ n),\n/* harmony export */   ICrypto: () => (/* binding */ l),\n/* harmony export */   IEchoClient: () => (/* binding */ v),\n/* harmony export */   IEngine: () => (/* binding */ M),\n/* harmony export */   IEngineEvents: () => (/* binding */ w),\n/* harmony export */   IEventClient: () => (/* binding */ C),\n/* harmony export */   IExpirer: () => (/* binding */ x),\n/* harmony export */   IJsonRpcHistory: () => (/* binding */ h),\n/* harmony export */   IKeyChain: () => (/* binding */ E),\n/* harmony export */   IMessageTracker: () => (/* binding */ a),\n/* harmony export */   IPairing: () => (/* binding */ m),\n/* harmony export */   IPublisher: () => (/* binding */ g),\n/* harmony export */   IRelayer: () => (/* binding */ u),\n/* harmony export */   ISignClient: () => (/* binding */ S),\n/* harmony export */   ISignClientEvents: () => (/* binding */ b),\n/* harmony export */   IStore: () => (/* binding */ p),\n/* harmony export */   ISubscriber: () => (/* binding */ d),\n/* harmony export */   ISubscriberTopicMap: () => (/* binding */ I),\n/* harmony export */   IVerify: () => (/* binding */ y)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/events */ \"(ssr)/./node_modules/@walletconnect/events/dist/esm/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\n\n\nclass n extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s){\n        super(), this.opts = s, this.protocol = \"wc\", this.version = 2;\n    }\n}\nclass l {\n    constructor(s, t, e){\n        this.core = s, this.logger = t;\n    }\n}\nclass h extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, t){\n        super(), this.core = s, this.logger = t, this.records = new Map;\n    }\n}\nclass a {\n    constructor(s, t){\n        this.logger = s, this.core = t;\n    }\n}\nclass g extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, t){\n        super(), this.relayer = s, this.logger = t;\n    }\n}\nclass u extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s){\n        super();\n    }\n}\nclass p {\n    constructor(s, t, e, f){\n        this.core = s, this.logger = t, this.name = e;\n    }\n}\nclass I {\n    constructor(){\n        this.map = new Map;\n    }\n}\nclass d extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, t){\n        super(), this.relayer = s, this.logger = t;\n    }\n}\nclass E {\n    constructor(s, t){\n        this.core = s, this.logger = t;\n    }\n}\nclass x extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, t){\n        super(), this.core = s, this.logger = t;\n    }\n}\nclass m {\n    constructor(s, t){\n        this.logger = s, this.core = t;\n    }\n}\nclass y {\n    constructor(s, t, e){\n        this.core = s, this.logger = t, this.store = e;\n    }\n}\nclass v {\n    constructor(s, t){\n        this.projectId = s, this.logger = t;\n    }\n}\nclass C {\n    constructor(s, t, e){\n        this.core = s, this.logger = t, this.telemetryEnabled = e;\n    }\n}\nclass b extends (events__WEBPACK_IMPORTED_MODULE_1___default()) {\n    constructor(){\n        super();\n    }\n}\nclass S {\n    constructor(s){\n        this.opts = s, this.protocol = \"wc\", this.version = 2;\n    }\n}\nclass w extends events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    constructor(){\n        super();\n    }\n}\nclass M {\n    constructor(s){\n        this.client = s;\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdHlwZXMvZGlzdC9pbmRleC5lcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWdEO0FBQXlDO0FBQUEsTUFBTUssVUFBVUosMERBQUNBO0lBQUNLLFlBQVlDLENBQUMsQ0FBQztRQUFDLEtBQUssSUFBRyxJQUFJLENBQUNDLElBQUksR0FBQ0QsR0FBRSxJQUFJLENBQUNFLFFBQVEsR0FBQyxNQUFLLElBQUksQ0FBQ0MsT0FBTyxHQUFDO0lBQUM7QUFBQztBQUFDLE1BQU1DO0lBQUVMLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxFQUFDQyxDQUFDLENBQUM7UUFBQyxJQUFJLENBQUNDLElBQUksR0FBQ1AsR0FBRSxJQUFJLENBQUNRLE1BQU0sR0FBQ0g7SUFBQztBQUFDO0FBQUMsTUFBTUksVUFBVWYsMERBQUNBO0lBQUNLLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxDQUFDO1FBQUMsS0FBSyxJQUFHLElBQUksQ0FBQ0UsSUFBSSxHQUFDUCxHQUFFLElBQUksQ0FBQ1EsTUFBTSxHQUFDSCxHQUFFLElBQUksQ0FBQ0ssT0FBTyxHQUFDLElBQUlDO0lBQUc7QUFBQztBQUFDLE1BQU1DO0lBQUViLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxDQUFDO1FBQUMsSUFBSSxDQUFDRyxNQUFNLEdBQUNSLEdBQUUsSUFBSSxDQUFDTyxJQUFJLEdBQUNGO0lBQUM7QUFBQztBQUFDLE1BQU1RLFVBQVVuQiwwREFBQ0E7SUFBQ0ssWUFBWUMsQ0FBQyxFQUFDSyxDQUFDLENBQUM7UUFBQyxLQUFLLElBQUcsSUFBSSxDQUFDUyxPQUFPLEdBQUNkLEdBQUUsSUFBSSxDQUFDUSxNQUFNLEdBQUNIO0lBQUM7QUFBQztBQUFDLE1BQU1VLFVBQVVyQiwwREFBQ0E7SUFBQ0ssWUFBWUMsQ0FBQyxDQUFDO1FBQUMsS0FBSztJQUFFO0FBQUM7QUFBQyxNQUFNZ0I7SUFBRWpCLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxFQUFDQyxDQUFDLEVBQUNXLENBQUMsQ0FBQztRQUFDLElBQUksQ0FBQ1YsSUFBSSxHQUFDUCxHQUFFLElBQUksQ0FBQ1EsTUFBTSxHQUFDSCxHQUFFLElBQUksQ0FBQ2EsSUFBSSxHQUFDWjtJQUFDO0FBQUM7QUFBQyxNQUFNYTtJQUFFcEIsYUFBYTtRQUFDLElBQUksQ0FBQ3FCLEdBQUcsR0FBQyxJQUFJVDtJQUFHO0FBQUM7QUFBQyxNQUFNVSxVQUFVM0IsMERBQUNBO0lBQUNLLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxDQUFDO1FBQUMsS0FBSyxJQUFHLElBQUksQ0FBQ1MsT0FBTyxHQUFDZCxHQUFFLElBQUksQ0FBQ1EsTUFBTSxHQUFDSDtJQUFDO0FBQUM7QUFBQyxNQUFNaUI7SUFBRXZCLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxDQUFDO1FBQUMsSUFBSSxDQUFDRSxJQUFJLEdBQUNQLEdBQUUsSUFBSSxDQUFDUSxNQUFNLEdBQUNIO0lBQUM7QUFBQztBQUFDLE1BQU1rQixVQUFVN0IsMERBQUNBO0lBQUNLLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxDQUFDO1FBQUMsS0FBSyxJQUFHLElBQUksQ0FBQ0UsSUFBSSxHQUFDUCxHQUFFLElBQUksQ0FBQ1EsTUFBTSxHQUFDSDtJQUFDO0FBQUM7QUFBQyxNQUFNbUI7SUFBRXpCLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxDQUFDO1FBQUMsSUFBSSxDQUFDRyxNQUFNLEdBQUNSLEdBQUUsSUFBSSxDQUFDTyxJQUFJLEdBQUNGO0lBQUM7QUFBQztBQUFDLE1BQU1vQjtJQUFFMUIsWUFBWUMsQ0FBQyxFQUFDSyxDQUFDLEVBQUNDLENBQUMsQ0FBQztRQUFDLElBQUksQ0FBQ0MsSUFBSSxHQUFDUCxHQUFFLElBQUksQ0FBQ1EsTUFBTSxHQUFDSCxHQUFFLElBQUksQ0FBQ3FCLEtBQUssR0FBQ3BCO0lBQUM7QUFBQztBQUFDLE1BQU1xQjtJQUFFNUIsWUFBWUMsQ0FBQyxFQUFDSyxDQUFDLENBQUM7UUFBQyxJQUFJLENBQUN1QixTQUFTLEdBQUM1QixHQUFFLElBQUksQ0FBQ1EsTUFBTSxHQUFDSDtJQUFDO0FBQUM7QUFBQyxNQUFNd0I7SUFBRTlCLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxFQUFDQyxDQUFDLENBQUM7UUFBQyxJQUFJLENBQUNDLElBQUksR0FBQ1AsR0FBRSxJQUFJLENBQUNRLE1BQU0sR0FBQ0gsR0FBRSxJQUFJLENBQUN5QixnQkFBZ0IsR0FBQ3hCO0lBQUM7QUFBQztBQUFDLE1BQU15QixVQUFVcEMsK0NBQUNBO0lBQUNJLGFBQWE7UUFBQyxLQUFLO0lBQUU7QUFBQztBQUFDLE1BQU1pQztJQUFFakMsWUFBWUMsQ0FBQyxDQUFDO1FBQUMsSUFBSSxDQUFDQyxJQUFJLEdBQUNELEdBQUUsSUFBSSxDQUFDRSxRQUFRLEdBQUMsTUFBSyxJQUFJLENBQUNDLE9BQU8sR0FBQztJQUFDO0FBQUM7QUFBQyxNQUFNOEIsVUFBVXBDLGdEQUFDQTtJQUFDRSxhQUFhO1FBQUMsS0FBSztJQUFFO0FBQUM7QUFBQyxNQUFNbUM7SUFBRW5DLFlBQVlDLENBQUMsQ0FBQztRQUFDLElBQUksQ0FBQ21DLE1BQU0sR0FBQ25DO0lBQUM7QUFBQztBQUFrVSxDQUNyaEQsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3R5cGVzL2Rpc3QvaW5kZXguZXMuanM/NjBhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7SUV2ZW50cyBhcyBvfWZyb21cIkB3YWxsZXRjb25uZWN0L2V2ZW50c1wiO2ltcG9ydCBjLHtFdmVudEVtaXR0ZXIgYXMgaX1mcm9tXCJldmVudHNcIjtjbGFzcyBuIGV4dGVuZHMgb3tjb25zdHJ1Y3RvcihzKXtzdXBlcigpLHRoaXMub3B0cz1zLHRoaXMucHJvdG9jb2w9XCJ3Y1wiLHRoaXMudmVyc2lvbj0yfX1jbGFzcyBse2NvbnN0cnVjdG9yKHMsdCxlKXt0aGlzLmNvcmU9cyx0aGlzLmxvZ2dlcj10fX1jbGFzcyBoIGV4dGVuZHMgb3tjb25zdHJ1Y3RvcihzLHQpe3N1cGVyKCksdGhpcy5jb3JlPXMsdGhpcy5sb2dnZXI9dCx0aGlzLnJlY29yZHM9bmV3IE1hcH19Y2xhc3MgYXtjb25zdHJ1Y3RvcihzLHQpe3RoaXMubG9nZ2VyPXMsdGhpcy5jb3JlPXR9fWNsYXNzIGcgZXh0ZW5kcyBve2NvbnN0cnVjdG9yKHMsdCl7c3VwZXIoKSx0aGlzLnJlbGF5ZXI9cyx0aGlzLmxvZ2dlcj10fX1jbGFzcyB1IGV4dGVuZHMgb3tjb25zdHJ1Y3RvcihzKXtzdXBlcigpfX1jbGFzcyBwe2NvbnN0cnVjdG9yKHMsdCxlLGYpe3RoaXMuY29yZT1zLHRoaXMubG9nZ2VyPXQsdGhpcy5uYW1lPWV9fWNsYXNzIEl7Y29uc3RydWN0b3IoKXt0aGlzLm1hcD1uZXcgTWFwfX1jbGFzcyBkIGV4dGVuZHMgb3tjb25zdHJ1Y3RvcihzLHQpe3N1cGVyKCksdGhpcy5yZWxheWVyPXMsdGhpcy5sb2dnZXI9dH19Y2xhc3MgRXtjb25zdHJ1Y3RvcihzLHQpe3RoaXMuY29yZT1zLHRoaXMubG9nZ2VyPXR9fWNsYXNzIHggZXh0ZW5kcyBve2NvbnN0cnVjdG9yKHMsdCl7c3VwZXIoKSx0aGlzLmNvcmU9cyx0aGlzLmxvZ2dlcj10fX1jbGFzcyBte2NvbnN0cnVjdG9yKHMsdCl7dGhpcy5sb2dnZXI9cyx0aGlzLmNvcmU9dH19Y2xhc3MgeXtjb25zdHJ1Y3RvcihzLHQsZSl7dGhpcy5jb3JlPXMsdGhpcy5sb2dnZXI9dCx0aGlzLnN0b3JlPWV9fWNsYXNzIHZ7Y29uc3RydWN0b3Iocyx0KXt0aGlzLnByb2plY3RJZD1zLHRoaXMubG9nZ2VyPXR9fWNsYXNzIEN7Y29uc3RydWN0b3Iocyx0LGUpe3RoaXMuY29yZT1zLHRoaXMubG9nZ2VyPXQsdGhpcy50ZWxlbWV0cnlFbmFibGVkPWV9fWNsYXNzIGIgZXh0ZW5kcyBje2NvbnN0cnVjdG9yKCl7c3VwZXIoKX19Y2xhc3MgU3tjb25zdHJ1Y3RvcihzKXt0aGlzLm9wdHM9cyx0aGlzLnByb3RvY29sPVwid2NcIix0aGlzLnZlcnNpb249Mn19Y2xhc3MgdyBleHRlbmRzIGl7Y29uc3RydWN0b3IoKXtzdXBlcigpfX1jbGFzcyBNe2NvbnN0cnVjdG9yKHMpe3RoaXMuY2xpZW50PXN9fWV4cG9ydHtuIGFzIElDb3JlLGwgYXMgSUNyeXB0byx2IGFzIElFY2hvQ2xpZW50LE0gYXMgSUVuZ2luZSx3IGFzIElFbmdpbmVFdmVudHMsQyBhcyBJRXZlbnRDbGllbnQseCBhcyBJRXhwaXJlcixoIGFzIElKc29uUnBjSGlzdG9yeSxFIGFzIElLZXlDaGFpbixhIGFzIElNZXNzYWdlVHJhY2tlcixtIGFzIElQYWlyaW5nLGcgYXMgSVB1Ymxpc2hlcix1IGFzIElSZWxheWVyLFMgYXMgSVNpZ25DbGllbnQsYiBhcyBJU2lnbkNsaWVudEV2ZW50cyxwIGFzIElTdG9yZSxkIGFzIElTdWJzY3JpYmVyLEkgYXMgSVN1YnNjcmliZXJUb3BpY01hcCx5IGFzIElWZXJpZnl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMuanMubWFwXG4iXSwibmFtZXMiOlsiSUV2ZW50cyIsIm8iLCJjIiwiRXZlbnRFbWl0dGVyIiwiaSIsIm4iLCJjb25zdHJ1Y3RvciIsInMiLCJvcHRzIiwicHJvdG9jb2wiLCJ2ZXJzaW9uIiwibCIsInQiLCJlIiwiY29yZSIsImxvZ2dlciIsImgiLCJyZWNvcmRzIiwiTWFwIiwiYSIsImciLCJyZWxheWVyIiwidSIsInAiLCJmIiwibmFtZSIsIkkiLCJtYXAiLCJkIiwiRSIsIngiLCJtIiwieSIsInN0b3JlIiwidiIsInByb2plY3RJZCIsIkMiLCJ0ZWxlbWV0cnlFbmFibGVkIiwiYiIsIlMiLCJ3IiwiTSIsImNsaWVudCIsIklDb3JlIiwiSUNyeXB0byIsIklFY2hvQ2xpZW50IiwiSUVuZ2luZSIsIklFbmdpbmVFdmVudHMiLCJJRXZlbnRDbGllbnQiLCJJRXhwaXJlciIsIklKc29uUnBjSGlzdG9yeSIsIklLZXlDaGFpbiIsIklNZXNzYWdlVHJhY2tlciIsIklQYWlyaW5nIiwiSVB1Ymxpc2hlciIsIklSZWxheWVyIiwiSVNpZ25DbGllbnQiLCJJU2lnbkNsaWVudEV2ZW50cyIsIklTdG9yZSIsIklTdWJzY3JpYmVyIiwiSVN1YnNjcmliZXJUb3BpY01hcCIsIklWZXJpZnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/types/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/universal-provider/dist/index.es.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@walletconnect/universal-provider/dist/index.es.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UniversalProvider: () => (/* binding */ Iv),\n/* harmony export */   \"default\": () => (/* binding */ dr)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/sign-client */ \"(ssr)/./node_modules/@walletconnect/sign-client/dist/index.es.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/logger */ \"(ssr)/./node_modules/@walletconnect/logger/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/jsonrpc-http-connection */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\n\n\n\nconst ya = \"error\", Kg = \"wss://relay.walletconnect.com\", Jg = \"wc\", Yg = \"universal_provider\", Sa = `${Jg}@2:${Yg}:`, Zg = \"https://rpc.walletconnect.com/v1/\", Kn = \"generic\", Tt = {\n    DEFAULT_CHAIN_CHANGED: \"default_chain_changed\"\n};\nvar _e = typeof globalThis < \"u\" ? globalThis :  false ? 0 : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {}, Ui = {\n    exports: {}\n}; /**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */ \n(function(P, s) {\n    (function() {\n        var i, p = \"4.17.21\", w = 200, x = \"Unsupported core-js use. Try https://npms.io/search?q=ponyfill.\", O = \"Expected a function\", k = \"Invalid `variable` option passed into `_.template`\", tn = \"__lodash_hash_undefined__\", Jn = 500, xn = \"__lodash_placeholder__\", Ht = 1, Mt = 2, En = 4, yn = 1, me = 2, vt = 1, ln = 2, Gi = 4, Dt = 8, Sn = 16, Nt = 32, On = 64, Bt = 128, Yn = 256, gr = 512, Wa = 30, Ma = \"...\", Ba = 800, Ga = 16, zi = 1, za = 2, Ka = 3, pn = 1 / 0, nn = 9007199254740991, Ja = 17976931348623157e292, we = 0 / 0, $t = 4294967295, Ya = $t - 1, Za = $t >>> 1, Xa = [\n            [\n                \"ary\",\n                Bt\n            ],\n            [\n                \"bind\",\n                vt\n            ],\n            [\n                \"bindKey\",\n                ln\n            ],\n            [\n                \"curry\",\n                Dt\n            ],\n            [\n                \"curryRight\",\n                Sn\n            ],\n            [\n                \"flip\",\n                gr\n            ],\n            [\n                \"partial\",\n                Nt\n            ],\n            [\n                \"partialRight\",\n                On\n            ],\n            [\n                \"rearg\",\n                Yn\n            ]\n        ], Rn = \"[object Arguments]\", Pe = \"[object Array]\", Qa = \"[object AsyncFunction]\", Zn = \"[object Boolean]\", Xn = \"[object Date]\", Va = \"[object DOMException]\", Ce = \"[object Error]\", Ae = \"[object Function]\", Ki = \"[object GeneratorFunction]\", Et = \"[object Map]\", Qn = \"[object Number]\", ka = \"[object Null]\", Gt = \"[object Object]\", Ji = \"[object Promise]\", ja = \"[object Proxy]\", Vn = \"[object RegExp]\", yt = \"[object Set]\", kn = \"[object String]\", Ie = \"[object Symbol]\", to = \"[object Undefined]\", jn = \"[object WeakMap]\", no = \"[object WeakSet]\", te = \"[object ArrayBuffer]\", bn = \"[object DataView]\", vr = \"[object Float32Array]\", _r = \"[object Float64Array]\", mr = \"[object Int8Array]\", wr = \"[object Int16Array]\", Pr = \"[object Int32Array]\", Cr = \"[object Uint8Array]\", Ar = \"[object Uint8ClampedArray]\", Ir = \"[object Uint16Array]\", xr = \"[object Uint32Array]\", eo = /\\b__p \\+= '';/g, ro = /\\b(__p \\+=) '' \\+/g, io = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g, Yi = /&(?:amp|lt|gt|quot|#39);/g, Zi = /[&<>\"']/g, so = RegExp(Yi.source), uo = RegExp(Zi.source), ao = /<%-([\\s\\S]+?)%>/g, oo = /<%([\\s\\S]+?)%>/g, Xi = /<%=([\\s\\S]+?)%>/g, fo = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/, co = /^\\w*$/, ho = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g, Er = /[\\\\^$.*+?()[\\]{}|]/g, lo = RegExp(Er.source), yr = /^\\s+/, po = /\\s/, go = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/, vo = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/, _o = /,? & /, mo = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g, wo = /[()=,{}\\[\\]\\/\\s]/, Po = /\\\\(\\\\)?/g, Co = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g, Qi = /\\w*$/, Ao = /^[-+]0x[0-9a-f]+$/i, Io = /^0b[01]+$/i, xo = /^\\[object .+?Constructor\\]$/, Eo = /^0o[0-7]+$/i, yo = /^(?:0|[1-9]\\d*)$/, So = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g, xe = /($^)/, Oo = /['\\n\\r\\u2028\\u2029\\\\]/g, Ee = \"\\ud800-\\udfff\", Ro = \"\\\\u0300-\\\\u036f\", bo = \"\\\\ufe20-\\\\ufe2f\", To = \"\\\\u20d0-\\\\u20ff\", Vi = Ro + bo + To, ki = \"\\\\u2700-\\\\u27bf\", ji = \"a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff\", Lo = \"\\\\xac\\\\xb1\\\\xd7\\\\xf7\", Ho = \"\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf\", Do = \"\\\\u2000-\\\\u206f\", No = \" \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000\", ts = \"A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde\", ns = \"\\\\ufe0e\\\\ufe0f\", es = Lo + Ho + Do + No, Sr = \"['’]\", $o = \"[\" + Ee + \"]\", rs = \"[\" + es + \"]\", ye = \"[\" + Vi + \"]\", is = \"\\\\d+\", qo = \"[\" + ki + \"]\", ss = \"[\" + ji + \"]\", us = \"[^\" + Ee + es + is + ki + ji + ts + \"]\", Or = \"\\ud83c[\\udffb-\\udfff]\", Uo = \"(?:\" + ye + \"|\" + Or + \")\", as = \"[^\" + Ee + \"]\", Rr = \"(?:\\ud83c[\\udde6-\\uddff]){2}\", br = \"[\\ud800-\\udbff][\\udc00-\\udfff]\", Tn = \"[\" + ts + \"]\", os = \"\\\\u200d\", fs = \"(?:\" + ss + \"|\" + us + \")\", Fo = \"(?:\" + Tn + \"|\" + us + \")\", cs = \"(?:\" + Sr + \"(?:d|ll|m|re|s|t|ve))?\", hs = \"(?:\" + Sr + \"(?:D|LL|M|RE|S|T|VE))?\", ls = Uo + \"?\", ps = \"[\" + ns + \"]?\", Wo = \"(?:\" + os + \"(?:\" + [\n            as,\n            Rr,\n            br\n        ].join(\"|\") + \")\" + ps + ls + \")*\", Mo = \"\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])\", Bo = \"\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])\", ds = ps + ls + Wo, Go = \"(?:\" + [\n            qo,\n            Rr,\n            br\n        ].join(\"|\") + \")\" + ds, zo = \"(?:\" + [\n            as + ye + \"?\",\n            ye,\n            Rr,\n            br,\n            $o\n        ].join(\"|\") + \")\", Ko = RegExp(Sr, \"g\"), Jo = RegExp(ye, \"g\"), Tr = RegExp(Or + \"(?=\" + Or + \")|\" + zo + ds, \"g\"), Yo = RegExp([\n            Tn + \"?\" + ss + \"+\" + cs + \"(?=\" + [\n                rs,\n                Tn,\n                \"$\"\n            ].join(\"|\") + \")\",\n            Fo + \"+\" + hs + \"(?=\" + [\n                rs,\n                Tn + fs,\n                \"$\"\n            ].join(\"|\") + \")\",\n            Tn + \"?\" + fs + \"+\" + cs,\n            Tn + \"+\" + hs,\n            Bo,\n            Mo,\n            is,\n            Go\n        ].join(\"|\"), \"g\"), Zo = RegExp(\"[\" + os + Ee + Vi + ns + \"]\"), Xo = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, Qo = [\n            \"Array\",\n            \"Buffer\",\n            \"DataView\",\n            \"Date\",\n            \"Error\",\n            \"Float32Array\",\n            \"Float64Array\",\n            \"Function\",\n            \"Int8Array\",\n            \"Int16Array\",\n            \"Int32Array\",\n            \"Map\",\n            \"Math\",\n            \"Object\",\n            \"Promise\",\n            \"RegExp\",\n            \"Set\",\n            \"String\",\n            \"Symbol\",\n            \"TypeError\",\n            \"Uint8Array\",\n            \"Uint8ClampedArray\",\n            \"Uint16Array\",\n            \"Uint32Array\",\n            \"WeakMap\",\n            \"_\",\n            \"clearTimeout\",\n            \"isFinite\",\n            \"parseInt\",\n            \"setTimeout\"\n        ], Vo = -1, G = {};\n        G[vr] = G[_r] = G[mr] = G[wr] = G[Pr] = G[Cr] = G[Ar] = G[Ir] = G[xr] = !0, G[Rn] = G[Pe] = G[te] = G[Zn] = G[bn] = G[Xn] = G[Ce] = G[Ae] = G[Et] = G[Qn] = G[Gt] = G[Vn] = G[yt] = G[kn] = G[jn] = !1;\n        var B = {};\n        B[Rn] = B[Pe] = B[te] = B[bn] = B[Zn] = B[Xn] = B[vr] = B[_r] = B[mr] = B[wr] = B[Pr] = B[Et] = B[Qn] = B[Gt] = B[Vn] = B[yt] = B[kn] = B[Ie] = B[Cr] = B[Ar] = B[Ir] = B[xr] = !0, B[Ce] = B[Ae] = B[jn] = !1;\n        var ko = {\n            À: \"A\",\n            Á: \"A\",\n            Â: \"A\",\n            Ã: \"A\",\n            Ä: \"A\",\n            Å: \"A\",\n            à: \"a\",\n            á: \"a\",\n            â: \"a\",\n            ã: \"a\",\n            ä: \"a\",\n            å: \"a\",\n            Ç: \"C\",\n            ç: \"c\",\n            Ð: \"D\",\n            ð: \"d\",\n            È: \"E\",\n            É: \"E\",\n            Ê: \"E\",\n            Ë: \"E\",\n            è: \"e\",\n            é: \"e\",\n            ê: \"e\",\n            ë: \"e\",\n            Ì: \"I\",\n            Í: \"I\",\n            Î: \"I\",\n            Ï: \"I\",\n            ì: \"i\",\n            í: \"i\",\n            î: \"i\",\n            ï: \"i\",\n            Ñ: \"N\",\n            ñ: \"n\",\n            Ò: \"O\",\n            Ó: \"O\",\n            Ô: \"O\",\n            Õ: \"O\",\n            Ö: \"O\",\n            Ø: \"O\",\n            ò: \"o\",\n            ó: \"o\",\n            ô: \"o\",\n            õ: \"o\",\n            ö: \"o\",\n            ø: \"o\",\n            Ù: \"U\",\n            Ú: \"U\",\n            Û: \"U\",\n            Ü: \"U\",\n            ù: \"u\",\n            ú: \"u\",\n            û: \"u\",\n            ü: \"u\",\n            Ý: \"Y\",\n            ý: \"y\",\n            ÿ: \"y\",\n            Æ: \"Ae\",\n            æ: \"ae\",\n            Þ: \"Th\",\n            þ: \"th\",\n            ß: \"ss\",\n            Ā: \"A\",\n            Ă: \"A\",\n            Ą: \"A\",\n            ā: \"a\",\n            ă: \"a\",\n            ą: \"a\",\n            Ć: \"C\",\n            Ĉ: \"C\",\n            Ċ: \"C\",\n            Č: \"C\",\n            ć: \"c\",\n            ĉ: \"c\",\n            ċ: \"c\",\n            č: \"c\",\n            Ď: \"D\",\n            Đ: \"D\",\n            ď: \"d\",\n            đ: \"d\",\n            Ē: \"E\",\n            Ĕ: \"E\",\n            Ė: \"E\",\n            Ę: \"E\",\n            Ě: \"E\",\n            ē: \"e\",\n            ĕ: \"e\",\n            ė: \"e\",\n            ę: \"e\",\n            ě: \"e\",\n            Ĝ: \"G\",\n            Ğ: \"G\",\n            Ġ: \"G\",\n            Ģ: \"G\",\n            ĝ: \"g\",\n            ğ: \"g\",\n            ġ: \"g\",\n            ģ: \"g\",\n            Ĥ: \"H\",\n            Ħ: \"H\",\n            ĥ: \"h\",\n            ħ: \"h\",\n            Ĩ: \"I\",\n            Ī: \"I\",\n            Ĭ: \"I\",\n            Į: \"I\",\n            İ: \"I\",\n            ĩ: \"i\",\n            ī: \"i\",\n            ĭ: \"i\",\n            į: \"i\",\n            ı: \"i\",\n            Ĵ: \"J\",\n            ĵ: \"j\",\n            Ķ: \"K\",\n            ķ: \"k\",\n            ĸ: \"k\",\n            Ĺ: \"L\",\n            Ļ: \"L\",\n            Ľ: \"L\",\n            Ŀ: \"L\",\n            Ł: \"L\",\n            ĺ: \"l\",\n            ļ: \"l\",\n            ľ: \"l\",\n            ŀ: \"l\",\n            ł: \"l\",\n            Ń: \"N\",\n            Ņ: \"N\",\n            Ň: \"N\",\n            Ŋ: \"N\",\n            ń: \"n\",\n            ņ: \"n\",\n            ň: \"n\",\n            ŋ: \"n\",\n            Ō: \"O\",\n            Ŏ: \"O\",\n            Ő: \"O\",\n            ō: \"o\",\n            ŏ: \"o\",\n            ő: \"o\",\n            Ŕ: \"R\",\n            Ŗ: \"R\",\n            Ř: \"R\",\n            ŕ: \"r\",\n            ŗ: \"r\",\n            ř: \"r\",\n            Ś: \"S\",\n            Ŝ: \"S\",\n            Ş: \"S\",\n            Š: \"S\",\n            ś: \"s\",\n            ŝ: \"s\",\n            ş: \"s\",\n            š: \"s\",\n            Ţ: \"T\",\n            Ť: \"T\",\n            Ŧ: \"T\",\n            ţ: \"t\",\n            ť: \"t\",\n            ŧ: \"t\",\n            Ũ: \"U\",\n            Ū: \"U\",\n            Ŭ: \"U\",\n            Ů: \"U\",\n            Ű: \"U\",\n            Ų: \"U\",\n            ũ: \"u\",\n            ū: \"u\",\n            ŭ: \"u\",\n            ů: \"u\",\n            ű: \"u\",\n            ų: \"u\",\n            Ŵ: \"W\",\n            ŵ: \"w\",\n            Ŷ: \"Y\",\n            ŷ: \"y\",\n            Ÿ: \"Y\",\n            Ź: \"Z\",\n            Ż: \"Z\",\n            Ž: \"Z\",\n            ź: \"z\",\n            ż: \"z\",\n            ž: \"z\",\n            Ĳ: \"IJ\",\n            ĳ: \"ij\",\n            Œ: \"Oe\",\n            œ: \"oe\",\n            ŉ: \"'n\",\n            ſ: \"s\"\n        }, jo = {\n            \"&\": \"&amp;\",\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            '\"': \"&quot;\",\n            \"'\": \"&#39;\"\n        }, tf = {\n            \"&amp;\": \"&\",\n            \"&lt;\": \"<\",\n            \"&gt;\": \">\",\n            \"&quot;\": '\"',\n            \"&#39;\": \"'\"\n        }, nf = {\n            \"\\\\\": \"\\\\\",\n            \"'\": \"'\",\n            \"\\n\": \"n\",\n            \"\\r\": \"r\",\n            \"\\u2028\": \"u2028\",\n            \"\\u2029\": \"u2029\"\n        }, ef = parseFloat, rf = parseInt, gs = typeof _e == \"object\" && _e && _e.Object === Object && _e, sf = typeof self == \"object\" && self && self.Object === Object && self, j = gs || sf || Function(\"return this\")(), Lr = s && !s.nodeType && s, dn = Lr && !0 && P && !P.nodeType && P, vs = dn && dn.exports === Lr, Hr = vs && gs.process, _t = function() {\n            try {\n                var h = dn && dn.require && dn.require(\"util\").types;\n                return h || Hr && Hr.binding && Hr.binding(\"util\");\n            } catch  {}\n        }(), _s = _t && _t.isArrayBuffer, ms = _t && _t.isDate, ws = _t && _t.isMap, Ps = _t && _t.isRegExp, Cs = _t && _t.isSet, As = _t && _t.isTypedArray;\n        function ct(h, g, d) {\n            switch(d.length){\n                case 0:\n                    return h.call(g);\n                case 1:\n                    return h.call(g, d[0]);\n                case 2:\n                    return h.call(g, d[0], d[1]);\n                case 3:\n                    return h.call(g, d[0], d[1], d[2]);\n            }\n            return h.apply(g, d);\n        }\n        function uf(h, g, d, A) {\n            for(var R = -1, q = h == null ? 0 : h.length; ++R < q;){\n                var X = h[R];\n                g(A, X, d(X), h);\n            }\n            return A;\n        }\n        function mt(h, g) {\n            for(var d = -1, A = h == null ? 0 : h.length; ++d < A && g(h[d], d, h) !== !1;);\n            return h;\n        }\n        function af(h, g) {\n            for(var d = h == null ? 0 : h.length; d-- && g(h[d], d, h) !== !1;);\n            return h;\n        }\n        function Is(h, g) {\n            for(var d = -1, A = h == null ? 0 : h.length; ++d < A;)if (!g(h[d], d, h)) return !1;\n            return !0;\n        }\n        function en(h, g) {\n            for(var d = -1, A = h == null ? 0 : h.length, R = 0, q = []; ++d < A;){\n                var X = h[d];\n                g(X, d, h) && (q[R++] = X);\n            }\n            return q;\n        }\n        function Se(h, g) {\n            var d = h == null ? 0 : h.length;\n            return !!d && Ln(h, g, 0) > -1;\n        }\n        function Dr(h, g, d) {\n            for(var A = -1, R = h == null ? 0 : h.length; ++A < R;)if (d(g, h[A])) return !0;\n            return !1;\n        }\n        function z(h, g) {\n            for(var d = -1, A = h == null ? 0 : h.length, R = Array(A); ++d < A;)R[d] = g(h[d], d, h);\n            return R;\n        }\n        function rn(h, g) {\n            for(var d = -1, A = g.length, R = h.length; ++d < A;)h[R + d] = g[d];\n            return h;\n        }\n        function Nr(h, g, d, A) {\n            var R = -1, q = h == null ? 0 : h.length;\n            for(A && q && (d = h[++R]); ++R < q;)d = g(d, h[R], R, h);\n            return d;\n        }\n        function of(h, g, d, A) {\n            var R = h == null ? 0 : h.length;\n            for(A && R && (d = h[--R]); R--;)d = g(d, h[R], R, h);\n            return d;\n        }\n        function $r(h, g) {\n            for(var d = -1, A = h == null ? 0 : h.length; ++d < A;)if (g(h[d], d, h)) return !0;\n            return !1;\n        }\n        var ff = qr(\"length\");\n        function cf(h) {\n            return h.split(\"\");\n        }\n        function hf(h) {\n            return h.match(mo) || [];\n        }\n        function xs(h, g, d) {\n            var A;\n            return d(h, function(R, q, X) {\n                if (g(R, q, X)) return A = q, !1;\n            }), A;\n        }\n        function Oe(h, g, d, A) {\n            for(var R = h.length, q = d + (A ? 1 : -1); A ? q-- : ++q < R;)if (g(h[q], q, h)) return q;\n            return -1;\n        }\n        function Ln(h, g, d) {\n            return g === g ? If(h, g, d) : Oe(h, Es, d);\n        }\n        function lf(h, g, d, A) {\n            for(var R = d - 1, q = h.length; ++R < q;)if (A(h[R], g)) return R;\n            return -1;\n        }\n        function Es(h) {\n            return h !== h;\n        }\n        function ys(h, g) {\n            var d = h == null ? 0 : h.length;\n            return d ? Fr(h, g) / d : we;\n        }\n        function qr(h) {\n            return function(g) {\n                return g == null ? i : g[h];\n            };\n        }\n        function Ur(h) {\n            return function(g) {\n                return h == null ? i : h[g];\n            };\n        }\n        function Ss(h, g, d, A, R) {\n            return R(h, function(q, X, M) {\n                d = A ? (A = !1, q) : g(d, q, X, M);\n            }), d;\n        }\n        function pf(h, g) {\n            var d = h.length;\n            for(h.sort(g); d--;)h[d] = h[d].value;\n            return h;\n        }\n        function Fr(h, g) {\n            for(var d, A = -1, R = h.length; ++A < R;){\n                var q = g(h[A]);\n                q !== i && (d = d === i ? q : d + q);\n            }\n            return d;\n        }\n        function Wr(h, g) {\n            for(var d = -1, A = Array(h); ++d < h;)A[d] = g(d);\n            return A;\n        }\n        function df(h, g) {\n            return z(g, function(d) {\n                return [\n                    d,\n                    h[d]\n                ];\n            });\n        }\n        function Os(h) {\n            return h && h.slice(0, Ls(h) + 1).replace(yr, \"\");\n        }\n        function ht(h) {\n            return function(g) {\n                return h(g);\n            };\n        }\n        function Mr(h, g) {\n            return z(g, function(d) {\n                return h[d];\n            });\n        }\n        function ne(h, g) {\n            return h.has(g);\n        }\n        function Rs(h, g) {\n            for(var d = -1, A = h.length; ++d < A && Ln(g, h[d], 0) > -1;);\n            return d;\n        }\n        function bs(h, g) {\n            for(var d = h.length; d-- && Ln(g, h[d], 0) > -1;);\n            return d;\n        }\n        function gf(h, g) {\n            for(var d = h.length, A = 0; d--;)h[d] === g && ++A;\n            return A;\n        }\n        var vf = Ur(ko), _f = Ur(jo);\n        function mf(h) {\n            return \"\\\\\" + nf[h];\n        }\n        function wf(h, g) {\n            return h == null ? i : h[g];\n        }\n        function Hn(h) {\n            return Zo.test(h);\n        }\n        function Pf(h) {\n            return Xo.test(h);\n        }\n        function Cf(h) {\n            for(var g, d = []; !(g = h.next()).done;)d.push(g.value);\n            return d;\n        }\n        function Br(h) {\n            var g = -1, d = Array(h.size);\n            return h.forEach(function(A, R) {\n                d[++g] = [\n                    R,\n                    A\n                ];\n            }), d;\n        }\n        function Ts(h, g) {\n            return function(d) {\n                return h(g(d));\n            };\n        }\n        function sn(h, g) {\n            for(var d = -1, A = h.length, R = 0, q = []; ++d < A;){\n                var X = h[d];\n                (X === g || X === xn) && (h[d] = xn, q[R++] = d);\n            }\n            return q;\n        }\n        function Re(h) {\n            var g = -1, d = Array(h.size);\n            return h.forEach(function(A) {\n                d[++g] = A;\n            }), d;\n        }\n        function Af(h) {\n            var g = -1, d = Array(h.size);\n            return h.forEach(function(A) {\n                d[++g] = [\n                    A,\n                    A\n                ];\n            }), d;\n        }\n        function If(h, g, d) {\n            for(var A = d - 1, R = h.length; ++A < R;)if (h[A] === g) return A;\n            return -1;\n        }\n        function xf(h, g, d) {\n            for(var A = d + 1; A--;)if (h[A] === g) return A;\n            return A;\n        }\n        function Dn(h) {\n            return Hn(h) ? yf(h) : ff(h);\n        }\n        function St(h) {\n            return Hn(h) ? Sf(h) : cf(h);\n        }\n        function Ls(h) {\n            for(var g = h.length; g-- && po.test(h.charAt(g)););\n            return g;\n        }\n        var Ef = Ur(tf);\n        function yf(h) {\n            for(var g = Tr.lastIndex = 0; Tr.test(h);)++g;\n            return g;\n        }\n        function Sf(h) {\n            return h.match(Tr) || [];\n        }\n        function Of(h) {\n            return h.match(Yo) || [];\n        }\n        var Rf = function h(g) {\n            g = g == null ? j : Nn.defaults(j.Object(), g, Nn.pick(j, Qo));\n            var d = g.Array, A = g.Date, R = g.Error, q = g.Function, X = g.Math, M = g.Object, Gr = g.RegExp, bf = g.String, wt = g.TypeError, be = d.prototype, Tf = q.prototype, $n = M.prototype, Te = g[\"__core-js_shared__\"], Le = Tf.toString, W = $n.hasOwnProperty, Lf = 0, Hs = function() {\n                var t = /[^.]+$/.exec(Te && Te.keys && Te.keys.IE_PROTO || \"\");\n                return t ? \"Symbol(src)_1.\" + t : \"\";\n            }(), He = $n.toString, Hf = Le.call(M), Df = j._, Nf = Gr(\"^\" + Le.call(W).replace(Er, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\"), De = vs ? g.Buffer : i, un = g.Symbol, Ne = g.Uint8Array, Ds = De ? De.allocUnsafe : i, $e = Ts(M.getPrototypeOf, M), Ns = M.create, $s = $n.propertyIsEnumerable, qe = be.splice, qs = un ? un.isConcatSpreadable : i, ee = un ? un.iterator : i, gn = un ? un.toStringTag : i, Ue = function() {\n                try {\n                    var t = Pn(M, \"defineProperty\");\n                    return t({}, \"\", {}), t;\n                } catch  {}\n            }(), $f = g.clearTimeout !== j.clearTimeout && g.clearTimeout, qf = A && A.now !== j.Date.now && A.now, Uf = g.setTimeout !== j.setTimeout && g.setTimeout, Fe = X.ceil, We = X.floor, zr = M.getOwnPropertySymbols, Ff = De ? De.isBuffer : i, Us = g.isFinite, Wf = be.join, Mf = Ts(M.keys, M), Q = X.max, nt = X.min, Bf = A.now, Gf = g.parseInt, Fs = X.random, zf = be.reverse, Kr = Pn(g, \"DataView\"), re = Pn(g, \"Map\"), Jr = Pn(g, \"Promise\"), qn = Pn(g, \"Set\"), ie = Pn(g, \"WeakMap\"), se = Pn(M, \"create\"), Me = ie && new ie, Un = {}, Kf = Cn(Kr), Jf = Cn(re), Yf = Cn(Jr), Zf = Cn(qn), Xf = Cn(ie), Be = un ? un.prototype : i, ue = Be ? Be.valueOf : i, Ws = Be ? Be.toString : i;\n            function a(t) {\n                if (J(t) && !b(t) && !(t instanceof N)) {\n                    if (t instanceof Pt) return t;\n                    if (W.call(t, \"__wrapped__\")) return Mu(t);\n                }\n                return new Pt(t);\n            }\n            var Fn = function() {\n                function t() {}\n                return function(n) {\n                    if (!K(n)) return {};\n                    if (Ns) return Ns(n);\n                    t.prototype = n;\n                    var e = new t;\n                    return t.prototype = i, e;\n                };\n            }();\n            function Ge() {}\n            function Pt(t, n) {\n                this.__wrapped__ = t, this.__actions__ = [], this.__chain__ = !!n, this.__index__ = 0, this.__values__ = i;\n            }\n            a.templateSettings = {\n                escape: ao,\n                evaluate: oo,\n                interpolate: Xi,\n                variable: \"\",\n                imports: {\n                    _: a\n                }\n            }, a.prototype = Ge.prototype, a.prototype.constructor = a, Pt.prototype = Fn(Ge.prototype), Pt.prototype.constructor = Pt;\n            function N(t) {\n                this.__wrapped__ = t, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = $t, this.__views__ = [];\n            }\n            function Qf() {\n                var t = new N(this.__wrapped__);\n                return t.__actions__ = ut(this.__actions__), t.__dir__ = this.__dir__, t.__filtered__ = this.__filtered__, t.__iteratees__ = ut(this.__iteratees__), t.__takeCount__ = this.__takeCount__, t.__views__ = ut(this.__views__), t;\n            }\n            function Vf() {\n                if (this.__filtered__) {\n                    var t = new N(this);\n                    t.__dir__ = -1, t.__filtered__ = !0;\n                } else t = this.clone(), t.__dir__ *= -1;\n                return t;\n            }\n            function kf() {\n                var t = this.__wrapped__.value(), n = this.__dir__, e = b(t), r = n < 0, u = e ? t.length : 0, o = ch(0, u, this.__views__), f = o.start, c = o.end, l = c - f, v = r ? c : f - 1, _ = this.__iteratees__, m = _.length, C = 0, I = nt(l, this.__takeCount__);\n                if (!e || !r && u == l && I == l) return cu(t, this.__actions__);\n                var y = [];\n                t: for(; l-- && C < I;){\n                    v += n;\n                    for(var L = -1, S = t[v]; ++L < m;){\n                        var D = _[L], $ = D.iteratee, dt = D.type, st = $(S);\n                        if (dt == za) S = st;\n                        else if (!st) {\n                            if (dt == zi) continue t;\n                            break t;\n                        }\n                    }\n                    y[C++] = S;\n                }\n                return y;\n            }\n            N.prototype = Fn(Ge.prototype), N.prototype.constructor = N;\n            function vn(t) {\n                var n = -1, e = t == null ? 0 : t.length;\n                for(this.clear(); ++n < e;){\n                    var r = t[n];\n                    this.set(r[0], r[1]);\n                }\n            }\n            function jf() {\n                this.__data__ = se ? se(null) : {}, this.size = 0;\n            }\n            function tc(t) {\n                var n = this.has(t) && delete this.__data__[t];\n                return this.size -= n ? 1 : 0, n;\n            }\n            function nc(t) {\n                var n = this.__data__;\n                if (se) {\n                    var e = n[t];\n                    return e === tn ? i : e;\n                }\n                return W.call(n, t) ? n[t] : i;\n            }\n            function ec(t) {\n                var n = this.__data__;\n                return se ? n[t] !== i : W.call(n, t);\n            }\n            function rc(t, n) {\n                var e = this.__data__;\n                return this.size += this.has(t) ? 0 : 1, e[t] = se && n === i ? tn : n, this;\n            }\n            vn.prototype.clear = jf, vn.prototype.delete = tc, vn.prototype.get = nc, vn.prototype.has = ec, vn.prototype.set = rc;\n            function zt(t) {\n                var n = -1, e = t == null ? 0 : t.length;\n                for(this.clear(); ++n < e;){\n                    var r = t[n];\n                    this.set(r[0], r[1]);\n                }\n            }\n            function ic() {\n                this.__data__ = [], this.size = 0;\n            }\n            function sc(t) {\n                var n = this.__data__, e = ze(n, t);\n                if (e < 0) return !1;\n                var r = n.length - 1;\n                return e == r ? n.pop() : qe.call(n, e, 1), --this.size, !0;\n            }\n            function uc(t) {\n                var n = this.__data__, e = ze(n, t);\n                return e < 0 ? i : n[e][1];\n            }\n            function ac(t) {\n                return ze(this.__data__, t) > -1;\n            }\n            function oc(t, n) {\n                var e = this.__data__, r = ze(e, t);\n                return r < 0 ? (++this.size, e.push([\n                    t,\n                    n\n                ])) : e[r][1] = n, this;\n            }\n            zt.prototype.clear = ic, zt.prototype.delete = sc, zt.prototype.get = uc, zt.prototype.has = ac, zt.prototype.set = oc;\n            function Kt(t) {\n                var n = -1, e = t == null ? 0 : t.length;\n                for(this.clear(); ++n < e;){\n                    var r = t[n];\n                    this.set(r[0], r[1]);\n                }\n            }\n            function fc() {\n                this.size = 0, this.__data__ = {\n                    hash: new vn,\n                    map: new (re || zt),\n                    string: new vn\n                };\n            }\n            function cc(t) {\n                var n = er(this, t).delete(t);\n                return this.size -= n ? 1 : 0, n;\n            }\n            function hc(t) {\n                return er(this, t).get(t);\n            }\n            function lc(t) {\n                return er(this, t).has(t);\n            }\n            function pc(t, n) {\n                var e = er(this, t), r = e.size;\n                return e.set(t, n), this.size += e.size == r ? 0 : 1, this;\n            }\n            Kt.prototype.clear = fc, Kt.prototype.delete = cc, Kt.prototype.get = hc, Kt.prototype.has = lc, Kt.prototype.set = pc;\n            function _n(t) {\n                var n = -1, e = t == null ? 0 : t.length;\n                for(this.__data__ = new Kt; ++n < e;)this.add(t[n]);\n            }\n            function dc(t) {\n                return this.__data__.set(t, tn), this;\n            }\n            function gc(t) {\n                return this.__data__.has(t);\n            }\n            _n.prototype.add = _n.prototype.push = dc, _n.prototype.has = gc;\n            function Ot(t) {\n                var n = this.__data__ = new zt(t);\n                this.size = n.size;\n            }\n            function vc() {\n                this.__data__ = new zt, this.size = 0;\n            }\n            function _c(t) {\n                var n = this.__data__, e = n.delete(t);\n                return this.size = n.size, e;\n            }\n            function mc(t) {\n                return this.__data__.get(t);\n            }\n            function wc(t) {\n                return this.__data__.has(t);\n            }\n            function Pc(t, n) {\n                var e = this.__data__;\n                if (e instanceof zt) {\n                    var r = e.__data__;\n                    if (!re || r.length < w - 1) return r.push([\n                        t,\n                        n\n                    ]), this.size = ++e.size, this;\n                    e = this.__data__ = new Kt(r);\n                }\n                return e.set(t, n), this.size = e.size, this;\n            }\n            Ot.prototype.clear = vc, Ot.prototype.delete = _c, Ot.prototype.get = mc, Ot.prototype.has = wc, Ot.prototype.set = Pc;\n            function Ms(t, n) {\n                var e = b(t), r = !e && An(t), u = !e && !r && hn(t), o = !e && !r && !u && Gn(t), f = e || r || u || o, c = f ? Wr(t.length, bf) : [], l = c.length;\n                for(var v in t)(n || W.call(t, v)) && !(f && (v == \"length\" || u && (v == \"offset\" || v == \"parent\") || o && (v == \"buffer\" || v == \"byteLength\" || v == \"byteOffset\") || Xt(v, l))) && c.push(v);\n                return c;\n            }\n            function Bs(t) {\n                var n = t.length;\n                return n ? t[ri(0, n - 1)] : i;\n            }\n            function Cc(t, n) {\n                return rr(ut(t), mn(n, 0, t.length));\n            }\n            function Ac(t) {\n                return rr(ut(t));\n            }\n            function Yr(t, n, e) {\n                (e !== i && !Rt(t[n], e) || e === i && !(n in t)) && Jt(t, n, e);\n            }\n            function ae(t, n, e) {\n                var r = t[n];\n                (!(W.call(t, n) && Rt(r, e)) || e === i && !(n in t)) && Jt(t, n, e);\n            }\n            function ze(t, n) {\n                for(var e = t.length; e--;)if (Rt(t[e][0], n)) return e;\n                return -1;\n            }\n            function Ic(t, n, e, r) {\n                return an(t, function(u, o, f) {\n                    n(r, u, e(u), f);\n                }), r;\n            }\n            function Gs(t, n) {\n                return t && Ut(n, V(n), t);\n            }\n            function xc(t, n) {\n                return t && Ut(n, ot(n), t);\n            }\n            function Jt(t, n, e) {\n                n == \"__proto__\" && Ue ? Ue(t, n, {\n                    configurable: !0,\n                    enumerable: !0,\n                    value: e,\n                    writable: !0\n                }) : t[n] = e;\n            }\n            function Zr(t, n) {\n                for(var e = -1, r = n.length, u = d(r), o = t == null; ++e < r;)u[e] = o ? i : Oi(t, n[e]);\n                return u;\n            }\n            function mn(t, n, e) {\n                return t === t && (e !== i && (t = t <= e ? t : e), n !== i && (t = t >= n ? t : n)), t;\n            }\n            function Ct(t, n, e, r, u, o) {\n                var f, c = n & Ht, l = n & Mt, v = n & En;\n                if (e && (f = u ? e(t, r, u, o) : e(t)), f !== i) return f;\n                if (!K(t)) return t;\n                var _ = b(t);\n                if (_) {\n                    if (f = lh(t), !c) return ut(t, f);\n                } else {\n                    var m = et(t), C = m == Ae || m == Ki;\n                    if (hn(t)) return pu(t, c);\n                    if (m == Gt || m == Rn || C && !u) {\n                        if (f = l || C ? {} : Lu(t), !c) return l ? nh(t, xc(f, t)) : th(t, Gs(f, t));\n                    } else {\n                        if (!B[m]) return u ? t : {};\n                        f = ph(t, m, c);\n                    }\n                }\n                o || (o = new Ot);\n                var I = o.get(t);\n                if (I) return I;\n                o.set(t, f), aa(t) ? t.forEach(function(S) {\n                    f.add(Ct(S, n, e, S, t, o));\n                }) : sa(t) && t.forEach(function(S, D) {\n                    f.set(D, Ct(S, n, e, D, t, o));\n                });\n                var y = v ? l ? di : pi : l ? ot : V, L = _ ? i : y(t);\n                return mt(L || t, function(S, D) {\n                    L && (D = S, S = t[D]), ae(f, D, Ct(S, n, e, D, t, o));\n                }), f;\n            }\n            function Ec(t) {\n                var n = V(t);\n                return function(e) {\n                    return zs(e, t, n);\n                };\n            }\n            function zs(t, n, e) {\n                var r = e.length;\n                if (t == null) return !r;\n                for(t = M(t); r--;){\n                    var u = e[r], o = n[u], f = t[u];\n                    if (f === i && !(u in t) || !o(f)) return !1;\n                }\n                return !0;\n            }\n            function Ks(t, n, e) {\n                if (typeof t != \"function\") throw new wt(O);\n                return de(function() {\n                    t.apply(i, e);\n                }, n);\n            }\n            function oe(t, n, e, r) {\n                var u = -1, o = Se, f = !0, c = t.length, l = [], v = n.length;\n                if (!c) return l;\n                e && (n = z(n, ht(e))), r ? (o = Dr, f = !1) : n.length >= w && (o = ne, f = !1, n = new _n(n));\n                t: for(; ++u < c;){\n                    var _ = t[u], m = e == null ? _ : e(_);\n                    if (_ = r || _ !== 0 ? _ : 0, f && m === m) {\n                        for(var C = v; C--;)if (n[C] === m) continue t;\n                        l.push(_);\n                    } else o(n, m, r) || l.push(_);\n                }\n                return l;\n            }\n            var an = mu(qt), Js = mu(Qr, !0);\n            function yc(t, n) {\n                var e = !0;\n                return an(t, function(r, u, o) {\n                    return e = !!n(r, u, o), e;\n                }), e;\n            }\n            function Ke(t, n, e) {\n                for(var r = -1, u = t.length; ++r < u;){\n                    var o = t[r], f = n(o);\n                    if (f != null && (c === i ? f === f && !pt(f) : e(f, c))) var c = f, l = o;\n                }\n                return l;\n            }\n            function Sc(t, n, e, r) {\n                var u = t.length;\n                for(e = T(e), e < 0 && (e = -e > u ? 0 : u + e), r = r === i || r > u ? u : T(r), r < 0 && (r += u), r = e > r ? 0 : fa(r); e < r;)t[e++] = n;\n                return t;\n            }\n            function Ys(t, n) {\n                var e = [];\n                return an(t, function(r, u, o) {\n                    n(r, u, o) && e.push(r);\n                }), e;\n            }\n            function tt(t, n, e, r, u) {\n                var o = -1, f = t.length;\n                for(e || (e = gh), u || (u = []); ++o < f;){\n                    var c = t[o];\n                    n > 0 && e(c) ? n > 1 ? tt(c, n - 1, e, r, u) : rn(u, c) : r || (u[u.length] = c);\n                }\n                return u;\n            }\n            var Xr = wu(), Zs = wu(!0);\n            function qt(t, n) {\n                return t && Xr(t, n, V);\n            }\n            function Qr(t, n) {\n                return t && Zs(t, n, V);\n            }\n            function Je(t, n) {\n                return en(n, function(e) {\n                    return Qt(t[e]);\n                });\n            }\n            function wn(t, n) {\n                n = fn(n, t);\n                for(var e = 0, r = n.length; t != null && e < r;)t = t[Ft(n[e++])];\n                return e && e == r ? t : i;\n            }\n            function Xs(t, n, e) {\n                var r = n(t);\n                return b(t) ? r : rn(r, e(t));\n            }\n            function rt(t) {\n                return t == null ? t === i ? to : ka : gn && gn in M(t) ? fh(t) : Ah(t);\n            }\n            function Vr(t, n) {\n                return t > n;\n            }\n            function Oc(t, n) {\n                return t != null && W.call(t, n);\n            }\n            function Rc(t, n) {\n                return t != null && n in M(t);\n            }\n            function bc(t, n, e) {\n                return t >= nt(n, e) && t < Q(n, e);\n            }\n            function kr(t, n, e) {\n                for(var r = e ? Dr : Se, u = t[0].length, o = t.length, f = o, c = d(o), l = 1 / 0, v = []; f--;){\n                    var _ = t[f];\n                    f && n && (_ = z(_, ht(n))), l = nt(_.length, l), c[f] = !e && (n || u >= 120 && _.length >= 120) ? new _n(f && _) : i;\n                }\n                _ = t[0];\n                var m = -1, C = c[0];\n                t: for(; ++m < u && v.length < l;){\n                    var I = _[m], y = n ? n(I) : I;\n                    if (I = e || I !== 0 ? I : 0, !(C ? ne(C, y) : r(v, y, e))) {\n                        for(f = o; --f;){\n                            var L = c[f];\n                            if (!(L ? ne(L, y) : r(t[f], y, e))) continue t;\n                        }\n                        C && C.push(y), v.push(I);\n                    }\n                }\n                return v;\n            }\n            function Tc(t, n, e, r) {\n                return qt(t, function(u, o, f) {\n                    n(r, e(u), o, f);\n                }), r;\n            }\n            function fe(t, n, e) {\n                n = fn(n, t), t = $u(t, n);\n                var r = t == null ? t : t[Ft(It(n))];\n                return r == null ? i : ct(r, t, e);\n            }\n            function Qs(t) {\n                return J(t) && rt(t) == Rn;\n            }\n            function Lc(t) {\n                return J(t) && rt(t) == te;\n            }\n            function Hc(t) {\n                return J(t) && rt(t) == Xn;\n            }\n            function ce(t, n, e, r, u) {\n                return t === n ? !0 : t == null || n == null || !J(t) && !J(n) ? t !== t && n !== n : Dc(t, n, e, r, ce, u);\n            }\n            function Dc(t, n, e, r, u, o) {\n                var f = b(t), c = b(n), l = f ? Pe : et(t), v = c ? Pe : et(n);\n                l = l == Rn ? Gt : l, v = v == Rn ? Gt : v;\n                var _ = l == Gt, m = v == Gt, C = l == v;\n                if (C && hn(t)) {\n                    if (!hn(n)) return !1;\n                    f = !0, _ = !1;\n                }\n                if (C && !_) return o || (o = new Ot), f || Gn(t) ? Ru(t, n, e, r, u, o) : ah(t, n, l, e, r, u, o);\n                if (!(e & yn)) {\n                    var I = _ && W.call(t, \"__wrapped__\"), y = m && W.call(n, \"__wrapped__\");\n                    if (I || y) {\n                        var L = I ? t.value() : t, S = y ? n.value() : n;\n                        return o || (o = new Ot), u(L, S, e, r, o);\n                    }\n                }\n                return C ? (o || (o = new Ot), oh(t, n, e, r, u, o)) : !1;\n            }\n            function Nc(t) {\n                return J(t) && et(t) == Et;\n            }\n            function jr(t, n, e, r) {\n                var u = e.length, o = u, f = !r;\n                if (t == null) return !o;\n                for(t = M(t); u--;){\n                    var c = e[u];\n                    if (f && c[2] ? c[1] !== t[c[0]] : !(c[0] in t)) return !1;\n                }\n                for(; ++u < o;){\n                    c = e[u];\n                    var l = c[0], v = t[l], _ = c[1];\n                    if (f && c[2]) {\n                        if (v === i && !(l in t)) return !1;\n                    } else {\n                        var m = new Ot;\n                        if (r) var C = r(v, _, l, t, n, m);\n                        if (!(C === i ? ce(_, v, yn | me, r, m) : C)) return !1;\n                    }\n                }\n                return !0;\n            }\n            function Vs(t) {\n                if (!K(t) || _h(t)) return !1;\n                var n = Qt(t) ? Nf : xo;\n                return n.test(Cn(t));\n            }\n            function $c(t) {\n                return J(t) && rt(t) == Vn;\n            }\n            function qc(t) {\n                return J(t) && et(t) == yt;\n            }\n            function Uc(t) {\n                return J(t) && fr(t.length) && !!G[rt(t)];\n            }\n            function ks(t) {\n                return typeof t == \"function\" ? t : t == null ? ft : typeof t == \"object\" ? b(t) ? nu(t[0], t[1]) : tu(t) : Pa(t);\n            }\n            function ti(t) {\n                if (!pe(t)) return Mf(t);\n                var n = [];\n                for(var e in M(t))W.call(t, e) && e != \"constructor\" && n.push(e);\n                return n;\n            }\n            function Fc(t) {\n                if (!K(t)) return Ch(t);\n                var n = pe(t), e = [];\n                for(var r in t)r == \"constructor\" && (n || !W.call(t, r)) || e.push(r);\n                return e;\n            }\n            function ni(t, n) {\n                return t < n;\n            }\n            function js(t, n) {\n                var e = -1, r = at(t) ? d(t.length) : [];\n                return an(t, function(u, o, f) {\n                    r[++e] = n(u, o, f);\n                }), r;\n            }\n            function tu(t) {\n                var n = vi(t);\n                return n.length == 1 && n[0][2] ? Du(n[0][0], n[0][1]) : function(e) {\n                    return e === t || jr(e, t, n);\n                };\n            }\n            function nu(t, n) {\n                return mi(t) && Hu(n) ? Du(Ft(t), n) : function(e) {\n                    var r = Oi(e, t);\n                    return r === i && r === n ? Ri(e, t) : ce(n, r, yn | me);\n                };\n            }\n            function Ye(t, n, e, r, u) {\n                t !== n && Xr(n, function(o, f) {\n                    if (u || (u = new Ot), K(o)) Wc(t, n, f, e, Ye, r, u);\n                    else {\n                        var c = r ? r(Pi(t, f), o, f + \"\", t, n, u) : i;\n                        c === i && (c = o), Yr(t, f, c);\n                    }\n                }, ot);\n            }\n            function Wc(t, n, e, r, u, o, f) {\n                var c = Pi(t, e), l = Pi(n, e), v = f.get(l);\n                if (v) {\n                    Yr(t, e, v);\n                    return;\n                }\n                var _ = o ? o(c, l, e + \"\", t, n, f) : i, m = _ === i;\n                if (m) {\n                    var C = b(l), I = !C && hn(l), y = !C && !I && Gn(l);\n                    _ = l, C || I || y ? b(c) ? _ = c : Y(c) ? _ = ut(c) : I ? (m = !1, _ = pu(l, !0)) : y ? (m = !1, _ = du(l, !0)) : _ = [] : ge(l) || An(l) ? (_ = c, An(c) ? _ = ca(c) : (!K(c) || Qt(c)) && (_ = Lu(l))) : m = !1;\n                }\n                m && (f.set(l, _), u(_, l, r, o, f), f.delete(l)), Yr(t, e, _);\n            }\n            function eu(t, n) {\n                var e = t.length;\n                if (e) return n += n < 0 ? e : 0, Xt(n, e) ? t[n] : i;\n            }\n            function ru(t, n, e) {\n                n.length ? n = z(n, function(o) {\n                    return b(o) ? function(f) {\n                        return wn(f, o.length === 1 ? o[0] : o);\n                    } : o;\n                }) : n = [\n                    ft\n                ];\n                var r = -1;\n                n = z(n, ht(E()));\n                var u = js(t, function(o, f, c) {\n                    var l = z(n, function(v) {\n                        return v(o);\n                    });\n                    return {\n                        criteria: l,\n                        index: ++r,\n                        value: o\n                    };\n                });\n                return pf(u, function(o, f) {\n                    return jc(o, f, e);\n                });\n            }\n            function Mc(t, n) {\n                return iu(t, n, function(e, r) {\n                    return Ri(t, r);\n                });\n            }\n            function iu(t, n, e) {\n                for(var r = -1, u = n.length, o = {}; ++r < u;){\n                    var f = n[r], c = wn(t, f);\n                    e(c, f) && he(o, fn(f, t), c);\n                }\n                return o;\n            }\n            function Bc(t) {\n                return function(n) {\n                    return wn(n, t);\n                };\n            }\n            function ei(t, n, e, r) {\n                var u = r ? lf : Ln, o = -1, f = n.length, c = t;\n                for(t === n && (n = ut(n)), e && (c = z(t, ht(e))); ++o < f;)for(var l = 0, v = n[o], _ = e ? e(v) : v; (l = u(c, _, l, r)) > -1;)c !== t && qe.call(c, l, 1), qe.call(t, l, 1);\n                return t;\n            }\n            function su(t, n) {\n                for(var e = t ? n.length : 0, r = e - 1; e--;){\n                    var u = n[e];\n                    if (e == r || u !== o) {\n                        var o = u;\n                        Xt(u) ? qe.call(t, u, 1) : ui(t, u);\n                    }\n                }\n                return t;\n            }\n            function ri(t, n) {\n                return t + We(Fs() * (n - t + 1));\n            }\n            function Gc(t, n, e, r) {\n                for(var u = -1, o = Q(Fe((n - t) / (e || 1)), 0), f = d(o); o--;)f[r ? o : ++u] = t, t += e;\n                return f;\n            }\n            function ii(t, n) {\n                var e = \"\";\n                if (!t || n < 1 || n > nn) return e;\n                do n % 2 && (e += t), n = We(n / 2), n && (t += t);\n                while (n);\n                return e;\n            }\n            function H(t, n) {\n                return Ci(Nu(t, n, ft), t + \"\");\n            }\n            function zc(t) {\n                return Bs(zn(t));\n            }\n            function Kc(t, n) {\n                var e = zn(t);\n                return rr(e, mn(n, 0, e.length));\n            }\n            function he(t, n, e, r) {\n                if (!K(t)) return t;\n                n = fn(n, t);\n                for(var u = -1, o = n.length, f = o - 1, c = t; c != null && ++u < o;){\n                    var l = Ft(n[u]), v = e;\n                    if (l === \"__proto__\" || l === \"constructor\" || l === \"prototype\") return t;\n                    if (u != f) {\n                        var _ = c[l];\n                        v = r ? r(_, l, c) : i, v === i && (v = K(_) ? _ : Xt(n[u + 1]) ? [] : {});\n                    }\n                    ae(c, l, v), c = c[l];\n                }\n                return t;\n            }\n            var uu = Me ? function(t, n) {\n                return Me.set(t, n), t;\n            } : ft, Jc = Ue ? function(t, n) {\n                return Ue(t, \"toString\", {\n                    configurable: !0,\n                    enumerable: !1,\n                    value: Ti(n),\n                    writable: !0\n                });\n            } : ft;\n            function Yc(t) {\n                return rr(zn(t));\n            }\n            function At(t, n, e) {\n                var r = -1, u = t.length;\n                n < 0 && (n = -n > u ? 0 : u + n), e = e > u ? u : e, e < 0 && (e += u), u = n > e ? 0 : e - n >>> 0, n >>>= 0;\n                for(var o = d(u); ++r < u;)o[r] = t[r + n];\n                return o;\n            }\n            function Zc(t, n) {\n                var e;\n                return an(t, function(r, u, o) {\n                    return e = n(r, u, o), !e;\n                }), !!e;\n            }\n            function Ze(t, n, e) {\n                var r = 0, u = t == null ? r : t.length;\n                if (typeof n == \"number\" && n === n && u <= Za) {\n                    for(; r < u;){\n                        var o = r + u >>> 1, f = t[o];\n                        f !== null && !pt(f) && (e ? f <= n : f < n) ? r = o + 1 : u = o;\n                    }\n                    return u;\n                }\n                return si(t, n, ft, e);\n            }\n            function si(t, n, e, r) {\n                var u = 0, o = t == null ? 0 : t.length;\n                if (o === 0) return 0;\n                n = e(n);\n                for(var f = n !== n, c = n === null, l = pt(n), v = n === i; u < o;){\n                    var _ = We((u + o) / 2), m = e(t[_]), C = m !== i, I = m === null, y = m === m, L = pt(m);\n                    if (f) var S = r || y;\n                    else v ? S = y && (r || C) : c ? S = y && C && (r || !I) : l ? S = y && C && !I && (r || !L) : I || L ? S = !1 : S = r ? m <= n : m < n;\n                    S ? u = _ + 1 : o = _;\n                }\n                return nt(o, Ya);\n            }\n            function au(t, n) {\n                for(var e = -1, r = t.length, u = 0, o = []; ++e < r;){\n                    var f = t[e], c = n ? n(f) : f;\n                    if (!e || !Rt(c, l)) {\n                        var l = c;\n                        o[u++] = f === 0 ? 0 : f;\n                    }\n                }\n                return o;\n            }\n            function ou(t) {\n                return typeof t == \"number\" ? t : pt(t) ? we : +t;\n            }\n            function lt(t) {\n                if (typeof t == \"string\") return t;\n                if (b(t)) return z(t, lt) + \"\";\n                if (pt(t)) return Ws ? Ws.call(t) : \"\";\n                var n = t + \"\";\n                return n == \"0\" && 1 / t == -pn ? \"-0\" : n;\n            }\n            function on(t, n, e) {\n                var r = -1, u = Se, o = t.length, f = !0, c = [], l = c;\n                if (e) f = !1, u = Dr;\n                else if (o >= w) {\n                    var v = n ? null : sh(t);\n                    if (v) return Re(v);\n                    f = !1, u = ne, l = new _n;\n                } else l = n ? [] : c;\n                t: for(; ++r < o;){\n                    var _ = t[r], m = n ? n(_) : _;\n                    if (_ = e || _ !== 0 ? _ : 0, f && m === m) {\n                        for(var C = l.length; C--;)if (l[C] === m) continue t;\n                        n && l.push(m), c.push(_);\n                    } else u(l, m, e) || (l !== c && l.push(m), c.push(_));\n                }\n                return c;\n            }\n            function ui(t, n) {\n                return n = fn(n, t), t = $u(t, n), t == null || delete t[Ft(It(n))];\n            }\n            function fu(t, n, e, r) {\n                return he(t, n, e(wn(t, n)), r);\n            }\n            function Xe(t, n, e, r) {\n                for(var u = t.length, o = r ? u : -1; (r ? o-- : ++o < u) && n(t[o], o, t););\n                return e ? At(t, r ? 0 : o, r ? o + 1 : u) : At(t, r ? o + 1 : 0, r ? u : o);\n            }\n            function cu(t, n) {\n                var e = t;\n                return e instanceof N && (e = e.value()), Nr(n, function(r, u) {\n                    return u.func.apply(u.thisArg, rn([\n                        r\n                    ], u.args));\n                }, e);\n            }\n            function ai(t, n, e) {\n                var r = t.length;\n                if (r < 2) return r ? on(t[0]) : [];\n                for(var u = -1, o = d(r); ++u < r;)for(var f = t[u], c = -1; ++c < r;)c != u && (o[u] = oe(o[u] || f, t[c], n, e));\n                return on(tt(o, 1), n, e);\n            }\n            function hu(t, n, e) {\n                for(var r = -1, u = t.length, o = n.length, f = {}; ++r < u;){\n                    var c = r < o ? n[r] : i;\n                    e(f, t[r], c);\n                }\n                return f;\n            }\n            function oi(t) {\n                return Y(t) ? t : [];\n            }\n            function fi(t) {\n                return typeof t == \"function\" ? t : ft;\n            }\n            function fn(t, n) {\n                return b(t) ? t : mi(t, n) ? [\n                    t\n                ] : Wu(U(t));\n            }\n            var Xc = H;\n            function cn(t, n, e) {\n                var r = t.length;\n                return e = e === i ? r : e, !n && e >= r ? t : At(t, n, e);\n            }\n            var lu = $f || function(t) {\n                return j.clearTimeout(t);\n            };\n            function pu(t, n) {\n                if (n) return t.slice();\n                var e = t.length, r = Ds ? Ds(e) : new t.constructor(e);\n                return t.copy(r), r;\n            }\n            function ci(t) {\n                var n = new t.constructor(t.byteLength);\n                return new Ne(n).set(new Ne(t)), n;\n            }\n            function Qc(t, n) {\n                var e = n ? ci(t.buffer) : t.buffer;\n                return new t.constructor(e, t.byteOffset, t.byteLength);\n            }\n            function Vc(t) {\n                var n = new t.constructor(t.source, Qi.exec(t));\n                return n.lastIndex = t.lastIndex, n;\n            }\n            function kc(t) {\n                return ue ? M(ue.call(t)) : {};\n            }\n            function du(t, n) {\n                var e = n ? ci(t.buffer) : t.buffer;\n                return new t.constructor(e, t.byteOffset, t.length);\n            }\n            function gu(t, n) {\n                if (t !== n) {\n                    var e = t !== i, r = t === null, u = t === t, o = pt(t), f = n !== i, c = n === null, l = n === n, v = pt(n);\n                    if (!c && !v && !o && t > n || o && f && l && !c && !v || r && f && l || !e && l || !u) return 1;\n                    if (!r && !o && !v && t < n || v && e && u && !r && !o || c && e && u || !f && u || !l) return -1;\n                }\n                return 0;\n            }\n            function jc(t, n, e) {\n                for(var r = -1, u = t.criteria, o = n.criteria, f = u.length, c = e.length; ++r < f;){\n                    var l = gu(u[r], o[r]);\n                    if (l) {\n                        if (r >= c) return l;\n                        var v = e[r];\n                        return l * (v == \"desc\" ? -1 : 1);\n                    }\n                }\n                return t.index - n.index;\n            }\n            function vu(t, n, e, r) {\n                for(var u = -1, o = t.length, f = e.length, c = -1, l = n.length, v = Q(o - f, 0), _ = d(l + v), m = !r; ++c < l;)_[c] = n[c];\n                for(; ++u < f;)(m || u < o) && (_[e[u]] = t[u]);\n                for(; v--;)_[c++] = t[u++];\n                return _;\n            }\n            function _u(t, n, e, r) {\n                for(var u = -1, o = t.length, f = -1, c = e.length, l = -1, v = n.length, _ = Q(o - c, 0), m = d(_ + v), C = !r; ++u < _;)m[u] = t[u];\n                for(var I = u; ++l < v;)m[I + l] = n[l];\n                for(; ++f < c;)(C || u < o) && (m[I + e[f]] = t[u++]);\n                return m;\n            }\n            function ut(t, n) {\n                var e = -1, r = t.length;\n                for(n || (n = d(r)); ++e < r;)n[e] = t[e];\n                return n;\n            }\n            function Ut(t, n, e, r) {\n                var u = !e;\n                e || (e = {});\n                for(var o = -1, f = n.length; ++o < f;){\n                    var c = n[o], l = r ? r(e[c], t[c], c, e, t) : i;\n                    l === i && (l = t[c]), u ? Jt(e, c, l) : ae(e, c, l);\n                }\n                return e;\n            }\n            function th(t, n) {\n                return Ut(t, _i(t), n);\n            }\n            function nh(t, n) {\n                return Ut(t, bu(t), n);\n            }\n            function Qe(t, n) {\n                return function(e, r) {\n                    var u = b(e) ? uf : Ic, o = n ? n() : {};\n                    return u(e, t, E(r, 2), o);\n                };\n            }\n            function Wn(t) {\n                return H(function(n, e) {\n                    var r = -1, u = e.length, o = u > 1 ? e[u - 1] : i, f = u > 2 ? e[2] : i;\n                    for(o = t.length > 3 && typeof o == \"function\" ? (u--, o) : i, f && it(e[0], e[1], f) && (o = u < 3 ? i : o, u = 1), n = M(n); ++r < u;){\n                        var c = e[r];\n                        c && t(n, c, r, o);\n                    }\n                    return n;\n                });\n            }\n            function mu(t, n) {\n                return function(e, r) {\n                    if (e == null) return e;\n                    if (!at(e)) return t(e, r);\n                    for(var u = e.length, o = n ? u : -1, f = M(e); (n ? o-- : ++o < u) && r(f[o], o, f) !== !1;);\n                    return e;\n                };\n            }\n            function wu(t) {\n                return function(n, e, r) {\n                    for(var u = -1, o = M(n), f = r(n), c = f.length; c--;){\n                        var l = f[t ? c : ++u];\n                        if (e(o[l], l, o) === !1) break;\n                    }\n                    return n;\n                };\n            }\n            function eh(t, n, e) {\n                var r = n & vt, u = le(t);\n                function o() {\n                    var f = this && this !== j && this instanceof o ? u : t;\n                    return f.apply(r ? e : this, arguments);\n                }\n                return o;\n            }\n            function Pu(t) {\n                return function(n) {\n                    n = U(n);\n                    var e = Hn(n) ? St(n) : i, r = e ? e[0] : n.charAt(0), u = e ? cn(e, 1).join(\"\") : n.slice(1);\n                    return r[t]() + u;\n                };\n            }\n            function Mn(t) {\n                return function(n) {\n                    return Nr(ma(_a(n).replace(Ko, \"\")), t, \"\");\n                };\n            }\n            function le(t) {\n                return function() {\n                    var n = arguments;\n                    switch(n.length){\n                        case 0:\n                            return new t;\n                        case 1:\n                            return new t(n[0]);\n                        case 2:\n                            return new t(n[0], n[1]);\n                        case 3:\n                            return new t(n[0], n[1], n[2]);\n                        case 4:\n                            return new t(n[0], n[1], n[2], n[3]);\n                        case 5:\n                            return new t(n[0], n[1], n[2], n[3], n[4]);\n                        case 6:\n                            return new t(n[0], n[1], n[2], n[3], n[4], n[5]);\n                        case 7:\n                            return new t(n[0], n[1], n[2], n[3], n[4], n[5], n[6]);\n                    }\n                    var e = Fn(t.prototype), r = t.apply(e, n);\n                    return K(r) ? r : e;\n                };\n            }\n            function rh(t, n, e) {\n                var r = le(t);\n                function u() {\n                    for(var o = arguments.length, f = d(o), c = o, l = Bn(u); c--;)f[c] = arguments[c];\n                    var v = o < 3 && f[0] !== l && f[o - 1] !== l ? [] : sn(f, l);\n                    if (o -= v.length, o < e) return Eu(t, n, Ve, u.placeholder, i, f, v, i, i, e - o);\n                    var _ = this && this !== j && this instanceof u ? r : t;\n                    return ct(_, this, f);\n                }\n                return u;\n            }\n            function Cu(t) {\n                return function(n, e, r) {\n                    var u = M(n);\n                    if (!at(n)) {\n                        var o = E(e, 3);\n                        n = V(n), e = function(c) {\n                            return o(u[c], c, u);\n                        };\n                    }\n                    var f = t(n, e, r);\n                    return f > -1 ? u[o ? n[f] : f] : i;\n                };\n            }\n            function Au(t) {\n                return Zt(function(n) {\n                    var e = n.length, r = e, u = Pt.prototype.thru;\n                    for(t && n.reverse(); r--;){\n                        var o = n[r];\n                        if (typeof o != \"function\") throw new wt(O);\n                        if (u && !f && nr(o) == \"wrapper\") var f = new Pt([], !0);\n                    }\n                    for(r = f ? r : e; ++r < e;){\n                        o = n[r];\n                        var c = nr(o), l = c == \"wrapper\" ? gi(o) : i;\n                        l && wi(l[0]) && l[1] == (Bt | Dt | Nt | Yn) && !l[4].length && l[9] == 1 ? f = f[nr(l[0])].apply(f, l[3]) : f = o.length == 1 && wi(o) ? f[c]() : f.thru(o);\n                    }\n                    return function() {\n                        var v = arguments, _ = v[0];\n                        if (f && v.length == 1 && b(_)) return f.plant(_).value();\n                        for(var m = 0, C = e ? n[m].apply(this, v) : _; ++m < e;)C = n[m].call(this, C);\n                        return C;\n                    };\n                });\n            }\n            function Ve(t, n, e, r, u, o, f, c, l, v) {\n                var _ = n & Bt, m = n & vt, C = n & ln, I = n & (Dt | Sn), y = n & gr, L = C ? i : le(t);\n                function S() {\n                    for(var D = arguments.length, $ = d(D), dt = D; dt--;)$[dt] = arguments[dt];\n                    if (I) var st = Bn(S), gt = gf($, st);\n                    if (r && ($ = vu($, r, u, I)), o && ($ = _u($, o, f, I)), D -= gt, I && D < v) {\n                        var Z = sn($, st);\n                        return Eu(t, n, Ve, S.placeholder, e, $, Z, c, l, v - D);\n                    }\n                    var bt = m ? e : this, kt = C ? bt[t] : t;\n                    return D = $.length, c ? $ = Ih($, c) : y && D > 1 && $.reverse(), _ && l < D && ($.length = l), this && this !== j && this instanceof S && (kt = L || le(kt)), kt.apply(bt, $);\n                }\n                return S;\n            }\n            function Iu(t, n) {\n                return function(e, r) {\n                    return Tc(e, t, n(r), {});\n                };\n            }\n            function ke(t, n) {\n                return function(e, r) {\n                    var u;\n                    if (e === i && r === i) return n;\n                    if (e !== i && (u = e), r !== i) {\n                        if (u === i) return r;\n                        typeof e == \"string\" || typeof r == \"string\" ? (e = lt(e), r = lt(r)) : (e = ou(e), r = ou(r)), u = t(e, r);\n                    }\n                    return u;\n                };\n            }\n            function hi(t) {\n                return Zt(function(n) {\n                    return n = z(n, ht(E())), H(function(e) {\n                        var r = this;\n                        return t(n, function(u) {\n                            return ct(u, r, e);\n                        });\n                    });\n                });\n            }\n            function je(t, n) {\n                n = n === i ? \" \" : lt(n);\n                var e = n.length;\n                if (e < 2) return e ? ii(n, t) : n;\n                var r = ii(n, Fe(t / Dn(n)));\n                return Hn(n) ? cn(St(r), 0, t).join(\"\") : r.slice(0, t);\n            }\n            function ih(t, n, e, r) {\n                var u = n & vt, o = le(t);\n                function f() {\n                    for(var c = -1, l = arguments.length, v = -1, _ = r.length, m = d(_ + l), C = this && this !== j && this instanceof f ? o : t; ++v < _;)m[v] = r[v];\n                    for(; l--;)m[v++] = arguments[++c];\n                    return ct(C, u ? e : this, m);\n                }\n                return f;\n            }\n            function xu(t) {\n                return function(n, e, r) {\n                    return r && typeof r != \"number\" && it(n, e, r) && (e = r = i), n = Vt(n), e === i ? (e = n, n = 0) : e = Vt(e), r = r === i ? n < e ? 1 : -1 : Vt(r), Gc(n, e, r, t);\n                };\n            }\n            function tr(t) {\n                return function(n, e) {\n                    return typeof n == \"string\" && typeof e == \"string\" || (n = xt(n), e = xt(e)), t(n, e);\n                };\n            }\n            function Eu(t, n, e, r, u, o, f, c, l, v) {\n                var _ = n & Dt, m = _ ? f : i, C = _ ? i : f, I = _ ? o : i, y = _ ? i : o;\n                n |= _ ? Nt : On, n &= ~(_ ? On : Nt), n & Gi || (n &= ~(vt | ln));\n                var L = [\n                    t,\n                    n,\n                    u,\n                    I,\n                    m,\n                    y,\n                    C,\n                    c,\n                    l,\n                    v\n                ], S = e.apply(i, L);\n                return wi(t) && qu(S, L), S.placeholder = r, Uu(S, t, n);\n            }\n            function li(t) {\n                var n = X[t];\n                return function(e, r) {\n                    if (e = xt(e), r = r == null ? 0 : nt(T(r), 292), r && Us(e)) {\n                        var u = (U(e) + \"e\").split(\"e\"), o = n(u[0] + \"e\" + (+u[1] + r));\n                        return u = (U(o) + \"e\").split(\"e\"), +(u[0] + \"e\" + (+u[1] - r));\n                    }\n                    return n(e);\n                };\n            }\n            var sh = qn && 1 / Re(new qn([\n                ,\n                -0\n            ]))[1] == pn ? function(t) {\n                return new qn(t);\n            } : Di;\n            function yu(t) {\n                return function(n) {\n                    var e = et(n);\n                    return e == Et ? Br(n) : e == yt ? Af(n) : df(n, t(n));\n                };\n            }\n            function Yt(t, n, e, r, u, o, f, c) {\n                var l = n & ln;\n                if (!l && typeof t != \"function\") throw new wt(O);\n                var v = r ? r.length : 0;\n                if (v || (n &= ~(Nt | On), r = u = i), f = f === i ? f : Q(T(f), 0), c = c === i ? c : T(c), v -= u ? u.length : 0, n & On) {\n                    var _ = r, m = u;\n                    r = u = i;\n                }\n                var C = l ? i : gi(t), I = [\n                    t,\n                    n,\n                    e,\n                    r,\n                    u,\n                    _,\n                    m,\n                    o,\n                    f,\n                    c\n                ];\n                if (C && Ph(I, C), t = I[0], n = I[1], e = I[2], r = I[3], u = I[4], c = I[9] = I[9] === i ? l ? 0 : t.length : Q(I[9] - v, 0), !c && n & (Dt | Sn) && (n &= ~(Dt | Sn)), !n || n == vt) var y = eh(t, n, e);\n                else n == Dt || n == Sn ? y = rh(t, n, c) : (n == Nt || n == (vt | Nt)) && !u.length ? y = ih(t, n, e, r) : y = Ve.apply(i, I);\n                var L = C ? uu : qu;\n                return Uu(L(y, I), t, n);\n            }\n            function Su(t, n, e, r) {\n                return t === i || Rt(t, $n[e]) && !W.call(r, e) ? n : t;\n            }\n            function Ou(t, n, e, r, u, o) {\n                return K(t) && K(n) && (o.set(n, t), Ye(t, n, i, Ou, o), o.delete(n)), t;\n            }\n            function uh(t) {\n                return ge(t) ? i : t;\n            }\n            function Ru(t, n, e, r, u, o) {\n                var f = e & yn, c = t.length, l = n.length;\n                if (c != l && !(f && l > c)) return !1;\n                var v = o.get(t), _ = o.get(n);\n                if (v && _) return v == n && _ == t;\n                var m = -1, C = !0, I = e & me ? new _n : i;\n                for(o.set(t, n), o.set(n, t); ++m < c;){\n                    var y = t[m], L = n[m];\n                    if (r) var S = f ? r(L, y, m, n, t, o) : r(y, L, m, t, n, o);\n                    if (S !== i) {\n                        if (S) continue;\n                        C = !1;\n                        break;\n                    }\n                    if (I) {\n                        if (!$r(n, function(D, $) {\n                            if (!ne(I, $) && (y === D || u(y, D, e, r, o))) return I.push($);\n                        })) {\n                            C = !1;\n                            break;\n                        }\n                    } else if (!(y === L || u(y, L, e, r, o))) {\n                        C = !1;\n                        break;\n                    }\n                }\n                return o.delete(t), o.delete(n), C;\n            }\n            function ah(t, n, e, r, u, o, f) {\n                switch(e){\n                    case bn:\n                        if (t.byteLength != n.byteLength || t.byteOffset != n.byteOffset) return !1;\n                        t = t.buffer, n = n.buffer;\n                    case te:\n                        return !(t.byteLength != n.byteLength || !o(new Ne(t), new Ne(n)));\n                    case Zn:\n                    case Xn:\n                    case Qn:\n                        return Rt(+t, +n);\n                    case Ce:\n                        return t.name == n.name && t.message == n.message;\n                    case Vn:\n                    case kn:\n                        return t == n + \"\";\n                    case Et:\n                        var c = Br;\n                    case yt:\n                        var l = r & yn;\n                        if (c || (c = Re), t.size != n.size && !l) return !1;\n                        var v = f.get(t);\n                        if (v) return v == n;\n                        r |= me, f.set(t, n);\n                        var _ = Ru(c(t), c(n), r, u, o, f);\n                        return f.delete(t), _;\n                    case Ie:\n                        if (ue) return ue.call(t) == ue.call(n);\n                }\n                return !1;\n            }\n            function oh(t, n, e, r, u, o) {\n                var f = e & yn, c = pi(t), l = c.length, v = pi(n), _ = v.length;\n                if (l != _ && !f) return !1;\n                for(var m = l; m--;){\n                    var C = c[m];\n                    if (!(f ? C in n : W.call(n, C))) return !1;\n                }\n                var I = o.get(t), y = o.get(n);\n                if (I && y) return I == n && y == t;\n                var L = !0;\n                o.set(t, n), o.set(n, t);\n                for(var S = f; ++m < l;){\n                    C = c[m];\n                    var D = t[C], $ = n[C];\n                    if (r) var dt = f ? r($, D, C, n, t, o) : r(D, $, C, t, n, o);\n                    if (!(dt === i ? D === $ || u(D, $, e, r, o) : dt)) {\n                        L = !1;\n                        break;\n                    }\n                    S || (S = C == \"constructor\");\n                }\n                if (L && !S) {\n                    var st = t.constructor, gt = n.constructor;\n                    st != gt && \"constructor\" in t && \"constructor\" in n && !(typeof st == \"function\" && st instanceof st && typeof gt == \"function\" && gt instanceof gt) && (L = !1);\n                }\n                return o.delete(t), o.delete(n), L;\n            }\n            function Zt(t) {\n                return Ci(Nu(t, i, zu), t + \"\");\n            }\n            function pi(t) {\n                return Xs(t, V, _i);\n            }\n            function di(t) {\n                return Xs(t, ot, bu);\n            }\n            var gi = Me ? function(t) {\n                return Me.get(t);\n            } : Di;\n            function nr(t) {\n                for(var n = t.name + \"\", e = Un[n], r = W.call(Un, n) ? e.length : 0; r--;){\n                    var u = e[r], o = u.func;\n                    if (o == null || o == t) return u.name;\n                }\n                return n;\n            }\n            function Bn(t) {\n                var n = W.call(a, \"placeholder\") ? a : t;\n                return n.placeholder;\n            }\n            function E() {\n                var t = a.iteratee || Li;\n                return t = t === Li ? ks : t, arguments.length ? t(arguments[0], arguments[1]) : t;\n            }\n            function er(t, n) {\n                var e = t.__data__;\n                return vh(n) ? e[typeof n == \"string\" ? \"string\" : \"hash\"] : e.map;\n            }\n            function vi(t) {\n                for(var n = V(t), e = n.length; e--;){\n                    var r = n[e], u = t[r];\n                    n[e] = [\n                        r,\n                        u,\n                        Hu(u)\n                    ];\n                }\n                return n;\n            }\n            function Pn(t, n) {\n                var e = wf(t, n);\n                return Vs(e) ? e : i;\n            }\n            function fh(t) {\n                var n = W.call(t, gn), e = t[gn];\n                try {\n                    t[gn] = i;\n                    var r = !0;\n                } catch  {}\n                var u = He.call(t);\n                return r && (n ? t[gn] = e : delete t[gn]), u;\n            }\n            var _i = zr ? function(t) {\n                return t == null ? [] : (t = M(t), en(zr(t), function(n) {\n                    return $s.call(t, n);\n                }));\n            } : Ni, bu = zr ? function(t) {\n                for(var n = []; t;)rn(n, _i(t)), t = $e(t);\n                return n;\n            } : Ni, et = rt;\n            (Kr && et(new Kr(new ArrayBuffer(1))) != bn || re && et(new re) != Et || Jr && et(Jr.resolve()) != Ji || qn && et(new qn) != yt || ie && et(new ie) != jn) && (et = function(t) {\n                var n = rt(t), e = n == Gt ? t.constructor : i, r = e ? Cn(e) : \"\";\n                if (r) switch(r){\n                    case Kf:\n                        return bn;\n                    case Jf:\n                        return Et;\n                    case Yf:\n                        return Ji;\n                    case Zf:\n                        return yt;\n                    case Xf:\n                        return jn;\n                }\n                return n;\n            });\n            function ch(t, n, e) {\n                for(var r = -1, u = e.length; ++r < u;){\n                    var o = e[r], f = o.size;\n                    switch(o.type){\n                        case \"drop\":\n                            t += f;\n                            break;\n                        case \"dropRight\":\n                            n -= f;\n                            break;\n                        case \"take\":\n                            n = nt(n, t + f);\n                            break;\n                        case \"takeRight\":\n                            t = Q(t, n - f);\n                            break;\n                    }\n                }\n                return {\n                    start: t,\n                    end: n\n                };\n            }\n            function hh(t) {\n                var n = t.match(vo);\n                return n ? n[1].split(_o) : [];\n            }\n            function Tu(t, n, e) {\n                n = fn(n, t);\n                for(var r = -1, u = n.length, o = !1; ++r < u;){\n                    var f = Ft(n[r]);\n                    if (!(o = t != null && e(t, f))) break;\n                    t = t[f];\n                }\n                return o || ++r != u ? o : (u = t == null ? 0 : t.length, !!u && fr(u) && Xt(f, u) && (b(t) || An(t)));\n            }\n            function lh(t) {\n                var n = t.length, e = new t.constructor(n);\n                return n && typeof t[0] == \"string\" && W.call(t, \"index\") && (e.index = t.index, e.input = t.input), e;\n            }\n            function Lu(t) {\n                return typeof t.constructor == \"function\" && !pe(t) ? Fn($e(t)) : {};\n            }\n            function ph(t, n, e) {\n                var r = t.constructor;\n                switch(n){\n                    case te:\n                        return ci(t);\n                    case Zn:\n                    case Xn:\n                        return new r(+t);\n                    case bn:\n                        return Qc(t, e);\n                    case vr:\n                    case _r:\n                    case mr:\n                    case wr:\n                    case Pr:\n                    case Cr:\n                    case Ar:\n                    case Ir:\n                    case xr:\n                        return du(t, e);\n                    case Et:\n                        return new r;\n                    case Qn:\n                    case kn:\n                        return new r(t);\n                    case Vn:\n                        return Vc(t);\n                    case yt:\n                        return new r;\n                    case Ie:\n                        return kc(t);\n                }\n            }\n            function dh(t, n) {\n                var e = n.length;\n                if (!e) return t;\n                var r = e - 1;\n                return n[r] = (e > 1 ? \"& \" : \"\") + n[r], n = n.join(e > 2 ? \", \" : \" \"), t.replace(go, `{\n/* [wrapped with ` + n + `] */\n`);\n            }\n            function gh(t) {\n                return b(t) || An(t) || !!(qs && t && t[qs]);\n            }\n            function Xt(t, n) {\n                var e = typeof t;\n                return n = n ?? nn, !!n && (e == \"number\" || e != \"symbol\" && yo.test(t)) && t > -1 && t % 1 == 0 && t < n;\n            }\n            function it(t, n, e) {\n                if (!K(e)) return !1;\n                var r = typeof n;\n                return (r == \"number\" ? at(e) && Xt(n, e.length) : r == \"string\" && n in e) ? Rt(e[n], t) : !1;\n            }\n            function mi(t, n) {\n                if (b(t)) return !1;\n                var e = typeof t;\n                return e == \"number\" || e == \"symbol\" || e == \"boolean\" || t == null || pt(t) ? !0 : co.test(t) || !fo.test(t) || n != null && t in M(n);\n            }\n            function vh(t) {\n                var n = typeof t;\n                return n == \"string\" || n == \"number\" || n == \"symbol\" || n == \"boolean\" ? t !== \"__proto__\" : t === null;\n            }\n            function wi(t) {\n                var n = nr(t), e = a[n];\n                if (typeof e != \"function\" || !(n in N.prototype)) return !1;\n                if (t === e) return !0;\n                var r = gi(e);\n                return !!r && t === r[0];\n            }\n            function _h(t) {\n                return !!Hs && Hs in t;\n            }\n            var mh = Te ? Qt : $i;\n            function pe(t) {\n                var n = t && t.constructor, e = typeof n == \"function\" && n.prototype || $n;\n                return t === e;\n            }\n            function Hu(t) {\n                return t === t && !K(t);\n            }\n            function Du(t, n) {\n                return function(e) {\n                    return e == null ? !1 : e[t] === n && (n !== i || t in M(e));\n                };\n            }\n            function wh(t) {\n                var n = ar(t, function(r) {\n                    return e.size === Jn && e.clear(), r;\n                }), e = n.cache;\n                return n;\n            }\n            function Ph(t, n) {\n                var e = t[1], r = n[1], u = e | r, o = u < (vt | ln | Bt), f = r == Bt && e == Dt || r == Bt && e == Yn && t[7].length <= n[8] || r == (Bt | Yn) && n[7].length <= n[8] && e == Dt;\n                if (!(o || f)) return t;\n                r & vt && (t[2] = n[2], u |= e & vt ? 0 : Gi);\n                var c = n[3];\n                if (c) {\n                    var l = t[3];\n                    t[3] = l ? vu(l, c, n[4]) : c, t[4] = l ? sn(t[3], xn) : n[4];\n                }\n                return c = n[5], c && (l = t[5], t[5] = l ? _u(l, c, n[6]) : c, t[6] = l ? sn(t[5], xn) : n[6]), c = n[7], c && (t[7] = c), r & Bt && (t[8] = t[8] == null ? n[8] : nt(t[8], n[8])), t[9] == null && (t[9] = n[9]), t[0] = n[0], t[1] = u, t;\n            }\n            function Ch(t) {\n                var n = [];\n                if (t != null) for(var e in M(t))n.push(e);\n                return n;\n            }\n            function Ah(t) {\n                return He.call(t);\n            }\n            function Nu(t, n, e) {\n                return n = Q(n === i ? t.length - 1 : n, 0), function() {\n                    for(var r = arguments, u = -1, o = Q(r.length - n, 0), f = d(o); ++u < o;)f[u] = r[n + u];\n                    u = -1;\n                    for(var c = d(n + 1); ++u < n;)c[u] = r[u];\n                    return c[n] = e(f), ct(t, this, c);\n                };\n            }\n            function $u(t, n) {\n                return n.length < 2 ? t : wn(t, At(n, 0, -1));\n            }\n            function Ih(t, n) {\n                for(var e = t.length, r = nt(n.length, e), u = ut(t); r--;){\n                    var o = n[r];\n                    t[r] = Xt(o, e) ? u[o] : i;\n                }\n                return t;\n            }\n            function Pi(t, n) {\n                if (!(n === \"constructor\" && typeof t[n] == \"function\") && n != \"__proto__\") return t[n];\n            }\n            var qu = Fu(uu), de = Uf || function(t, n) {\n                return j.setTimeout(t, n);\n            }, Ci = Fu(Jc);\n            function Uu(t, n, e) {\n                var r = n + \"\";\n                return Ci(t, dh(r, xh(hh(r), e)));\n            }\n            function Fu(t) {\n                var n = 0, e = 0;\n                return function() {\n                    var r = Bf(), u = Ga - (r - e);\n                    if (e = r, u > 0) {\n                        if (++n >= Ba) return arguments[0];\n                    } else n = 0;\n                    return t.apply(i, arguments);\n                };\n            }\n            function rr(t, n) {\n                var e = -1, r = t.length, u = r - 1;\n                for(n = n === i ? r : n; ++e < n;){\n                    var o = ri(e, u), f = t[o];\n                    t[o] = t[e], t[e] = f;\n                }\n                return t.length = n, t;\n            }\n            var Wu = wh(function(t) {\n                var n = [];\n                return t.charCodeAt(0) === 46 && n.push(\"\"), t.replace(ho, function(e, r, u, o) {\n                    n.push(u ? o.replace(Po, \"$1\") : r || e);\n                }), n;\n            });\n            function Ft(t) {\n                if (typeof t == \"string\" || pt(t)) return t;\n                var n = t + \"\";\n                return n == \"0\" && 1 / t == -pn ? \"-0\" : n;\n            }\n            function Cn(t) {\n                if (t != null) {\n                    try {\n                        return Le.call(t);\n                    } catch  {}\n                    try {\n                        return t + \"\";\n                    } catch  {}\n                }\n                return \"\";\n            }\n            function xh(t, n) {\n                return mt(Xa, function(e) {\n                    var r = \"_.\" + e[0];\n                    n & e[1] && !Se(t, r) && t.push(r);\n                }), t.sort();\n            }\n            function Mu(t) {\n                if (t instanceof N) return t.clone();\n                var n = new Pt(t.__wrapped__, t.__chain__);\n                return n.__actions__ = ut(t.__actions__), n.__index__ = t.__index__, n.__values__ = t.__values__, n;\n            }\n            function Eh(t, n, e) {\n                (e ? it(t, n, e) : n === i) ? n = 1 : n = Q(T(n), 0);\n                var r = t == null ? 0 : t.length;\n                if (!r || n < 1) return [];\n                for(var u = 0, o = 0, f = d(Fe(r / n)); u < r;)f[o++] = At(t, u, u += n);\n                return f;\n            }\n            function yh(t) {\n                for(var n = -1, e = t == null ? 0 : t.length, r = 0, u = []; ++n < e;){\n                    var o = t[n];\n                    o && (u[r++] = o);\n                }\n                return u;\n            }\n            function Sh() {\n                var t = arguments.length;\n                if (!t) return [];\n                for(var n = d(t - 1), e = arguments[0], r = t; r--;)n[r - 1] = arguments[r];\n                return rn(b(e) ? ut(e) : [\n                    e\n                ], tt(n, 1));\n            }\n            var Oh = H(function(t, n) {\n                return Y(t) ? oe(t, tt(n, 1, Y, !0)) : [];\n            }), Rh = H(function(t, n) {\n                var e = It(n);\n                return Y(e) && (e = i), Y(t) ? oe(t, tt(n, 1, Y, !0), E(e, 2)) : [];\n            }), bh = H(function(t, n) {\n                var e = It(n);\n                return Y(e) && (e = i), Y(t) ? oe(t, tt(n, 1, Y, !0), i, e) : [];\n            });\n            function Th(t, n, e) {\n                var r = t == null ? 0 : t.length;\n                return r ? (n = e || n === i ? 1 : T(n), At(t, n < 0 ? 0 : n, r)) : [];\n            }\n            function Lh(t, n, e) {\n                var r = t == null ? 0 : t.length;\n                return r ? (n = e || n === i ? 1 : T(n), n = r - n, At(t, 0, n < 0 ? 0 : n)) : [];\n            }\n            function Hh(t, n) {\n                return t && t.length ? Xe(t, E(n, 3), !0, !0) : [];\n            }\n            function Dh(t, n) {\n                return t && t.length ? Xe(t, E(n, 3), !0) : [];\n            }\n            function Nh(t, n, e, r) {\n                var u = t == null ? 0 : t.length;\n                return u ? (e && typeof e != \"number\" && it(t, n, e) && (e = 0, r = u), Sc(t, n, e, r)) : [];\n            }\n            function Bu(t, n, e) {\n                var r = t == null ? 0 : t.length;\n                if (!r) return -1;\n                var u = e == null ? 0 : T(e);\n                return u < 0 && (u = Q(r + u, 0)), Oe(t, E(n, 3), u);\n            }\n            function Gu(t, n, e) {\n                var r = t == null ? 0 : t.length;\n                if (!r) return -1;\n                var u = r - 1;\n                return e !== i && (u = T(e), u = e < 0 ? Q(r + u, 0) : nt(u, r - 1)), Oe(t, E(n, 3), u, !0);\n            }\n            function zu(t) {\n                var n = t == null ? 0 : t.length;\n                return n ? tt(t, 1) : [];\n            }\n            function $h(t) {\n                var n = t == null ? 0 : t.length;\n                return n ? tt(t, pn) : [];\n            }\n            function qh(t, n) {\n                var e = t == null ? 0 : t.length;\n                return e ? (n = n === i ? 1 : T(n), tt(t, n)) : [];\n            }\n            function Uh(t) {\n                for(var n = -1, e = t == null ? 0 : t.length, r = {}; ++n < e;){\n                    var u = t[n];\n                    r[u[0]] = u[1];\n                }\n                return r;\n            }\n            function Ku(t) {\n                return t && t.length ? t[0] : i;\n            }\n            function Fh(t, n, e) {\n                var r = t == null ? 0 : t.length;\n                if (!r) return -1;\n                var u = e == null ? 0 : T(e);\n                return u < 0 && (u = Q(r + u, 0)), Ln(t, n, u);\n            }\n            function Wh(t) {\n                var n = t == null ? 0 : t.length;\n                return n ? At(t, 0, -1) : [];\n            }\n            var Mh = H(function(t) {\n                var n = z(t, oi);\n                return n.length && n[0] === t[0] ? kr(n) : [];\n            }), Bh = H(function(t) {\n                var n = It(t), e = z(t, oi);\n                return n === It(e) ? n = i : e.pop(), e.length && e[0] === t[0] ? kr(e, E(n, 2)) : [];\n            }), Gh = H(function(t) {\n                var n = It(t), e = z(t, oi);\n                return n = typeof n == \"function\" ? n : i, n && e.pop(), e.length && e[0] === t[0] ? kr(e, i, n) : [];\n            });\n            function zh(t, n) {\n                return t == null ? \"\" : Wf.call(t, n);\n            }\n            function It(t) {\n                var n = t == null ? 0 : t.length;\n                return n ? t[n - 1] : i;\n            }\n            function Kh(t, n, e) {\n                var r = t == null ? 0 : t.length;\n                if (!r) return -1;\n                var u = r;\n                return e !== i && (u = T(e), u = u < 0 ? Q(r + u, 0) : nt(u, r - 1)), n === n ? xf(t, n, u) : Oe(t, Es, u, !0);\n            }\n            function Jh(t, n) {\n                return t && t.length ? eu(t, T(n)) : i;\n            }\n            var Yh = H(Ju);\n            function Ju(t, n) {\n                return t && t.length && n && n.length ? ei(t, n) : t;\n            }\n            function Zh(t, n, e) {\n                return t && t.length && n && n.length ? ei(t, n, E(e, 2)) : t;\n            }\n            function Xh(t, n, e) {\n                return t && t.length && n && n.length ? ei(t, n, i, e) : t;\n            }\n            var Qh = Zt(function(t, n) {\n                var e = t == null ? 0 : t.length, r = Zr(t, n);\n                return su(t, z(n, function(u) {\n                    return Xt(u, e) ? +u : u;\n                }).sort(gu)), r;\n            });\n            function Vh(t, n) {\n                var e = [];\n                if (!(t && t.length)) return e;\n                var r = -1, u = [], o = t.length;\n                for(n = E(n, 3); ++r < o;){\n                    var f = t[r];\n                    n(f, r, t) && (e.push(f), u.push(r));\n                }\n                return su(t, u), e;\n            }\n            function Ai(t) {\n                return t == null ? t : zf.call(t);\n            }\n            function kh(t, n, e) {\n                var r = t == null ? 0 : t.length;\n                return r ? (e && typeof e != \"number\" && it(t, n, e) ? (n = 0, e = r) : (n = n == null ? 0 : T(n), e = e === i ? r : T(e)), At(t, n, e)) : [];\n            }\n            function jh(t, n) {\n                return Ze(t, n);\n            }\n            function tl(t, n, e) {\n                return si(t, n, E(e, 2));\n            }\n            function nl(t, n) {\n                var e = t == null ? 0 : t.length;\n                if (e) {\n                    var r = Ze(t, n);\n                    if (r < e && Rt(t[r], n)) return r;\n                }\n                return -1;\n            }\n            function el(t, n) {\n                return Ze(t, n, !0);\n            }\n            function rl(t, n, e) {\n                return si(t, n, E(e, 2), !0);\n            }\n            function il(t, n) {\n                var e = t == null ? 0 : t.length;\n                if (e) {\n                    var r = Ze(t, n, !0) - 1;\n                    if (Rt(t[r], n)) return r;\n                }\n                return -1;\n            }\n            function sl(t) {\n                return t && t.length ? au(t) : [];\n            }\n            function ul(t, n) {\n                return t && t.length ? au(t, E(n, 2)) : [];\n            }\n            function al(t) {\n                var n = t == null ? 0 : t.length;\n                return n ? At(t, 1, n) : [];\n            }\n            function ol(t, n, e) {\n                return t && t.length ? (n = e || n === i ? 1 : T(n), At(t, 0, n < 0 ? 0 : n)) : [];\n            }\n            function fl(t, n, e) {\n                var r = t == null ? 0 : t.length;\n                return r ? (n = e || n === i ? 1 : T(n), n = r - n, At(t, n < 0 ? 0 : n, r)) : [];\n            }\n            function cl(t, n) {\n                return t && t.length ? Xe(t, E(n, 3), !1, !0) : [];\n            }\n            function hl(t, n) {\n                return t && t.length ? Xe(t, E(n, 3)) : [];\n            }\n            var ll = H(function(t) {\n                return on(tt(t, 1, Y, !0));\n            }), pl = H(function(t) {\n                var n = It(t);\n                return Y(n) && (n = i), on(tt(t, 1, Y, !0), E(n, 2));\n            }), dl = H(function(t) {\n                var n = It(t);\n                return n = typeof n == \"function\" ? n : i, on(tt(t, 1, Y, !0), i, n);\n            });\n            function gl(t) {\n                return t && t.length ? on(t) : [];\n            }\n            function vl(t, n) {\n                return t && t.length ? on(t, E(n, 2)) : [];\n            }\n            function _l(t, n) {\n                return n = typeof n == \"function\" ? n : i, t && t.length ? on(t, i, n) : [];\n            }\n            function Ii(t) {\n                if (!(t && t.length)) return [];\n                var n = 0;\n                return t = en(t, function(e) {\n                    if (Y(e)) return n = Q(e.length, n), !0;\n                }), Wr(n, function(e) {\n                    return z(t, qr(e));\n                });\n            }\n            function Yu(t, n) {\n                if (!(t && t.length)) return [];\n                var e = Ii(t);\n                return n == null ? e : z(e, function(r) {\n                    return ct(n, i, r);\n                });\n            }\n            var ml = H(function(t, n) {\n                return Y(t) ? oe(t, n) : [];\n            }), wl = H(function(t) {\n                return ai(en(t, Y));\n            }), Pl = H(function(t) {\n                var n = It(t);\n                return Y(n) && (n = i), ai(en(t, Y), E(n, 2));\n            }), Cl = H(function(t) {\n                var n = It(t);\n                return n = typeof n == \"function\" ? n : i, ai(en(t, Y), i, n);\n            }), Al = H(Ii);\n            function Il(t, n) {\n                return hu(t || [], n || [], ae);\n            }\n            function xl(t, n) {\n                return hu(t || [], n || [], he);\n            }\n            var El = H(function(t) {\n                var n = t.length, e = n > 1 ? t[n - 1] : i;\n                return e = typeof e == \"function\" ? (t.pop(), e) : i, Yu(t, e);\n            });\n            function Zu(t) {\n                var n = a(t);\n                return n.__chain__ = !0, n;\n            }\n            function yl(t, n) {\n                return n(t), t;\n            }\n            function ir(t, n) {\n                return n(t);\n            }\n            var Sl = Zt(function(t) {\n                var n = t.length, e = n ? t[0] : 0, r = this.__wrapped__, u = function(o) {\n                    return Zr(o, t);\n                };\n                return n > 1 || this.__actions__.length || !(r instanceof N) || !Xt(e) ? this.thru(u) : (r = r.slice(e, +e + (n ? 1 : 0)), r.__actions__.push({\n                    func: ir,\n                    args: [\n                        u\n                    ],\n                    thisArg: i\n                }), new Pt(r, this.__chain__).thru(function(o) {\n                    return n && !o.length && o.push(i), o;\n                }));\n            });\n            function Ol() {\n                return Zu(this);\n            }\n            function Rl() {\n                return new Pt(this.value(), this.__chain__);\n            }\n            function bl() {\n                this.__values__ === i && (this.__values__ = oa(this.value()));\n                var t = this.__index__ >= this.__values__.length, n = t ? i : this.__values__[this.__index__++];\n                return {\n                    done: t,\n                    value: n\n                };\n            }\n            function Tl() {\n                return this;\n            }\n            function Ll(t) {\n                for(var n, e = this; e instanceof Ge;){\n                    var r = Mu(e);\n                    r.__index__ = 0, r.__values__ = i, n ? u.__wrapped__ = r : n = r;\n                    var u = r;\n                    e = e.__wrapped__;\n                }\n                return u.__wrapped__ = t, n;\n            }\n            function Hl() {\n                var t = this.__wrapped__;\n                if (t instanceof N) {\n                    var n = t;\n                    return this.__actions__.length && (n = new N(this)), n = n.reverse(), n.__actions__.push({\n                        func: ir,\n                        args: [\n                            Ai\n                        ],\n                        thisArg: i\n                    }), new Pt(n, this.__chain__);\n                }\n                return this.thru(Ai);\n            }\n            function Dl() {\n                return cu(this.__wrapped__, this.__actions__);\n            }\n            var Nl = Qe(function(t, n, e) {\n                W.call(t, e) ? ++t[e] : Jt(t, e, 1);\n            });\n            function $l(t, n, e) {\n                var r = b(t) ? Is : yc;\n                return e && it(t, n, e) && (n = i), r(t, E(n, 3));\n            }\n            function ql(t, n) {\n                var e = b(t) ? en : Ys;\n                return e(t, E(n, 3));\n            }\n            var Ul = Cu(Bu), Fl = Cu(Gu);\n            function Wl(t, n) {\n                return tt(sr(t, n), 1);\n            }\n            function Ml(t, n) {\n                return tt(sr(t, n), pn);\n            }\n            function Bl(t, n, e) {\n                return e = e === i ? 1 : T(e), tt(sr(t, n), e);\n            }\n            function Xu(t, n) {\n                var e = b(t) ? mt : an;\n                return e(t, E(n, 3));\n            }\n            function Qu(t, n) {\n                var e = b(t) ? af : Js;\n                return e(t, E(n, 3));\n            }\n            var Gl = Qe(function(t, n, e) {\n                W.call(t, e) ? t[e].push(n) : Jt(t, e, [\n                    n\n                ]);\n            });\n            function zl(t, n, e, r) {\n                t = at(t) ? t : zn(t), e = e && !r ? T(e) : 0;\n                var u = t.length;\n                return e < 0 && (e = Q(u + e, 0)), cr(t) ? e <= u && t.indexOf(n, e) > -1 : !!u && Ln(t, n, e) > -1;\n            }\n            var Kl = H(function(t, n, e) {\n                var r = -1, u = typeof n == \"function\", o = at(t) ? d(t.length) : [];\n                return an(t, function(f) {\n                    o[++r] = u ? ct(n, f, e) : fe(f, n, e);\n                }), o;\n            }), Jl = Qe(function(t, n, e) {\n                Jt(t, e, n);\n            });\n            function sr(t, n) {\n                var e = b(t) ? z : js;\n                return e(t, E(n, 3));\n            }\n            function Yl(t, n, e, r) {\n                return t == null ? [] : (b(n) || (n = n == null ? [] : [\n                    n\n                ]), e = r ? i : e, b(e) || (e = e == null ? [] : [\n                    e\n                ]), ru(t, n, e));\n            }\n            var Zl = Qe(function(t, n, e) {\n                t[e ? 0 : 1].push(n);\n            }, function() {\n                return [\n                    [],\n                    []\n                ];\n            });\n            function Xl(t, n, e) {\n                var r = b(t) ? Nr : Ss, u = arguments.length < 3;\n                return r(t, E(n, 4), e, u, an);\n            }\n            function Ql(t, n, e) {\n                var r = b(t) ? of : Ss, u = arguments.length < 3;\n                return r(t, E(n, 4), e, u, Js);\n            }\n            function Vl(t, n) {\n                var e = b(t) ? en : Ys;\n                return e(t, or(E(n, 3)));\n            }\n            function kl(t) {\n                var n = b(t) ? Bs : zc;\n                return n(t);\n            }\n            function jl(t, n, e) {\n                (e ? it(t, n, e) : n === i) ? n = 1 : n = T(n);\n                var r = b(t) ? Cc : Kc;\n                return r(t, n);\n            }\n            function tp(t) {\n                var n = b(t) ? Ac : Yc;\n                return n(t);\n            }\n            function np(t) {\n                if (t == null) return 0;\n                if (at(t)) return cr(t) ? Dn(t) : t.length;\n                var n = et(t);\n                return n == Et || n == yt ? t.size : ti(t).length;\n            }\n            function ep(t, n, e) {\n                var r = b(t) ? $r : Zc;\n                return e && it(t, n, e) && (n = i), r(t, E(n, 3));\n            }\n            var rp = H(function(t, n) {\n                if (t == null) return [];\n                var e = n.length;\n                return e > 1 && it(t, n[0], n[1]) ? n = [] : e > 2 && it(n[0], n[1], n[2]) && (n = [\n                    n[0]\n                ]), ru(t, tt(n, 1), []);\n            }), ur = qf || function() {\n                return j.Date.now();\n            };\n            function ip(t, n) {\n                if (typeof n != \"function\") throw new wt(O);\n                return t = T(t), function() {\n                    if (--t < 1) return n.apply(this, arguments);\n                };\n            }\n            function Vu(t, n, e) {\n                return n = e ? i : n, n = t && n == null ? t.length : n, Yt(t, Bt, i, i, i, i, n);\n            }\n            function ku(t, n) {\n                var e;\n                if (typeof n != \"function\") throw new wt(O);\n                return t = T(t), function() {\n                    return --t > 0 && (e = n.apply(this, arguments)), t <= 1 && (n = i), e;\n                };\n            }\n            var xi = H(function(t, n, e) {\n                var r = vt;\n                if (e.length) {\n                    var u = sn(e, Bn(xi));\n                    r |= Nt;\n                }\n                return Yt(t, r, n, e, u);\n            }), ju = H(function(t, n, e) {\n                var r = vt | ln;\n                if (e.length) {\n                    var u = sn(e, Bn(ju));\n                    r |= Nt;\n                }\n                return Yt(n, r, t, e, u);\n            });\n            function ta(t, n, e) {\n                n = e ? i : n;\n                var r = Yt(t, Dt, i, i, i, i, i, n);\n                return r.placeholder = ta.placeholder, r;\n            }\n            function na(t, n, e) {\n                n = e ? i : n;\n                var r = Yt(t, Sn, i, i, i, i, i, n);\n                return r.placeholder = na.placeholder, r;\n            }\n            function ea(t, n, e) {\n                var r, u, o, f, c, l, v = 0, _ = !1, m = !1, C = !0;\n                if (typeof t != \"function\") throw new wt(O);\n                n = xt(n) || 0, K(e) && (_ = !!e.leading, m = \"maxWait\" in e, o = m ? Q(xt(e.maxWait) || 0, n) : o, C = \"trailing\" in e ? !!e.trailing : C);\n                function I(Z) {\n                    var bt = r, kt = u;\n                    return r = u = i, v = Z, f = t.apply(kt, bt), f;\n                }\n                function y(Z) {\n                    return v = Z, c = de(D, n), _ ? I(Z) : f;\n                }\n                function L(Z) {\n                    var bt = Z - l, kt = Z - v, Ca = n - bt;\n                    return m ? nt(Ca, o - kt) : Ca;\n                }\n                function S(Z) {\n                    var bt = Z - l, kt = Z - v;\n                    return l === i || bt >= n || bt < 0 || m && kt >= o;\n                }\n                function D() {\n                    var Z = ur();\n                    if (S(Z)) return $(Z);\n                    c = de(D, L(Z));\n                }\n                function $(Z) {\n                    return c = i, C && r ? I(Z) : (r = u = i, f);\n                }\n                function dt() {\n                    c !== i && lu(c), v = 0, r = l = u = c = i;\n                }\n                function st() {\n                    return c === i ? f : $(ur());\n                }\n                function gt() {\n                    var Z = ur(), bt = S(Z);\n                    if (r = arguments, u = this, l = Z, bt) {\n                        if (c === i) return y(l);\n                        if (m) return lu(c), c = de(D, n), I(l);\n                    }\n                    return c === i && (c = de(D, n)), f;\n                }\n                return gt.cancel = dt, gt.flush = st, gt;\n            }\n            var sp = H(function(t, n) {\n                return Ks(t, 1, n);\n            }), up = H(function(t, n, e) {\n                return Ks(t, xt(n) || 0, e);\n            });\n            function ap(t) {\n                return Yt(t, gr);\n            }\n            function ar(t, n) {\n                if (typeof t != \"function\" || n != null && typeof n != \"function\") throw new wt(O);\n                var e = function() {\n                    var r = arguments, u = n ? n.apply(this, r) : r[0], o = e.cache;\n                    if (o.has(u)) return o.get(u);\n                    var f = t.apply(this, r);\n                    return e.cache = o.set(u, f) || o, f;\n                };\n                return e.cache = new (ar.Cache || Kt), e;\n            }\n            ar.Cache = Kt;\n            function or(t) {\n                if (typeof t != \"function\") throw new wt(O);\n                return function() {\n                    var n = arguments;\n                    switch(n.length){\n                        case 0:\n                            return !t.call(this);\n                        case 1:\n                            return !t.call(this, n[0]);\n                        case 2:\n                            return !t.call(this, n[0], n[1]);\n                        case 3:\n                            return !t.call(this, n[0], n[1], n[2]);\n                    }\n                    return !t.apply(this, n);\n                };\n            }\n            function op(t) {\n                return ku(2, t);\n            }\n            var fp = Xc(function(t, n) {\n                n = n.length == 1 && b(n[0]) ? z(n[0], ht(E())) : z(tt(n, 1), ht(E()));\n                var e = n.length;\n                return H(function(r) {\n                    for(var u = -1, o = nt(r.length, e); ++u < o;)r[u] = n[u].call(this, r[u]);\n                    return ct(t, this, r);\n                });\n            }), Ei = H(function(t, n) {\n                var e = sn(n, Bn(Ei));\n                return Yt(t, Nt, i, n, e);\n            }), ra = H(function(t, n) {\n                var e = sn(n, Bn(ra));\n                return Yt(t, On, i, n, e);\n            }), cp = Zt(function(t, n) {\n                return Yt(t, Yn, i, i, i, n);\n            });\n            function hp(t, n) {\n                if (typeof t != \"function\") throw new wt(O);\n                return n = n === i ? n : T(n), H(t, n);\n            }\n            function lp(t, n) {\n                if (typeof t != \"function\") throw new wt(O);\n                return n = n == null ? 0 : Q(T(n), 0), H(function(e) {\n                    var r = e[n], u = cn(e, 0, n);\n                    return r && rn(u, r), ct(t, this, u);\n                });\n            }\n            function pp(t, n, e) {\n                var r = !0, u = !0;\n                if (typeof t != \"function\") throw new wt(O);\n                return K(e) && (r = \"leading\" in e ? !!e.leading : r, u = \"trailing\" in e ? !!e.trailing : u), ea(t, n, {\n                    leading: r,\n                    maxWait: n,\n                    trailing: u\n                });\n            }\n            function dp(t) {\n                return Vu(t, 1);\n            }\n            function gp(t, n) {\n                return Ei(fi(n), t);\n            }\n            function vp() {\n                if (!arguments.length) return [];\n                var t = arguments[0];\n                return b(t) ? t : [\n                    t\n                ];\n            }\n            function _p(t) {\n                return Ct(t, En);\n            }\n            function mp(t, n) {\n                return n = typeof n == \"function\" ? n : i, Ct(t, En, n);\n            }\n            function wp(t) {\n                return Ct(t, Ht | En);\n            }\n            function Pp(t, n) {\n                return n = typeof n == \"function\" ? n : i, Ct(t, Ht | En, n);\n            }\n            function Cp(t, n) {\n                return n == null || zs(t, n, V(n));\n            }\n            function Rt(t, n) {\n                return t === n || t !== t && n !== n;\n            }\n            var Ap = tr(Vr), Ip = tr(function(t, n) {\n                return t >= n;\n            }), An = Qs(function() {\n                return arguments;\n            }()) ? Qs : function(t) {\n                return J(t) && W.call(t, \"callee\") && !$s.call(t, \"callee\");\n            }, b = d.isArray, xp = _s ? ht(_s) : Lc;\n            function at(t) {\n                return t != null && fr(t.length) && !Qt(t);\n            }\n            function Y(t) {\n                return J(t) && at(t);\n            }\n            function Ep(t) {\n                return t === !0 || t === !1 || J(t) && rt(t) == Zn;\n            }\n            var hn = Ff || $i, yp = ms ? ht(ms) : Hc;\n            function Sp(t) {\n                return J(t) && t.nodeType === 1 && !ge(t);\n            }\n            function Op(t) {\n                if (t == null) return !0;\n                if (at(t) && (b(t) || typeof t == \"string\" || typeof t.splice == \"function\" || hn(t) || Gn(t) || An(t))) return !t.length;\n                var n = et(t);\n                if (n == Et || n == yt) return !t.size;\n                if (pe(t)) return !ti(t).length;\n                for(var e in t)if (W.call(t, e)) return !1;\n                return !0;\n            }\n            function Rp(t, n) {\n                return ce(t, n);\n            }\n            function bp(t, n, e) {\n                e = typeof e == \"function\" ? e : i;\n                var r = e ? e(t, n) : i;\n                return r === i ? ce(t, n, i, e) : !!r;\n            }\n            function yi(t) {\n                if (!J(t)) return !1;\n                var n = rt(t);\n                return n == Ce || n == Va || typeof t.message == \"string\" && typeof t.name == \"string\" && !ge(t);\n            }\n            function Tp(t) {\n                return typeof t == \"number\" && Us(t);\n            }\n            function Qt(t) {\n                if (!K(t)) return !1;\n                var n = rt(t);\n                return n == Ae || n == Ki || n == Qa || n == ja;\n            }\n            function ia(t) {\n                return typeof t == \"number\" && t == T(t);\n            }\n            function fr(t) {\n                return typeof t == \"number\" && t > -1 && t % 1 == 0 && t <= nn;\n            }\n            function K(t) {\n                var n = typeof t;\n                return t != null && (n == \"object\" || n == \"function\");\n            }\n            function J(t) {\n                return t != null && typeof t == \"object\";\n            }\n            var sa = ws ? ht(ws) : Nc;\n            function Lp(t, n) {\n                return t === n || jr(t, n, vi(n));\n            }\n            function Hp(t, n, e) {\n                return e = typeof e == \"function\" ? e : i, jr(t, n, vi(n), e);\n            }\n            function Dp(t) {\n                return ua(t) && t != +t;\n            }\n            function Np(t) {\n                if (mh(t)) throw new R(x);\n                return Vs(t);\n            }\n            function $p(t) {\n                return t === null;\n            }\n            function qp(t) {\n                return t == null;\n            }\n            function ua(t) {\n                return typeof t == \"number\" || J(t) && rt(t) == Qn;\n            }\n            function ge(t) {\n                if (!J(t) || rt(t) != Gt) return !1;\n                var n = $e(t);\n                if (n === null) return !0;\n                var e = W.call(n, \"constructor\") && n.constructor;\n                return typeof e == \"function\" && e instanceof e && Le.call(e) == Hf;\n            }\n            var Si = Ps ? ht(Ps) : $c;\n            function Up(t) {\n                return ia(t) && t >= -nn && t <= nn;\n            }\n            var aa = Cs ? ht(Cs) : qc;\n            function cr(t) {\n                return typeof t == \"string\" || !b(t) && J(t) && rt(t) == kn;\n            }\n            function pt(t) {\n                return typeof t == \"symbol\" || J(t) && rt(t) == Ie;\n            }\n            var Gn = As ? ht(As) : Uc;\n            function Fp(t) {\n                return t === i;\n            }\n            function Wp(t) {\n                return J(t) && et(t) == jn;\n            }\n            function Mp(t) {\n                return J(t) && rt(t) == no;\n            }\n            var Bp = tr(ni), Gp = tr(function(t, n) {\n                return t <= n;\n            });\n            function oa(t) {\n                if (!t) return [];\n                if (at(t)) return cr(t) ? St(t) : ut(t);\n                if (ee && t[ee]) return Cf(t[ee]());\n                var n = et(t), e = n == Et ? Br : n == yt ? Re : zn;\n                return e(t);\n            }\n            function Vt(t) {\n                if (!t) return t === 0 ? t : 0;\n                if (t = xt(t), t === pn || t === -pn) {\n                    var n = t < 0 ? -1 : 1;\n                    return n * Ja;\n                }\n                return t === t ? t : 0;\n            }\n            function T(t) {\n                var n = Vt(t), e = n % 1;\n                return n === n ? e ? n - e : n : 0;\n            }\n            function fa(t) {\n                return t ? mn(T(t), 0, $t) : 0;\n            }\n            function xt(t) {\n                if (typeof t == \"number\") return t;\n                if (pt(t)) return we;\n                if (K(t)) {\n                    var n = typeof t.valueOf == \"function\" ? t.valueOf() : t;\n                    t = K(n) ? n + \"\" : n;\n                }\n                if (typeof t != \"string\") return t === 0 ? t : +t;\n                t = Os(t);\n                var e = Io.test(t);\n                return e || Eo.test(t) ? rf(t.slice(2), e ? 2 : 8) : Ao.test(t) ? we : +t;\n            }\n            function ca(t) {\n                return Ut(t, ot(t));\n            }\n            function zp(t) {\n                return t ? mn(T(t), -nn, nn) : t === 0 ? t : 0;\n            }\n            function U(t) {\n                return t == null ? \"\" : lt(t);\n            }\n            var Kp = Wn(function(t, n) {\n                if (pe(n) || at(n)) {\n                    Ut(n, V(n), t);\n                    return;\n                }\n                for(var e in n)W.call(n, e) && ae(t, e, n[e]);\n            }), ha = Wn(function(t, n) {\n                Ut(n, ot(n), t);\n            }), hr = Wn(function(t, n, e, r) {\n                Ut(n, ot(n), t, r);\n            }), Jp = Wn(function(t, n, e, r) {\n                Ut(n, V(n), t, r);\n            }), Yp = Zt(Zr);\n            function Zp(t, n) {\n                var e = Fn(t);\n                return n == null ? e : Gs(e, n);\n            }\n            var Xp = H(function(t, n) {\n                t = M(t);\n                var e = -1, r = n.length, u = r > 2 ? n[2] : i;\n                for(u && it(n[0], n[1], u) && (r = 1); ++e < r;)for(var o = n[e], f = ot(o), c = -1, l = f.length; ++c < l;){\n                    var v = f[c], _ = t[v];\n                    (_ === i || Rt(_, $n[v]) && !W.call(t, v)) && (t[v] = o[v]);\n                }\n                return t;\n            }), Qp = H(function(t) {\n                return t.push(i, Ou), ct(la, i, t);\n            });\n            function Vp(t, n) {\n                return xs(t, E(n, 3), qt);\n            }\n            function kp(t, n) {\n                return xs(t, E(n, 3), Qr);\n            }\n            function jp(t, n) {\n                return t == null ? t : Xr(t, E(n, 3), ot);\n            }\n            function td(t, n) {\n                return t == null ? t : Zs(t, E(n, 3), ot);\n            }\n            function nd(t, n) {\n                return t && qt(t, E(n, 3));\n            }\n            function ed(t, n) {\n                return t && Qr(t, E(n, 3));\n            }\n            function rd(t) {\n                return t == null ? [] : Je(t, V(t));\n            }\n            function id(t) {\n                return t == null ? [] : Je(t, ot(t));\n            }\n            function Oi(t, n, e) {\n                var r = t == null ? i : wn(t, n);\n                return r === i ? e : r;\n            }\n            function sd(t, n) {\n                return t != null && Tu(t, n, Oc);\n            }\n            function Ri(t, n) {\n                return t != null && Tu(t, n, Rc);\n            }\n            var ud = Iu(function(t, n, e) {\n                n != null && typeof n.toString != \"function\" && (n = He.call(n)), t[n] = e;\n            }, Ti(ft)), ad = Iu(function(t, n, e) {\n                n != null && typeof n.toString != \"function\" && (n = He.call(n)), W.call(t, n) ? t[n].push(e) : t[n] = [\n                    e\n                ];\n            }, E), od = H(fe);\n            function V(t) {\n                return at(t) ? Ms(t) : ti(t);\n            }\n            function ot(t) {\n                return at(t) ? Ms(t, !0) : Fc(t);\n            }\n            function fd(t, n) {\n                var e = {};\n                return n = E(n, 3), qt(t, function(r, u, o) {\n                    Jt(e, n(r, u, o), r);\n                }), e;\n            }\n            function cd(t, n) {\n                var e = {};\n                return n = E(n, 3), qt(t, function(r, u, o) {\n                    Jt(e, u, n(r, u, o));\n                }), e;\n            }\n            var hd = Wn(function(t, n, e) {\n                Ye(t, n, e);\n            }), la = Wn(function(t, n, e, r) {\n                Ye(t, n, e, r);\n            }), ld = Zt(function(t, n) {\n                var e = {};\n                if (t == null) return e;\n                var r = !1;\n                n = z(n, function(o) {\n                    return o = fn(o, t), r || (r = o.length > 1), o;\n                }), Ut(t, di(t), e), r && (e = Ct(e, Ht | Mt | En, uh));\n                for(var u = n.length; u--;)ui(e, n[u]);\n                return e;\n            });\n            function pd(t, n) {\n                return pa(t, or(E(n)));\n            }\n            var dd = Zt(function(t, n) {\n                return t == null ? {} : Mc(t, n);\n            });\n            function pa(t, n) {\n                if (t == null) return {};\n                var e = z(di(t), function(r) {\n                    return [\n                        r\n                    ];\n                });\n                return n = E(n), iu(t, e, function(r, u) {\n                    return n(r, u[0]);\n                });\n            }\n            function gd(t, n, e) {\n                n = fn(n, t);\n                var r = -1, u = n.length;\n                for(u || (u = 1, t = i); ++r < u;){\n                    var o = t == null ? i : t[Ft(n[r])];\n                    o === i && (r = u, o = e), t = Qt(o) ? o.call(t) : o;\n                }\n                return t;\n            }\n            function vd(t, n, e) {\n                return t == null ? t : he(t, n, e);\n            }\n            function _d(t, n, e, r) {\n                return r = typeof r == \"function\" ? r : i, t == null ? t : he(t, n, e, r);\n            }\n            var da = yu(V), ga = yu(ot);\n            function md(t, n, e) {\n                var r = b(t), u = r || hn(t) || Gn(t);\n                if (n = E(n, 4), e == null) {\n                    var o = t && t.constructor;\n                    u ? e = r ? new o : [] : K(t) ? e = Qt(o) ? Fn($e(t)) : {} : e = {};\n                }\n                return (u ? mt : qt)(t, function(f, c, l) {\n                    return n(e, f, c, l);\n                }), e;\n            }\n            function wd(t, n) {\n                return t == null ? !0 : ui(t, n);\n            }\n            function Pd(t, n, e) {\n                return t == null ? t : fu(t, n, fi(e));\n            }\n            function Cd(t, n, e, r) {\n                return r = typeof r == \"function\" ? r : i, t == null ? t : fu(t, n, fi(e), r);\n            }\n            function zn(t) {\n                return t == null ? [] : Mr(t, V(t));\n            }\n            function Ad(t) {\n                return t == null ? [] : Mr(t, ot(t));\n            }\n            function Id(t, n, e) {\n                return e === i && (e = n, n = i), e !== i && (e = xt(e), e = e === e ? e : 0), n !== i && (n = xt(n), n = n === n ? n : 0), mn(xt(t), n, e);\n            }\n            function xd(t, n, e) {\n                return n = Vt(n), e === i ? (e = n, n = 0) : e = Vt(e), t = xt(t), bc(t, n, e);\n            }\n            function Ed(t, n, e) {\n                if (e && typeof e != \"boolean\" && it(t, n, e) && (n = e = i), e === i && (typeof n == \"boolean\" ? (e = n, n = i) : typeof t == \"boolean\" && (e = t, t = i)), t === i && n === i ? (t = 0, n = 1) : (t = Vt(t), n === i ? (n = t, t = 0) : n = Vt(n)), t > n) {\n                    var r = t;\n                    t = n, n = r;\n                }\n                if (e || t % 1 || n % 1) {\n                    var u = Fs();\n                    return nt(t + u * (n - t + ef(\"1e-\" + ((u + \"\").length - 1))), n);\n                }\n                return ri(t, n);\n            }\n            var yd = Mn(function(t, n, e) {\n                return n = n.toLowerCase(), t + (e ? va(n) : n);\n            });\n            function va(t) {\n                return bi(U(t).toLowerCase());\n            }\n            function _a(t) {\n                return t = U(t), t && t.replace(So, vf).replace(Jo, \"\");\n            }\n            function Sd(t, n, e) {\n                t = U(t), n = lt(n);\n                var r = t.length;\n                e = e === i ? r : mn(T(e), 0, r);\n                var u = e;\n                return e -= n.length, e >= 0 && t.slice(e, u) == n;\n            }\n            function Od(t) {\n                return t = U(t), t && uo.test(t) ? t.replace(Zi, _f) : t;\n            }\n            function Rd(t) {\n                return t = U(t), t && lo.test(t) ? t.replace(Er, \"\\\\$&\") : t;\n            }\n            var bd = Mn(function(t, n, e) {\n                return t + (e ? \"-\" : \"\") + n.toLowerCase();\n            }), Td = Mn(function(t, n, e) {\n                return t + (e ? \" \" : \"\") + n.toLowerCase();\n            }), Ld = Pu(\"toLowerCase\");\n            function Hd(t, n, e) {\n                t = U(t), n = T(n);\n                var r = n ? Dn(t) : 0;\n                if (!n || r >= n) return t;\n                var u = (n - r) / 2;\n                return je(We(u), e) + t + je(Fe(u), e);\n            }\n            function Dd(t, n, e) {\n                t = U(t), n = T(n);\n                var r = n ? Dn(t) : 0;\n                return n && r < n ? t + je(n - r, e) : t;\n            }\n            function Nd(t, n, e) {\n                t = U(t), n = T(n);\n                var r = n ? Dn(t) : 0;\n                return n && r < n ? je(n - r, e) + t : t;\n            }\n            function $d(t, n, e) {\n                return e || n == null ? n = 0 : n && (n = +n), Gf(U(t).replace(yr, \"\"), n || 0);\n            }\n            function qd(t, n, e) {\n                return (e ? it(t, n, e) : n === i) ? n = 1 : n = T(n), ii(U(t), n);\n            }\n            function Ud() {\n                var t = arguments, n = U(t[0]);\n                return t.length < 3 ? n : n.replace(t[1], t[2]);\n            }\n            var Fd = Mn(function(t, n, e) {\n                return t + (e ? \"_\" : \"\") + n.toLowerCase();\n            });\n            function Wd(t, n, e) {\n                return e && typeof e != \"number\" && it(t, n, e) && (n = e = i), e = e === i ? $t : e >>> 0, e ? (t = U(t), t && (typeof n == \"string\" || n != null && !Si(n)) && (n = lt(n), !n && Hn(t)) ? cn(St(t), 0, e) : t.split(n, e)) : [];\n            }\n            var Md = Mn(function(t, n, e) {\n                return t + (e ? \" \" : \"\") + bi(n);\n            });\n            function Bd(t, n, e) {\n                return t = U(t), e = e == null ? 0 : mn(T(e), 0, t.length), n = lt(n), t.slice(e, e + n.length) == n;\n            }\n            function Gd(t, n, e) {\n                var r = a.templateSettings;\n                e && it(t, n, e) && (n = i), t = U(t), n = hr({}, n, r, Su);\n                var u = hr({}, n.imports, r.imports, Su), o = V(u), f = Mr(u, o), c, l, v = 0, _ = n.interpolate || xe, m = \"__p += '\", C = Gr((n.escape || xe).source + \"|\" + _.source + \"|\" + (_ === Xi ? Co : xe).source + \"|\" + (n.evaluate || xe).source + \"|$\", \"g\"), I = \"//# sourceURL=\" + (W.call(n, \"sourceURL\") ? (n.sourceURL + \"\").replace(/\\s/g, \" \") : \"lodash.templateSources[\" + ++Vo + \"]\") + `\n`;\n                t.replace(C, function(S, D, $, dt, st, gt) {\n                    return $ || ($ = dt), m += t.slice(v, gt).replace(Oo, mf), D && (c = !0, m += `' +\n__e(` + D + `) +\n'`), st && (l = !0, m += `';\n` + st + `;\n__p += '`), $ && (m += `' +\n((__t = (` + $ + `)) == null ? '' : __t) +\n'`), v = gt + S.length, S;\n                }), m += `';\n`;\n                var y = W.call(n, \"variable\") && n.variable;\n                if (!y) m = `with (obj) {\n` + m + `\n}\n`;\n                else if (wo.test(y)) throw new R(k);\n                m = (l ? m.replace(eo, \"\") : m).replace(ro, \"$1\").replace(io, \"$1;\"), m = \"function(\" + (y || \"obj\") + `) {\n` + (y ? \"\" : `obj || (obj = {});\n`) + \"var __t, __p = ''\" + (c ? \", __e = _.escape\" : \"\") + (l ? `, __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n` : `;\n`) + m + `return __p\n}`;\n                var L = wa(function() {\n                    return q(o, I + \"return \" + m).apply(i, f);\n                });\n                if (L.source = m, yi(L)) throw L;\n                return L;\n            }\n            function zd(t) {\n                return U(t).toLowerCase();\n            }\n            function Kd(t) {\n                return U(t).toUpperCase();\n            }\n            function Jd(t, n, e) {\n                if (t = U(t), t && (e || n === i)) return Os(t);\n                if (!t || !(n = lt(n))) return t;\n                var r = St(t), u = St(n), o = Rs(r, u), f = bs(r, u) + 1;\n                return cn(r, o, f).join(\"\");\n            }\n            function Yd(t, n, e) {\n                if (t = U(t), t && (e || n === i)) return t.slice(0, Ls(t) + 1);\n                if (!t || !(n = lt(n))) return t;\n                var r = St(t), u = bs(r, St(n)) + 1;\n                return cn(r, 0, u).join(\"\");\n            }\n            function Zd(t, n, e) {\n                if (t = U(t), t && (e || n === i)) return t.replace(yr, \"\");\n                if (!t || !(n = lt(n))) return t;\n                var r = St(t), u = Rs(r, St(n));\n                return cn(r, u).join(\"\");\n            }\n            function Xd(t, n) {\n                var e = Wa, r = Ma;\n                if (K(n)) {\n                    var u = \"separator\" in n ? n.separator : u;\n                    e = \"length\" in n ? T(n.length) : e, r = \"omission\" in n ? lt(n.omission) : r;\n                }\n                t = U(t);\n                var o = t.length;\n                if (Hn(t)) {\n                    var f = St(t);\n                    o = f.length;\n                }\n                if (e >= o) return t;\n                var c = e - Dn(r);\n                if (c < 1) return r;\n                var l = f ? cn(f, 0, c).join(\"\") : t.slice(0, c);\n                if (u === i) return l + r;\n                if (f && (c += l.length - c), Si(u)) {\n                    if (t.slice(c).search(u)) {\n                        var v, _ = l;\n                        for(u.global || (u = Gr(u.source, U(Qi.exec(u)) + \"g\")), u.lastIndex = 0; v = u.exec(_);)var m = v.index;\n                        l = l.slice(0, m === i ? c : m);\n                    }\n                } else if (t.indexOf(lt(u), c) != c) {\n                    var C = l.lastIndexOf(u);\n                    C > -1 && (l = l.slice(0, C));\n                }\n                return l + r;\n            }\n            function Qd(t) {\n                return t = U(t), t && so.test(t) ? t.replace(Yi, Ef) : t;\n            }\n            var Vd = Mn(function(t, n, e) {\n                return t + (e ? \" \" : \"\") + n.toUpperCase();\n            }), bi = Pu(\"toUpperCase\");\n            function ma(t, n, e) {\n                return t = U(t), n = e ? i : n, n === i ? Pf(t) ? Of(t) : hf(t) : t.match(n) || [];\n            }\n            var wa = H(function(t, n) {\n                try {\n                    return ct(t, i, n);\n                } catch (e) {\n                    return yi(e) ? e : new R(e);\n                }\n            }), kd = Zt(function(t, n) {\n                return mt(n, function(e) {\n                    e = Ft(e), Jt(t, e, xi(t[e], t));\n                }), t;\n            });\n            function jd(t) {\n                var n = t == null ? 0 : t.length, e = E();\n                return t = n ? z(t, function(r) {\n                    if (typeof r[1] != \"function\") throw new wt(O);\n                    return [\n                        e(r[0]),\n                        r[1]\n                    ];\n                }) : [], H(function(r) {\n                    for(var u = -1; ++u < n;){\n                        var o = t[u];\n                        if (ct(o[0], this, r)) return ct(o[1], this, r);\n                    }\n                });\n            }\n            function tg(t) {\n                return Ec(Ct(t, Ht));\n            }\n            function Ti(t) {\n                return function() {\n                    return t;\n                };\n            }\n            function ng(t, n) {\n                return t == null || t !== t ? n : t;\n            }\n            var eg = Au(), rg = Au(!0);\n            function ft(t) {\n                return t;\n            }\n            function Li(t) {\n                return ks(typeof t == \"function\" ? t : Ct(t, Ht));\n            }\n            function ig(t) {\n                return tu(Ct(t, Ht));\n            }\n            function sg(t, n) {\n                return nu(t, Ct(n, Ht));\n            }\n            var ug = H(function(t, n) {\n                return function(e) {\n                    return fe(e, t, n);\n                };\n            }), ag = H(function(t, n) {\n                return function(e) {\n                    return fe(t, e, n);\n                };\n            });\n            function Hi(t, n, e) {\n                var r = V(n), u = Je(n, r);\n                e == null && !(K(n) && (u.length || !r.length)) && (e = n, n = t, t = this, u = Je(n, V(n)));\n                var o = !(K(e) && \"chain\" in e) || !!e.chain, f = Qt(t);\n                return mt(u, function(c) {\n                    var l = n[c];\n                    t[c] = l, f && (t.prototype[c] = function() {\n                        var v = this.__chain__;\n                        if (o || v) {\n                            var _ = t(this.__wrapped__), m = _.__actions__ = ut(this.__actions__);\n                            return m.push({\n                                func: l,\n                                args: arguments,\n                                thisArg: t\n                            }), _.__chain__ = v, _;\n                        }\n                        return l.apply(t, rn([\n                            this.value()\n                        ], arguments));\n                    });\n                }), t;\n            }\n            function og() {\n                return j._ === this && (j._ = Df), this;\n            }\n            function Di() {}\n            function fg(t) {\n                return t = T(t), H(function(n) {\n                    return eu(n, t);\n                });\n            }\n            var cg = hi(z), hg = hi(Is), lg = hi($r);\n            function Pa(t) {\n                return mi(t) ? qr(Ft(t)) : Bc(t);\n            }\n            function pg(t) {\n                return function(n) {\n                    return t == null ? i : wn(t, n);\n                };\n            }\n            var dg = xu(), gg = xu(!0);\n            function Ni() {\n                return [];\n            }\n            function $i() {\n                return !1;\n            }\n            function vg() {\n                return {};\n            }\n            function _g() {\n                return \"\";\n            }\n            function mg() {\n                return !0;\n            }\n            function wg(t, n) {\n                if (t = T(t), t < 1 || t > nn) return [];\n                var e = $t, r = nt(t, $t);\n                n = E(n), t -= $t;\n                for(var u = Wr(r, n); ++e < t;)n(e);\n                return u;\n            }\n            function Pg(t) {\n                return b(t) ? z(t, Ft) : pt(t) ? [\n                    t\n                ] : ut(Wu(U(t)));\n            }\n            function Cg(t) {\n                var n = ++Lf;\n                return U(t) + n;\n            }\n            var Ag = ke(function(t, n) {\n                return t + n;\n            }, 0), Ig = li(\"ceil\"), xg = ke(function(t, n) {\n                return t / n;\n            }, 1), Eg = li(\"floor\");\n            function yg(t) {\n                return t && t.length ? Ke(t, ft, Vr) : i;\n            }\n            function Sg(t, n) {\n                return t && t.length ? Ke(t, E(n, 2), Vr) : i;\n            }\n            function Og(t) {\n                return ys(t, ft);\n            }\n            function Rg(t, n) {\n                return ys(t, E(n, 2));\n            }\n            function bg(t) {\n                return t && t.length ? Ke(t, ft, ni) : i;\n            }\n            function Tg(t, n) {\n                return t && t.length ? Ke(t, E(n, 2), ni) : i;\n            }\n            var Lg = ke(function(t, n) {\n                return t * n;\n            }, 1), Hg = li(\"round\"), Dg = ke(function(t, n) {\n                return t - n;\n            }, 0);\n            function Ng(t) {\n                return t && t.length ? Fr(t, ft) : 0;\n            }\n            function $g(t, n) {\n                return t && t.length ? Fr(t, E(n, 2)) : 0;\n            }\n            return a.after = ip, a.ary = Vu, a.assign = Kp, a.assignIn = ha, a.assignInWith = hr, a.assignWith = Jp, a.at = Yp, a.before = ku, a.bind = xi, a.bindAll = kd, a.bindKey = ju, a.castArray = vp, a.chain = Zu, a.chunk = Eh, a.compact = yh, a.concat = Sh, a.cond = jd, a.conforms = tg, a.constant = Ti, a.countBy = Nl, a.create = Zp, a.curry = ta, a.curryRight = na, a.debounce = ea, a.defaults = Xp, a.defaultsDeep = Qp, a.defer = sp, a.delay = up, a.difference = Oh, a.differenceBy = Rh, a.differenceWith = bh, a.drop = Th, a.dropRight = Lh, a.dropRightWhile = Hh, a.dropWhile = Dh, a.fill = Nh, a.filter = ql, a.flatMap = Wl, a.flatMapDeep = Ml, a.flatMapDepth = Bl, a.flatten = zu, a.flattenDeep = $h, a.flattenDepth = qh, a.flip = ap, a.flow = eg, a.flowRight = rg, a.fromPairs = Uh, a.functions = rd, a.functionsIn = id, a.groupBy = Gl, a.initial = Wh, a.intersection = Mh, a.intersectionBy = Bh, a.intersectionWith = Gh, a.invert = ud, a.invertBy = ad, a.invokeMap = Kl, a.iteratee = Li, a.keyBy = Jl, a.keys = V, a.keysIn = ot, a.map = sr, a.mapKeys = fd, a.mapValues = cd, a.matches = ig, a.matchesProperty = sg, a.memoize = ar, a.merge = hd, a.mergeWith = la, a.method = ug, a.methodOf = ag, a.mixin = Hi, a.negate = or, a.nthArg = fg, a.omit = ld, a.omitBy = pd, a.once = op, a.orderBy = Yl, a.over = cg, a.overArgs = fp, a.overEvery = hg, a.overSome = lg, a.partial = Ei, a.partialRight = ra, a.partition = Zl, a.pick = dd, a.pickBy = pa, a.property = Pa, a.propertyOf = pg, a.pull = Yh, a.pullAll = Ju, a.pullAllBy = Zh, a.pullAllWith = Xh, a.pullAt = Qh, a.range = dg, a.rangeRight = gg, a.rearg = cp, a.reject = Vl, a.remove = Vh, a.rest = hp, a.reverse = Ai, a.sampleSize = jl, a.set = vd, a.setWith = _d, a.shuffle = tp, a.slice = kh, a.sortBy = rp, a.sortedUniq = sl, a.sortedUniqBy = ul, a.split = Wd, a.spread = lp, a.tail = al, a.take = ol, a.takeRight = fl, a.takeRightWhile = cl, a.takeWhile = hl, a.tap = yl, a.throttle = pp, a.thru = ir, a.toArray = oa, a.toPairs = da, a.toPairsIn = ga, a.toPath = Pg, a.toPlainObject = ca, a.transform = md, a.unary = dp, a.union = ll, a.unionBy = pl, a.unionWith = dl, a.uniq = gl, a.uniqBy = vl, a.uniqWith = _l, a.unset = wd, a.unzip = Ii, a.unzipWith = Yu, a.update = Pd, a.updateWith = Cd, a.values = zn, a.valuesIn = Ad, a.without = ml, a.words = ma, a.wrap = gp, a.xor = wl, a.xorBy = Pl, a.xorWith = Cl, a.zip = Al, a.zipObject = Il, a.zipObjectDeep = xl, a.zipWith = El, a.entries = da, a.entriesIn = ga, a.extend = ha, a.extendWith = hr, Hi(a, a), a.add = Ag, a.attempt = wa, a.camelCase = yd, a.capitalize = va, a.ceil = Ig, a.clamp = Id, a.clone = _p, a.cloneDeep = wp, a.cloneDeepWith = Pp, a.cloneWith = mp, a.conformsTo = Cp, a.deburr = _a, a.defaultTo = ng, a.divide = xg, a.endsWith = Sd, a.eq = Rt, a.escape = Od, a.escapeRegExp = Rd, a.every = $l, a.find = Ul, a.findIndex = Bu, a.findKey = Vp, a.findLast = Fl, a.findLastIndex = Gu, a.findLastKey = kp, a.floor = Eg, a.forEach = Xu, a.forEachRight = Qu, a.forIn = jp, a.forInRight = td, a.forOwn = nd, a.forOwnRight = ed, a.get = Oi, a.gt = Ap, a.gte = Ip, a.has = sd, a.hasIn = Ri, a.head = Ku, a.identity = ft, a.includes = zl, a.indexOf = Fh, a.inRange = xd, a.invoke = od, a.isArguments = An, a.isArray = b, a.isArrayBuffer = xp, a.isArrayLike = at, a.isArrayLikeObject = Y, a.isBoolean = Ep, a.isBuffer = hn, a.isDate = yp, a.isElement = Sp, a.isEmpty = Op, a.isEqual = Rp, a.isEqualWith = bp, a.isError = yi, a.isFinite = Tp, a.isFunction = Qt, a.isInteger = ia, a.isLength = fr, a.isMap = sa, a.isMatch = Lp, a.isMatchWith = Hp, a.isNaN = Dp, a.isNative = Np, a.isNil = qp, a.isNull = $p, a.isNumber = ua, a.isObject = K, a.isObjectLike = J, a.isPlainObject = ge, a.isRegExp = Si, a.isSafeInteger = Up, a.isSet = aa, a.isString = cr, a.isSymbol = pt, a.isTypedArray = Gn, a.isUndefined = Fp, a.isWeakMap = Wp, a.isWeakSet = Mp, a.join = zh, a.kebabCase = bd, a.last = It, a.lastIndexOf = Kh, a.lowerCase = Td, a.lowerFirst = Ld, a.lt = Bp, a.lte = Gp, a.max = yg, a.maxBy = Sg, a.mean = Og, a.meanBy = Rg, a.min = bg, a.minBy = Tg, a.stubArray = Ni, a.stubFalse = $i, a.stubObject = vg, a.stubString = _g, a.stubTrue = mg, a.multiply = Lg, a.nth = Jh, a.noConflict = og, a.noop = Di, a.now = ur, a.pad = Hd, a.padEnd = Dd, a.padStart = Nd, a.parseInt = $d, a.random = Ed, a.reduce = Xl, a.reduceRight = Ql, a.repeat = qd, a.replace = Ud, a.result = gd, a.round = Hg, a.runInContext = h, a.sample = kl, a.size = np, a.snakeCase = Fd, a.some = ep, a.sortedIndex = jh, a.sortedIndexBy = tl, a.sortedIndexOf = nl, a.sortedLastIndex = el, a.sortedLastIndexBy = rl, a.sortedLastIndexOf = il, a.startCase = Md, a.startsWith = Bd, a.subtract = Dg, a.sum = Ng, a.sumBy = $g, a.template = Gd, a.times = wg, a.toFinite = Vt, a.toInteger = T, a.toLength = fa, a.toLower = zd, a.toNumber = xt, a.toSafeInteger = zp, a.toString = U, a.toUpper = Kd, a.trim = Jd, a.trimEnd = Yd, a.trimStart = Zd, a.truncate = Xd, a.unescape = Qd, a.uniqueId = Cg, a.upperCase = Vd, a.upperFirst = bi, a.each = Xu, a.eachRight = Qu, a.first = Ku, Hi(a, function() {\n                var t = {};\n                return qt(a, function(n, e) {\n                    W.call(a.prototype, e) || (t[e] = n);\n                }), t;\n            }(), {\n                chain: !1\n            }), a.VERSION = p, mt([\n                \"bind\",\n                \"bindKey\",\n                \"curry\",\n                \"curryRight\",\n                \"partial\",\n                \"partialRight\"\n            ], function(t) {\n                a[t].placeholder = a;\n            }), mt([\n                \"drop\",\n                \"take\"\n            ], function(t, n) {\n                N.prototype[t] = function(e) {\n                    e = e === i ? 1 : Q(T(e), 0);\n                    var r = this.__filtered__ && !n ? new N(this) : this.clone();\n                    return r.__filtered__ ? r.__takeCount__ = nt(e, r.__takeCount__) : r.__views__.push({\n                        size: nt(e, $t),\n                        type: t + (r.__dir__ < 0 ? \"Right\" : \"\")\n                    }), r;\n                }, N.prototype[t + \"Right\"] = function(e) {\n                    return this.reverse()[t](e).reverse();\n                };\n            }), mt([\n                \"filter\",\n                \"map\",\n                \"takeWhile\"\n            ], function(t, n) {\n                var e = n + 1, r = e == zi || e == Ka;\n                N.prototype[t] = function(u) {\n                    var o = this.clone();\n                    return o.__iteratees__.push({\n                        iteratee: E(u, 3),\n                        type: e\n                    }), o.__filtered__ = o.__filtered__ || r, o;\n                };\n            }), mt([\n                \"head\",\n                \"last\"\n            ], function(t, n) {\n                var e = \"take\" + (n ? \"Right\" : \"\");\n                N.prototype[t] = function() {\n                    return this[e](1).value()[0];\n                };\n            }), mt([\n                \"initial\",\n                \"tail\"\n            ], function(t, n) {\n                var e = \"drop\" + (n ? \"\" : \"Right\");\n                N.prototype[t] = function() {\n                    return this.__filtered__ ? new N(this) : this[e](1);\n                };\n            }), N.prototype.compact = function() {\n                return this.filter(ft);\n            }, N.prototype.find = function(t) {\n                return this.filter(t).head();\n            }, N.prototype.findLast = function(t) {\n                return this.reverse().find(t);\n            }, N.prototype.invokeMap = H(function(t, n) {\n                return typeof t == \"function\" ? new N(this) : this.map(function(e) {\n                    return fe(e, t, n);\n                });\n            }), N.prototype.reject = function(t) {\n                return this.filter(or(E(t)));\n            }, N.prototype.slice = function(t, n) {\n                t = T(t);\n                var e = this;\n                return e.__filtered__ && (t > 0 || n < 0) ? new N(e) : (t < 0 ? e = e.takeRight(-t) : t && (e = e.drop(t)), n !== i && (n = T(n), e = n < 0 ? e.dropRight(-n) : e.take(n - t)), e);\n            }, N.prototype.takeRightWhile = function(t) {\n                return this.reverse().takeWhile(t).reverse();\n            }, N.prototype.toArray = function() {\n                return this.take($t);\n            }, qt(N.prototype, function(t, n) {\n                var e = /^(?:filter|find|map|reject)|While$/.test(n), r = /^(?:head|last)$/.test(n), u = a[r ? \"take\" + (n == \"last\" ? \"Right\" : \"\") : n], o = r || /^find/.test(n);\n                u && (a.prototype[n] = function() {\n                    var f = this.__wrapped__, c = r ? [\n                        1\n                    ] : arguments, l = f instanceof N, v = c[0], _ = l || b(f), m = function(D) {\n                        var $ = u.apply(a, rn([\n                            D\n                        ], c));\n                        return r && C ? $[0] : $;\n                    };\n                    _ && e && typeof v == \"function\" && v.length != 1 && (l = _ = !1);\n                    var C = this.__chain__, I = !!this.__actions__.length, y = o && !C, L = l && !I;\n                    if (!o && _) {\n                        f = L ? f : new N(this);\n                        var S = t.apply(f, c);\n                        return S.__actions__.push({\n                            func: ir,\n                            args: [\n                                m\n                            ],\n                            thisArg: i\n                        }), new Pt(S, C);\n                    }\n                    return y && L ? t.apply(this, c) : (S = this.thru(m), y ? r ? S.value()[0] : S.value() : S);\n                });\n            }), mt([\n                \"pop\",\n                \"push\",\n                \"shift\",\n                \"sort\",\n                \"splice\",\n                \"unshift\"\n            ], function(t) {\n                var n = be[t], e = /^(?:push|sort|unshift)$/.test(t) ? \"tap\" : \"thru\", r = /^(?:pop|shift)$/.test(t);\n                a.prototype[t] = function() {\n                    var u = arguments;\n                    if (r && !this.__chain__) {\n                        var o = this.value();\n                        return n.apply(b(o) ? o : [], u);\n                    }\n                    return this[e](function(f) {\n                        return n.apply(b(f) ? f : [], u);\n                    });\n                };\n            }), qt(N.prototype, function(t, n) {\n                var e = a[n];\n                if (e) {\n                    var r = e.name + \"\";\n                    W.call(Un, r) || (Un[r] = []), Un[r].push({\n                        name: n,\n                        func: e\n                    });\n                }\n            }), Un[Ve(i, ln).name] = [\n                {\n                    name: \"wrapper\",\n                    func: i\n                }\n            ], N.prototype.clone = Qf, N.prototype.reverse = Vf, N.prototype.value = kf, a.prototype.at = Sl, a.prototype.chain = Ol, a.prototype.commit = Rl, a.prototype.next = bl, a.prototype.plant = Ll, a.prototype.reverse = Hl, a.prototype.toJSON = a.prototype.valueOf = a.prototype.value = Dl, a.prototype.first = a.prototype.head, ee && (a.prototype[ee] = Tl), a;\n        }, Nn = Rf();\n        dn ? ((dn.exports = Nn)._ = Nn, Lr._ = Nn) : j._ = Nn;\n    }).call(_e);\n})(Ui, Ui.exports);\nvar Xg = Object.defineProperty, Qg = Object.defineProperties, Vg = Object.getOwnPropertyDescriptors, Oa = Object.getOwnPropertySymbols, kg = Object.prototype.hasOwnProperty, jg = Object.prototype.propertyIsEnumerable, Ra = (P, s, i)=>s in P ? Xg(P, s, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: i\n    }) : P[s] = i, lr = (P, s)=>{\n    for(var i in s || (s = {}))kg.call(s, i) && Ra(P, i, s[i]);\n    if (Oa) for (var i of Oa(s))jg.call(s, i) && Ra(P, i, s[i]);\n    return P;\n}, tv = (P, s)=>Qg(P, Vg(s));\nfunction Lt(P, s, i) {\n    var p;\n    const w = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(P);\n    return ((p = s.rpcMap) == null ? void 0 : p[w.reference]) || `${Zg}?chainId=${w.namespace}:${w.reference}&projectId=${i}`;\n}\nfunction In(P) {\n    return P.includes(\":\") ? P.split(\":\")[1] : P;\n}\nfunction ba(P) {\n    return P.map((s)=>`${s.split(\":\")[0]}:${s.split(\":\")[1]}`);\n}\nfunction nv(P, s) {\n    const i = Object.keys(s.namespaces).filter((w)=>w.includes(P));\n    if (!i.length) return [];\n    const p = [];\n    return i.forEach((w)=>{\n        const x = s.namespaces[w].accounts;\n        p.push(...x);\n    }), p;\n}\nfunction Fi(P = {}, s = {}) {\n    const i = Ta(P), p = Ta(s);\n    return Ui.exports.merge(i, p);\n}\nfunction Ta(P) {\n    var s, i, p, w;\n    const x = {};\n    if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(P)) return x;\n    for (const [O, k] of Object.entries(P)){\n        const tn = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isCaipNamespace)(O) ? [\n            O\n        ] : k.chains, Jn = k.methods || [], xn = k.events || [], Ht = k.rpcMap || {}, Mt = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(O);\n        x[Mt] = tv(lr(lr({}, x[Mt]), k), {\n            chains: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(tn, (s = x[Mt]) == null ? void 0 : s.chains),\n            methods: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(Jn, (i = x[Mt]) == null ? void 0 : i.methods),\n            events: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(xn, (p = x[Mt]) == null ? void 0 : p.events),\n            rpcMap: lr(lr({}, Ht), (w = x[Mt]) == null ? void 0 : w.rpcMap)\n        });\n    }\n    return x;\n}\nfunction ev(P) {\n    return P.includes(\":\") ? P.split(\":\")[2] : P;\n}\nfunction La(P) {\n    const s = {};\n    for (const [i, p] of Object.entries(P)){\n        const w = p.methods || [], x = p.events || [], O = p.accounts || [], k = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isCaipNamespace)(i) ? [\n            i\n        ] : p.chains ? p.chains : ba(p.accounts);\n        s[i] = {\n            chains: k,\n            methods: w,\n            events: x,\n            accounts: O\n        };\n    }\n    return s;\n}\nfunction Wi(P) {\n    return typeof P == \"number\" ? P : P.includes(\"0x\") ? parseInt(P, 16) : (P = P.includes(\":\") ? P.split(\":\")[1] : P, isNaN(Number(P)) ? P : Number(P));\n}\nconst Ha = {}, F = (P)=>Ha[P], Mi = (P, s)=>{\n    Ha[P] = s;\n};\nclass rv {\n    constructor(s){\n        this.name = \"polkadot\", this.namespace = s.namespace, this.events = F(\"events\"), this.client = F(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(s) {\n        this.namespace = Object.assign(this.namespace, s);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const s = this.namespace.chains[0];\n        if (!s) throw new Error(\"ChainId not found\");\n        return s.split(\":\")[1];\n    }\n    request(s) {\n        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);\n    }\n    setDefaultChain(s, i) {\n        this.httpProviders[s] || this.setHttpProvider(s, i), this.chainId = s, this.events.emit(Tt.DEFAULT_CHAIN_CHANGED, `${this.name}:${s}`);\n    }\n    getAccounts() {\n        const s = this.namespace.accounts;\n        return s ? s.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const s = {};\n        return this.namespace.chains.forEach((i)=>{\n            var p;\n            const w = In(i);\n            s[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);\n        }), s;\n    }\n    getHttpProvider() {\n        const s = `${this.name}:${this.chainId}`, i = this.httpProviders[s];\n        if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${s} not found`);\n        return i;\n    }\n    setHttpProvider(s, i) {\n        const p = this.createHttpProvider(s, i);\n        p && (this.httpProviders[s] = p);\n    }\n    createHttpProvider(s, i) {\n        const p = i || Lt(s, this.namespace, this.client.core.projectId);\n        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, F(\"disableProviderPing\")));\n    }\n}\nvar iv = Object.defineProperty, sv = Object.defineProperties, uv = Object.getOwnPropertyDescriptors, Da = Object.getOwnPropertySymbols, av = Object.prototype.hasOwnProperty, ov = Object.prototype.propertyIsEnumerable, Na = (P, s, i)=>s in P ? iv(P, s, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: i\n    }) : P[s] = i, $a = (P, s)=>{\n    for(var i in s || (s = {}))av.call(s, i) && Na(P, i, s[i]);\n    if (Da) for (var i of Da(s))ov.call(s, i) && Na(P, i, s[i]);\n    return P;\n}, qa = (P, s)=>sv(P, uv(s));\nclass fv {\n    constructor(s){\n        this.name = \"eip155\", this.namespace = s.namespace, this.events = F(\"events\"), this.client = F(\"client\"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());\n    }\n    async request(s) {\n        switch(s.request.method){\n            case \"eth_requestAccounts\":\n                return this.getAccounts();\n            case \"eth_accounts\":\n                return this.getAccounts();\n            case \"wallet_switchEthereumChain\":\n                return await this.handleSwitchChain(s);\n            case \"eth_chainId\":\n                return parseInt(this.getDefaultChain());\n            case \"wallet_getCapabilities\":\n                return await this.getCapabilities(s);\n        }\n        return this.namespace.methods.includes(s.request.method) ? await this.client.request(s) : this.getHttpProvider().request(s.request);\n    }\n    updateNamespace(s) {\n        this.namespace = Object.assign(this.namespace, s);\n    }\n    setDefaultChain(s, i) {\n        this.httpProviders[s] || this.setHttpProvider(parseInt(s), i), this.chainId = parseInt(s), this.events.emit(Tt.DEFAULT_CHAIN_CHANGED, `${this.name}:${s}`);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId.toString();\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const s = this.namespace.chains[0];\n        if (!s) throw new Error(\"ChainId not found\");\n        return s.split(\":\")[1];\n    }\n    createHttpProvider(s, i) {\n        const p = i || Lt(`${this.name}:${s}`, this.namespace, this.client.core.projectId);\n        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__.HttpConnection(p, F(\"disableProviderPing\")));\n    }\n    setHttpProvider(s, i) {\n        const p = this.createHttpProvider(s, i);\n        p && (this.httpProviders[s] = p);\n    }\n    createHttpProviders() {\n        const s = {};\n        return this.namespace.chains.forEach((i)=>{\n            var p;\n            const w = parseInt(In(i));\n            s[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);\n        }), s;\n    }\n    getAccounts() {\n        const s = this.namespace.accounts;\n        return s ? [\n            ...new Set(s.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    getHttpProvider() {\n        const s = this.chainId, i = this.httpProviders[s];\n        if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${s} not found`);\n        return i;\n    }\n    async handleSwitchChain(s) {\n        var i, p;\n        let w = s.request.params ? (i = s.request.params[0]) == null ? void 0 : i.chainId : \"0x0\";\n        w = w.startsWith(\"0x\") ? w : `0x${w}`;\n        const x = parseInt(w, 16);\n        if (this.isChainApproved(x)) this.setDefaultChain(`${x}`);\n        else if (this.namespace.methods.includes(\"wallet_switchEthereumChain\")) await this.client.request({\n            topic: s.topic,\n            request: {\n                method: s.request.method,\n                params: [\n                    {\n                        chainId: w\n                    }\n                ]\n            },\n            chainId: (p = this.namespace.chains) == null ? void 0 : p[0]\n        }), this.setDefaultChain(`${x}`);\n        else throw new Error(`Failed to switch to chain 'eip155:${x}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);\n        return null;\n    }\n    isChainApproved(s) {\n        return this.namespace.chains.includes(`${this.name}:${s}`);\n    }\n    async getCapabilities(s) {\n        var i, p, w;\n        const x = (p = (i = s.request) == null ? void 0 : i.params) == null ? void 0 : p[0];\n        if (!x) throw new Error(\"Missing address parameter in `wallet_getCapabilities` request\");\n        const O = this.client.session.get(s.topic), k = ((w = O?.sessionProperties) == null ? void 0 : w.capabilities) || {};\n        if (k != null && k[x]) return k?.[x];\n        const tn = await this.client.request(s);\n        try {\n            await this.client.session.update(s.topic, {\n                sessionProperties: qa($a({}, O.sessionProperties || {}), {\n                    capabilities: qa($a({}, k || {}), {\n                        [x]: tn\n                    })\n                })\n            });\n        } catch (Jn) {\n            console.warn(\"Failed to update session with capabilities\", Jn);\n        }\n        return tn;\n    }\n}\nclass cv {\n    constructor(s){\n        this.name = \"solana\", this.namespace = s.namespace, this.events = F(\"events\"), this.client = F(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(s) {\n        this.namespace = Object.assign(this.namespace, s);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(s) {\n        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);\n    }\n    setDefaultChain(s, i) {\n        this.httpProviders[s] || this.setHttpProvider(s, i), this.chainId = s, this.events.emit(Tt.DEFAULT_CHAIN_CHANGED, `${this.name}:${s}`);\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const s = this.namespace.chains[0];\n        if (!s) throw new Error(\"ChainId not found\");\n        return s.split(\":\")[1];\n    }\n    getAccounts() {\n        const s = this.namespace.accounts;\n        return s ? [\n            ...new Set(s.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const s = {};\n        return this.namespace.chains.forEach((i)=>{\n            var p;\n            const w = In(i);\n            s[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);\n        }), s;\n    }\n    getHttpProvider() {\n        const s = `${this.name}:${this.chainId}`, i = this.httpProviders[s];\n        if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${s} not found`);\n        return i;\n    }\n    setHttpProvider(s, i) {\n        const p = this.createHttpProvider(s, i);\n        p && (this.httpProviders[s] = p);\n    }\n    createHttpProvider(s, i) {\n        const p = i || Lt(s, this.namespace, this.client.core.projectId);\n        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, F(\"disableProviderPing\")));\n    }\n}\nclass hv {\n    constructor(s){\n        this.name = \"cosmos\", this.namespace = s.namespace, this.events = F(\"events\"), this.client = F(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(s) {\n        this.namespace = Object.assign(this.namespace, s);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const s = this.namespace.chains[0];\n        if (!s) throw new Error(\"ChainId not found\");\n        return s.split(\":\")[1];\n    }\n    request(s) {\n        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);\n    }\n    setDefaultChain(s, i) {\n        this.httpProviders[s] || this.setHttpProvider(s, i), this.chainId = s, this.events.emit(Tt.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n    }\n    getAccounts() {\n        const s = this.namespace.accounts;\n        return s ? [\n            ...new Set(s.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const s = {};\n        return this.namespace.chains.forEach((i)=>{\n            var p;\n            const w = In(i);\n            s[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);\n        }), s;\n    }\n    getHttpProvider() {\n        const s = `${this.name}:${this.chainId}`, i = this.httpProviders[s];\n        if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${s} not found`);\n        return i;\n    }\n    setHttpProvider(s, i) {\n        const p = this.createHttpProvider(s, i);\n        p && (this.httpProviders[s] = p);\n    }\n    createHttpProvider(s, i) {\n        const p = i || Lt(s, this.namespace, this.client.core.projectId);\n        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, F(\"disableProviderPing\")));\n    }\n}\nclass lv {\n    constructor(s){\n        this.name = \"algorand\", this.namespace = s.namespace, this.events = F(\"events\"), this.client = F(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(s) {\n        this.namespace = Object.assign(this.namespace, s);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(s) {\n        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);\n    }\n    setDefaultChain(s, i) {\n        if (!this.httpProviders[s]) {\n            const p = i || Lt(`${this.name}:${s}`, this.namespace, this.client.core.projectId);\n            if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);\n            this.setHttpProvider(s, p);\n        }\n        this.chainId = s, this.events.emit(Tt.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const s = this.namespace.chains[0];\n        if (!s) throw new Error(\"ChainId not found\");\n        return s.split(\":\")[1];\n    }\n    getAccounts() {\n        const s = this.namespace.accounts;\n        return s ? [\n            ...new Set(s.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const s = {};\n        return this.namespace.chains.forEach((i)=>{\n            var p;\n            s[i] = this.createHttpProvider(i, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);\n        }), s;\n    }\n    getHttpProvider() {\n        const s = `${this.name}:${this.chainId}`, i = this.httpProviders[s];\n        if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${s} not found`);\n        return i;\n    }\n    setHttpProvider(s, i) {\n        const p = this.createHttpProvider(s, i);\n        p && (this.httpProviders[s] = p);\n    }\n    createHttpProvider(s, i) {\n        const p = i || Lt(s, this.namespace, this.client.core.projectId);\n        return typeof p > \"u\" ? void 0 : new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, F(\"disableProviderPing\")));\n    }\n}\nclass pv {\n    constructor(s){\n        this.name = \"cip34\", this.namespace = s.namespace, this.events = F(\"events\"), this.client = F(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(s) {\n        this.namespace = Object.assign(this.namespace, s);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const s = this.namespace.chains[0];\n        if (!s) throw new Error(\"ChainId not found\");\n        return s.split(\":\")[1];\n    }\n    request(s) {\n        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);\n    }\n    setDefaultChain(s, i) {\n        this.httpProviders[s] || this.setHttpProvider(s, i), this.chainId = s, this.events.emit(Tt.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n    }\n    getAccounts() {\n        const s = this.namespace.accounts;\n        return s ? [\n            ...new Set(s.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const s = {};\n        return this.namespace.chains.forEach((i)=>{\n            const p = this.getCardanoRPCUrl(i), w = In(i);\n            s[w] = this.createHttpProvider(w, p);\n        }), s;\n    }\n    getHttpProvider() {\n        const s = `${this.name}:${this.chainId}`, i = this.httpProviders[s];\n        if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${s} not found`);\n        return i;\n    }\n    getCardanoRPCUrl(s) {\n        const i = this.namespace.rpcMap;\n        if (i) return i[s];\n    }\n    setHttpProvider(s, i) {\n        const p = this.createHttpProvider(s, i);\n        p && (this.httpProviders[s] = p);\n    }\n    createHttpProvider(s, i) {\n        const p = i || this.getCardanoRPCUrl(s);\n        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, F(\"disableProviderPing\")));\n    }\n}\nclass dv {\n    constructor(s){\n        this.name = \"elrond\", this.namespace = s.namespace, this.events = F(\"events\"), this.client = F(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(s) {\n        this.namespace = Object.assign(this.namespace, s);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(s) {\n        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);\n    }\n    setDefaultChain(s, i) {\n        this.httpProviders[s] || this.setHttpProvider(s, i), this.chainId = s, this.events.emit(Tt.DEFAULT_CHAIN_CHANGED, `${this.name}:${s}`);\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const s = this.namespace.chains[0];\n        if (!s) throw new Error(\"ChainId not found\");\n        return s.split(\":\")[1];\n    }\n    getAccounts() {\n        const s = this.namespace.accounts;\n        return s ? [\n            ...new Set(s.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const s = {};\n        return this.namespace.chains.forEach((i)=>{\n            var p;\n            const w = In(i);\n            s[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);\n        }), s;\n    }\n    getHttpProvider() {\n        const s = `${this.name}:${this.chainId}`, i = this.httpProviders[s];\n        if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${s} not found`);\n        return i;\n    }\n    setHttpProvider(s, i) {\n        const p = this.createHttpProvider(s, i);\n        p && (this.httpProviders[s] = p);\n    }\n    createHttpProvider(s, i) {\n        const p = i || Lt(s, this.namespace, this.client.core.projectId);\n        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, F(\"disableProviderPing\")));\n    }\n}\nclass gv {\n    constructor(s){\n        this.name = \"multiversx\", this.namespace = s.namespace, this.events = F(\"events\"), this.client = F(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(s) {\n        this.namespace = Object.assign(this.namespace, s);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(s) {\n        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);\n    }\n    setDefaultChain(s, i) {\n        this.httpProviders[s] || this.setHttpProvider(s, i), this.chainId = s, this.events.emit(Tt.DEFAULT_CHAIN_CHANGED, `${this.name}:${s}`);\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const s = this.namespace.chains[0];\n        if (!s) throw new Error(\"ChainId not found\");\n        return s.split(\":\")[1];\n    }\n    getAccounts() {\n        const s = this.namespace.accounts;\n        return s ? [\n            ...new Set(s.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const s = {};\n        return this.namespace.chains.forEach((i)=>{\n            var p;\n            const w = In(i);\n            s[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);\n        }), s;\n    }\n    getHttpProvider() {\n        const s = `${this.name}:${this.chainId}`, i = this.httpProviders[s];\n        if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${s} not found`);\n        return i;\n    }\n    setHttpProvider(s, i) {\n        const p = this.createHttpProvider(s, i);\n        p && (this.httpProviders[s] = p);\n    }\n    createHttpProvider(s, i) {\n        const p = i || Lt(s, this.namespace, this.client.core.projectId);\n        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, F(\"disableProviderPing\")));\n    }\n}\nclass vv {\n    constructor(s){\n        this.name = \"near\", this.namespace = s.namespace, this.events = F(\"events\"), this.client = F(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(s) {\n        this.namespace = Object.assign(this.namespace, s);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const s = this.namespace.chains[0];\n        if (!s) throw new Error(\"ChainId not found\");\n        return s.split(\":\")[1];\n    }\n    request(s) {\n        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider().request(s.request);\n    }\n    setDefaultChain(s, i) {\n        if (this.chainId = s, !this.httpProviders[s]) {\n            const p = i || Lt(`${this.name}:${s}`, this.namespace);\n            if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);\n            this.setHttpProvider(s, p);\n        }\n        this.events.emit(Tt.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n    }\n    getAccounts() {\n        const s = this.namespace.accounts;\n        return s ? s.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const s = {};\n        return this.namespace.chains.forEach((i)=>{\n            var p;\n            s[i] = this.createHttpProvider(i, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);\n        }), s;\n    }\n    getHttpProvider() {\n        const s = `${this.name}:${this.chainId}`, i = this.httpProviders[s];\n        if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${s} not found`);\n        return i;\n    }\n    setHttpProvider(s, i) {\n        const p = this.createHttpProvider(s, i);\n        p && (this.httpProviders[s] = p);\n    }\n    createHttpProvider(s, i) {\n        const p = i || Lt(s, this.namespace);\n        return typeof p > \"u\" ? void 0 : new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, F(\"disableProviderPing\")));\n    }\n}\nclass _v {\n    constructor(s){\n        this.name = Kn, this.namespace = s.namespace, this.events = F(\"events\"), this.client = F(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(s) {\n        this.namespace.chains = [\n            ...new Set((this.namespace.chains || []).concat(s.chains || []))\n        ], this.namespace.accounts = [\n            ...new Set((this.namespace.accounts || []).concat(s.accounts || []))\n        ], this.namespace.methods = [\n            ...new Set((this.namespace.methods || []).concat(s.methods || []))\n        ], this.namespace.events = [\n            ...new Set((this.namespace.events || []).concat(s.events || []))\n        ], this.httpProviders = this.createHttpProviders();\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(s) {\n        return this.namespace.methods.includes(s.request.method) ? this.client.request(s) : this.getHttpProvider(s.chainId).request(s.request);\n    }\n    setDefaultChain(s, i) {\n        this.httpProviders[s] || this.setHttpProvider(s, i), this.chainId = s, this.events.emit(Tt.DEFAULT_CHAIN_CHANGED, `${this.name}:${s}`);\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const s = this.namespace.chains[0];\n        if (!s) throw new Error(\"ChainId not found\");\n        return s.split(\":\")[1];\n    }\n    getAccounts() {\n        const s = this.namespace.accounts;\n        return s ? [\n            ...new Set(s.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        var s, i;\n        const p = {};\n        return (i = (s = this.namespace) == null ? void 0 : s.accounts) == null || i.forEach((w)=>{\n            const x = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(w);\n            p[`${x.namespace}:${x.reference}`] = this.createHttpProvider(w);\n        }), p;\n    }\n    getHttpProvider(s) {\n        const i = this.httpProviders[s];\n        if (typeof i > \"u\") throw new Error(`JSON-RPC provider for ${s} not found`);\n        return i;\n    }\n    setHttpProvider(s, i) {\n        const p = this.createHttpProvider(s, i);\n        p && (this.httpProviders[s] = p);\n    }\n    createHttpProvider(s, i) {\n        const p = i || Lt(s, this.namespace, this.client.core.projectId);\n        if (!p) throw new Error(`No RPC url provided for chainId: ${s}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, F(\"disableProviderPing\")));\n    }\n}\nvar mv = Object.defineProperty, wv = Object.defineProperties, Pv = Object.getOwnPropertyDescriptors, Ua = Object.getOwnPropertySymbols, Cv = Object.prototype.hasOwnProperty, Av = Object.prototype.propertyIsEnumerable, Fa = (P, s, i)=>s in P ? mv(P, s, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: i\n    }) : P[s] = i, pr = (P, s)=>{\n    for(var i in s || (s = {}))Cv.call(s, i) && Fa(P, i, s[i]);\n    if (Ua) for (var i of Ua(s))Av.call(s, i) && Fa(P, i, s[i]);\n    return P;\n}, Bi = (P, s)=>wv(P, Pv(s));\nclass dr {\n    constructor(s){\n        this.events = new (events__WEBPACK_IMPORTED_MODULE_3___default()), this.rpcProviders = {}, this.shouldAbortPairingAttempt = !1, this.maxPairingAttempts = 10, this.disableProviderPing = !1, this.providerOpts = s, this.logger = typeof s?.logger < \"u\" && typeof s?.logger != \"string\" ? s.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getDefaultLoggerOptions)({\n            level: s?.logger || ya\n        })), this.disableProviderPing = s?.disableProviderPing || !1;\n    }\n    static async init(s) {\n        const i = new dr(s);\n        return await i.initialize(), i;\n    }\n    async request(s, i, p) {\n        const [w, x] = this.validateChain(i);\n        if (!this.session) throw new Error(\"Please call connect() before request()\");\n        return await this.getProvider(w).request({\n            request: pr({}, s),\n            chainId: `${w}:${x}`,\n            topic: this.session.topic,\n            expiry: p\n        });\n    }\n    sendAsync(s, i, p, w) {\n        const x = new Date().getTime();\n        this.request(s, p, w).then((O)=>i(null, (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_4__.formatJsonRpcResult)(x, O))).catch((O)=>i(O, void 0));\n    }\n    async enable() {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        return this.session || await this.connect({\n            namespaces: this.namespaces,\n            optionalNamespaces: this.optionalNamespaces,\n            sessionProperties: this.sessionProperties\n        }), await this.requestAccounts();\n    }\n    async disconnect() {\n        var s;\n        if (!this.session) throw new Error(\"Please call connect() before enable()\");\n        await this.client.disconnect({\n            topic: (s = this.session) == null ? void 0 : s.topic,\n            reason: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")\n        }), await this.cleanup();\n    }\n    async connect(s) {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        if (this.setNamespaces(s), await this.cleanupPendingPairings(), !s.skipPairing) return await this.pair(s.pairingTopic);\n    }\n    async authenticate(s) {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        this.setNamespaces(s), await this.cleanupPendingPairings();\n        const { uri: i, response: p } = await this.client.authenticate(s);\n        i && (this.uri = i, this.events.emit(\"display_uri\", i));\n        const w = await p();\n        if (this.session = w.session, this.session) {\n            const x = La(this.session.namespaces);\n            this.namespaces = Fi(this.namespaces, x), this.persist(\"namespaces\", this.namespaces), this.onConnect();\n        }\n        return w;\n    }\n    on(s, i) {\n        this.events.on(s, i);\n    }\n    once(s, i) {\n        this.events.once(s, i);\n    }\n    removeListener(s, i) {\n        this.events.removeListener(s, i);\n    }\n    off(s, i) {\n        this.events.off(s, i);\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    async pair(s) {\n        this.shouldAbortPairingAttempt = !1;\n        let i = 0;\n        do {\n            if (this.shouldAbortPairingAttempt) throw new Error(\"Pairing aborted\");\n            if (i >= this.maxPairingAttempts) throw new Error(\"Max auto pairing attempts reached\");\n            const { uri: p, approval: w } = await this.client.connect({\n                pairingTopic: s,\n                requiredNamespaces: this.namespaces,\n                optionalNamespaces: this.optionalNamespaces,\n                sessionProperties: this.sessionProperties\n            });\n            p && (this.uri = p, this.events.emit(\"display_uri\", p)), await w().then((x)=>{\n                this.session = x;\n                const O = La(x.namespaces);\n                this.namespaces = Fi(this.namespaces, O), this.persist(\"namespaces\", this.namespaces);\n            }).catch((x)=>{\n                if (x.message !== _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__.PROPOSAL_EXPIRY_MESSAGE) throw x;\n                i++;\n            });\n        }while (!this.session);\n        return this.onConnect(), this.session;\n    }\n    setDefaultChain(s, i) {\n        try {\n            if (!this.session) return;\n            const [p, w] = this.validateChain(s), x = this.getProvider(p);\n            x.name === Kn ? x.setDefaultChain(`${p}:${w}`, i) : x.setDefaultChain(w, i);\n        } catch (p) {\n            if (!/Please call connect/.test(p.message)) throw p;\n        }\n    }\n    async cleanupPendingPairings(s = {}) {\n        this.logger.info(\"Cleaning up inactive pairings...\");\n        const i = this.client.pairing.getAll();\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(i)) {\n            for (const p of i)s.deletePairings ? this.client.core.expirer.set(p.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(p.topic);\n            this.logger.info(`Inactive pairings cleared: ${i.length}`);\n        }\n    }\n    abortPairingAttempt() {\n        this.shouldAbortPairingAttempt = !0;\n    }\n    async checkStorage() {\n        if (this.namespaces = await this.getFromStore(\"namespaces\"), this.optionalNamespaces = await this.getFromStore(\"optionalNamespaces\") || {}, this.client.session.length) {\n            const s = this.client.session.keys.length - 1;\n            this.session = this.client.session.get(this.client.session.keys[s]), this.createProviders();\n        }\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();\n    }\n    async createClient() {\n        this.client = this.providerOpts.client || await _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__[\"default\"].init({\n            core: this.providerOpts.core,\n            logger: this.providerOpts.logger || ya,\n            relayUrl: this.providerOpts.relayUrl || Kg,\n            projectId: this.providerOpts.projectId,\n            metadata: this.providerOpts.metadata,\n            storageOptions: this.providerOpts.storageOptions,\n            storage: this.providerOpts.storage,\n            name: this.providerOpts.name,\n            customStoragePrefix: this.providerOpts.customStoragePrefix,\n            telemetryEnabled: this.providerOpts.telemetryEnabled\n        }), this.logger.trace(\"SignClient Initialized\");\n    }\n    createProviders() {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        if (!this.session) throw new Error(\"Session not initialized. Please call connect() before enable()\");\n        const s = [\n            ...new Set(Object.keys(this.session.namespaces).map((i)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(i)))\n        ];\n        Mi(\"client\", this.client), Mi(\"events\", this.events), Mi(\"disableProviderPing\", this.disableProviderPing), s.forEach((i)=>{\n            if (!this.session) return;\n            const p = nv(i, this.session), w = ba(p), x = Fi(this.namespaces, this.optionalNamespaces), O = Bi(pr({}, x[i]), {\n                accounts: p,\n                chains: w\n            });\n            switch(i){\n                case \"eip155\":\n                    this.rpcProviders[i] = new fv({\n                        namespace: O\n                    });\n                    break;\n                case \"algorand\":\n                    this.rpcProviders[i] = new lv({\n                        namespace: O\n                    });\n                    break;\n                case \"solana\":\n                    this.rpcProviders[i] = new cv({\n                        namespace: O\n                    });\n                    break;\n                case \"cosmos\":\n                    this.rpcProviders[i] = new hv({\n                        namespace: O\n                    });\n                    break;\n                case \"polkadot\":\n                    this.rpcProviders[i] = new rv({\n                        namespace: O\n                    });\n                    break;\n                case \"cip34\":\n                    this.rpcProviders[i] = new pv({\n                        namespace: O\n                    });\n                    break;\n                case \"elrond\":\n                    this.rpcProviders[i] = new dv({\n                        namespace: O\n                    });\n                    break;\n                case \"multiversx\":\n                    this.rpcProviders[i] = new gv({\n                        namespace: O\n                    });\n                    break;\n                case \"near\":\n                    this.rpcProviders[i] = new vv({\n                        namespace: O\n                    });\n                    break;\n                default:\n                    this.rpcProviders[Kn] ? this.rpcProviders[Kn].updateNamespace(O) : this.rpcProviders[Kn] = new _v({\n                        namespace: O\n                    });\n            }\n        });\n    }\n    registerEventListeners() {\n        if (typeof this.client > \"u\") throw new Error(\"Sign Client is not initialized\");\n        this.client.on(\"session_ping\", (s)=>{\n            this.events.emit(\"session_ping\", s);\n        }), this.client.on(\"session_event\", (s)=>{\n            const { params: i } = s, { event: p } = i;\n            if (p.name === \"accountsChanged\") {\n                const w = p.data;\n                w && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(w) && this.events.emit(\"accountsChanged\", w.map(ev));\n            } else if (p.name === \"chainChanged\") {\n                const w = i.chainId, x = i.event.data, O = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(w), k = Wi(w) !== Wi(x) ? `${O}:${Wi(x)}` : w;\n                this.onChainChanged(k);\n            } else this.events.emit(p.name, p.data);\n            this.events.emit(\"session_event\", s);\n        }), this.client.on(\"session_update\", ({ topic: s, params: i })=>{\n            var p;\n            const { namespaces: w } = i, x = (p = this.client) == null ? void 0 : p.session.get(s);\n            this.session = Bi(pr({}, x), {\n                namespaces: w\n            }), this.onSessionUpdate(), this.events.emit(\"session_update\", {\n                topic: s,\n                params: i\n            });\n        }), this.client.on(\"session_delete\", async (s)=>{\n            await this.cleanup(), this.events.emit(\"session_delete\", s), this.events.emit(\"disconnect\", Bi(pr({}, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), {\n                data: s.topic\n            }));\n        }), this.on(Tt.DEFAULT_CHAIN_CHANGED, (s)=>{\n            this.onChainChanged(s, !0);\n        });\n    }\n    getProvider(s) {\n        return this.rpcProviders[s] || this.rpcProviders[Kn];\n    }\n    onSessionUpdate() {\n        Object.keys(this.rpcProviders).forEach((s)=>{\n            var i;\n            this.getProvider(s).updateNamespace((i = this.session) == null ? void 0 : i.namespaces[s]);\n        });\n    }\n    setNamespaces(s) {\n        const { namespaces: i, optionalNamespaces: p, sessionProperties: w } = s;\n        i && Object.keys(i).length && (this.namespaces = i), p && Object.keys(p).length && (this.optionalNamespaces = p), this.sessionProperties = w, this.persist(\"namespaces\", i), this.persist(\"optionalNamespaces\", p);\n    }\n    validateChain(s) {\n        const [i, p] = s?.split(\":\") || [\n            \"\",\n            \"\"\n        ];\n        if (!this.namespaces || !Object.keys(this.namespaces).length) return [\n            i,\n            p\n        ];\n        if (i && !Object.keys(this.namespaces || {}).map((O)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(O)).includes(i)) throw new Error(`Namespace '${i}' is not configured. Please call connect() first with namespace config.`);\n        if (i && p) return [\n            i,\n            p\n        ];\n        const w = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(Object.keys(this.namespaces)[0]), x = this.rpcProviders[w].getDefaultChain();\n        return [\n            w,\n            x\n        ];\n    }\n    async requestAccounts() {\n        const [s] = this.validateChain();\n        return await this.getProvider(s).requestAccounts();\n    }\n    onChainChanged(s, i = !1) {\n        if (!this.namespaces) return;\n        const [p, w] = this.validateChain(s);\n        w && (i || this.getProvider(p).setDefaultChain(w), this.namespaces[p] ? this.namespaces[p].defaultChain = w : this.namespaces[`${p}:${w}`] ? this.namespaces[`${p}:${w}`].defaultChain = w : this.namespaces[`${p}:${w}`] = {\n            defaultChain: w\n        }, this.persist(\"namespaces\", this.namespaces), this.events.emit(\"chainChanged\", w));\n    }\n    onConnect() {\n        this.createProviders(), this.events.emit(\"connect\", {\n            session: this.session\n        });\n    }\n    async cleanup() {\n        this.session = void 0, this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, this.persist(\"namespaces\", void 0), this.persist(\"optionalNamespaces\", void 0), this.persist(\"sessionProperties\", void 0), await this.cleanupPendingPairings({\n            deletePairings: !0\n        });\n    }\n    persist(s, i) {\n        this.client.core.storage.setItem(`${Sa}/${s}`, i);\n    }\n    async getFromStore(s) {\n        return await this.client.core.storage.getItem(`${Sa}/${s}`);\n    }\n}\nconst Iv = dr;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/universal-provider/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/dist/index.es.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BASE10: () => (/* binding */ Gi),\n/* harmony export */   BASE16: () => (/* binding */ zt),\n/* harmony export */   BASE64: () => (/* binding */ Jr),\n/* harmony export */   COLON: () => (/* binding */ $o),\n/* harmony export */   DEFAULT_DEPTH: () => (/* binding */ di),\n/* harmony export */   EMPTY_SPACE: () => (/* binding */ Br),\n/* harmony export */   ENV_MAP: () => (/* binding */ qt),\n/* harmony export */   INTERNAL_ERRORS: () => (/* binding */ xo),\n/* harmony export */   MemoryStore: () => (/* binding */ _h),\n/* harmony export */   ONE_THOUSAND: () => (/* binding */ ts),\n/* harmony export */   REACT_NATIVE_PRODUCT: () => (/* binding */ Mn),\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: () => (/* binding */ oo),\n/* harmony export */   SDK_ERRORS: () => (/* binding */ wo),\n/* harmony export */   SDK_TYPE: () => (/* binding */ Sn),\n/* harmony export */   SLASH: () => (/* binding */ En),\n/* harmony export */   TYPE_0: () => (/* binding */ Yi),\n/* harmony export */   TYPE_1: () => (/* binding */ lr),\n/* harmony export */   UTF8: () => (/* binding */ Gr),\n/* harmony export */   addResourceToRecap: () => (/* binding */ Wf),\n/* harmony export */   appendToQueryString: () => (/* binding */ Nn),\n/* harmony export */   assertType: () => (/* binding */ os),\n/* harmony export */   assignAbilityToActions: () => (/* binding */ ji),\n/* harmony export */   base64Decode: () => (/* binding */ Yf),\n/* harmony export */   base64Encode: () => (/* binding */ Gf),\n/* harmony export */   buildApprovedNamespaces: () => (/* binding */ fh),\n/* harmony export */   buildAuthObject: () => (/* binding */ du),\n/* harmony export */   buildNamespacesFromAuth: () => (/* binding */ oh),\n/* harmony export */   buildRecapStatement: () => (/* binding */ Zf),\n/* harmony export */   calcExpiry: () => (/* binding */ As),\n/* harmony export */   capitalize: () => (/* binding */ ls),\n/* harmony export */   capitalizeWord: () => (/* binding */ On),\n/* harmony export */   createDelayedPromise: () => (/* binding */ ds),\n/* harmony export */   createEncodedRecap: () => (/* binding */ gu),\n/* harmony export */   createExpiringPromise: () => (/* binding */ ps),\n/* harmony export */   createRecap: () => (/* binding */ Vf),\n/* harmony export */   decodeRecap: () => (/* binding */ Oe),\n/* harmony export */   decodeTypeByte: () => (/* binding */ Mr),\n/* harmony export */   decrypt: () => (/* binding */ Fu),\n/* harmony export */   deriveSymKey: () => (/* binding */ Ru),\n/* harmony export */   deserialize: () => (/* binding */ Xi),\n/* harmony export */   encodeRecap: () => (/* binding */ jr),\n/* harmony export */   encodeTypeByte: () => (/* binding */ ro),\n/* harmony export */   encrypt: () => (/* binding */ Du),\n/* harmony export */   engineEvent: () => (/* binding */ ys),\n/* harmony export */   enumify: () => (/* binding */ cs),\n/* harmony export */   formatAccountId: () => (/* binding */ mn),\n/* harmony export */   formatAccountWithChain: () => (/* binding */ Qo),\n/* harmony export */   formatChainId: () => (/* binding */ vn),\n/* harmony export */   formatExpirerTarget: () => (/* binding */ vi),\n/* harmony export */   formatIdTarget: () => (/* binding */ ms),\n/* harmony export */   formatMessage: () => (/* binding */ Lf),\n/* harmony export */   formatMessageContext: () => (/* binding */ ss),\n/* harmony export */   formatRelayParams: () => (/* binding */ lo),\n/* harmony export */   formatRelayRpcUrl: () => (/* binding */ ns),\n/* harmony export */   formatStatementFromRecap: () => (/* binding */ Ji),\n/* harmony export */   formatTopicTarget: () => (/* binding */ vs),\n/* harmony export */   formatUA: () => (/* binding */ Bn),\n/* harmony export */   formatUri: () => (/* binding */ Wu),\n/* harmony export */   generateKeyPair: () => (/* binding */ Bu),\n/* harmony export */   generateRandomBytes32: () => (/* binding */ Cu),\n/* harmony export */   getAccountsChains: () => (/* binding */ $e),\n/* harmony export */   getAccountsFromNamespaces: () => (/* binding */ Go),\n/* harmony export */   getAddressFromAccount: () => (/* binding */ gn),\n/* harmony export */   getAddressesFromAccounts: () => (/* binding */ Jo),\n/* harmony export */   getAppMetadata: () => (/* binding */ rs),\n/* harmony export */   getBrowserOnlineStatus: () => (/* binding */ Po),\n/* harmony export */   getBundleId: () => (/* binding */ es),\n/* harmony export */   getChainFromAccount: () => (/* binding */ An),\n/* harmony export */   getChainsFromAccounts: () => (/* binding */ bn),\n/* harmony export */   getChainsFromNamespace: () => (/* binding */ _r),\n/* harmony export */   getChainsFromNamespaces: () => (/* binding */ Yo),\n/* harmony export */   getChainsFromRecap: () => (/* binding */ yu),\n/* harmony export */   getChainsFromRequiredNamespaces: () => (/* binding */ Vo),\n/* harmony export */   getCommonValuesInArrays: () => (/* binding */ mi),\n/* harmony export */   getCryptoKeyFromKeyData: () => (/* binding */ fo),\n/* harmony export */   getDecodedRecapFromResources: () => (/* binding */ jf),\n/* harmony export */   getDeepLink: () => (/* binding */ xs),\n/* harmony export */   getDidAddress: () => (/* binding */ Li),\n/* harmony export */   getDidAddressSegments: () => (/* binding */ Lr),\n/* harmony export */   getDidChainId: () => (/* binding */ zi),\n/* harmony export */   getEnvironment: () => (/* binding */ We),\n/* harmony export */   getHttpUrl: () => (/* binding */ fs),\n/* harmony export */   getInternalError: () => (/* binding */ xe),\n/* harmony export */   getJavascriptID: () => (/* binding */ _n),\n/* harmony export */   getJavascriptOS: () => (/* binding */ In),\n/* harmony export */   getLastItems: () => (/* binding */ Rn),\n/* harmony export */   getMethodsFromRecap: () => (/* binding */ bu),\n/* harmony export */   getNamespacedDidChainId: () => (/* binding */ cu),\n/* harmony export */   getNamespacesChains: () => (/* binding */ mo),\n/* harmony export */   getNamespacesEventsForChainId: () => (/* binding */ Ao),\n/* harmony export */   getNamespacesFromAccounts: () => (/* binding */ yo),\n/* harmony export */   getNamespacesMethodsForChainId: () => (/* binding */ go),\n/* harmony export */   getNodeOnlineStatus: () => (/* binding */ Fo),\n/* harmony export */   getReCapActions: () => (/* binding */ Jf),\n/* harmony export */   getReactNativeOnlineStatus: () => (/* binding */ Do),\n/* harmony export */   getRecapAbilitiesFromResource: () => (/* binding */ mu),\n/* harmony export */   getRecapFromResources: () => (/* binding */ Qr),\n/* harmony export */   getRecapResource: () => (/* binding */ Qf),\n/* harmony export */   getRelayClientMetadata: () => (/* binding */ is),\n/* harmony export */   getRelayProtocolApi: () => (/* binding */ zu),\n/* harmony export */   getRelayProtocolName: () => (/* binding */ Hu),\n/* harmony export */   getRequiredNamespacesFromNamespaces: () => (/* binding */ nh),\n/* harmony export */   getSdkError: () => (/* binding */ tr),\n/* harmony export */   getUniqueValues: () => (/* binding */ li),\n/* harmony export */   handleDeeplinkRedirect: () => (/* binding */ ws),\n/* harmony export */   hasOverlap: () => (/* binding */ _e),\n/* harmony export */   hashKey: () => (/* binding */ Ou),\n/* harmony export */   hashMessage: () => (/* binding */ Pu),\n/* harmony export */   isBrowser: () => (/* binding */ pr),\n/* harmony export */   isCaipNamespace: () => (/* binding */ Zi),\n/* harmony export */   isConformingNamespaces: () => (/* binding */ Ro),\n/* harmony export */   isExpired: () => (/* binding */ bs),\n/* harmony export */   isNode: () => (/* binding */ pi),\n/* harmony export */   isOnline: () => (/* binding */ Nh),\n/* harmony export */   isProposalStruct: () => (/* binding */ uh),\n/* harmony export */   isReactNative: () => (/* binding */ er),\n/* harmony export */   isRecap: () => (/* binding */ Qi),\n/* harmony export */   isSessionCompatible: () => (/* binding */ sh),\n/* harmony export */   isSessionStruct: () => (/* binding */ hh),\n/* harmony export */   isTypeOneEnvelope: () => (/* binding */ Uu),\n/* harmony export */   isUndefined: () => (/* binding */ Pe),\n/* harmony export */   isValidAccountId: () => (/* binding */ Mo),\n/* harmony export */   isValidAccounts: () => (/* binding */ No),\n/* harmony export */   isValidActions: () => (/* binding */ _o),\n/* harmony export */   isValidArray: () => (/* binding */ Er),\n/* harmony export */   isValidChainId: () => (/* binding */ Sr),\n/* harmony export */   isValidChains: () => (/* binding */ Eo),\n/* harmony export */   isValidController: () => (/* binding */ ch),\n/* harmony export */   isValidEip1271Signature: () => (/* binding */ qf),\n/* harmony export */   isValidEip191Signature: () => (/* binding */ kf),\n/* harmony export */   isValidErrorReason: () => (/* binding */ mh),\n/* harmony export */   isValidEvent: () => (/* binding */ bh),\n/* harmony export */   isValidId: () => (/* binding */ ph),\n/* harmony export */   isValidNamespaceAccounts: () => (/* binding */ Io),\n/* harmony export */   isValidNamespaceActions: () => (/* binding */ en),\n/* harmony export */   isValidNamespaceChains: () => (/* binding */ So),\n/* harmony export */   isValidNamespaceMethodsOrEvents: () => (/* binding */ tn),\n/* harmony export */   isValidNamespaces: () => (/* binding */ Bo),\n/* harmony export */   isValidNamespacesChainId: () => (/* binding */ yh),\n/* harmony export */   isValidNamespacesEvent: () => (/* binding */ xh),\n/* harmony export */   isValidNamespacesRequest: () => (/* binding */ wh),\n/* harmony export */   isValidNumber: () => (/* binding */ Vr),\n/* harmony export */   isValidObject: () => (/* binding */ Yr),\n/* harmony export */   isValidParams: () => (/* binding */ vh),\n/* harmony export */   isValidRecap: () => (/* binding */ me),\n/* harmony export */   isValidRelay: () => (/* binding */ Co),\n/* harmony export */   isValidRelays: () => (/* binding */ dh),\n/* harmony export */   isValidRequest: () => (/* binding */ gh),\n/* harmony export */   isValidRequestExpiry: () => (/* binding */ Sh),\n/* harmony export */   isValidRequiredNamespaces: () => (/* binding */ lh),\n/* harmony export */   isValidResponse: () => (/* binding */ Ah),\n/* harmony export */   isValidString: () => (/* binding */ Gt),\n/* harmony export */   isValidUrl: () => (/* binding */ ah),\n/* harmony export */   mapEntries: () => (/* binding */ hs),\n/* harmony export */   mapToObj: () => (/* binding */ as),\n/* harmony export */   mergeArrays: () => (/* binding */ ge),\n/* harmony export */   mergeEncodedRecaps: () => (/* binding */ Au),\n/* harmony export */   mergeRecaps: () => (/* binding */ Xf),\n/* harmony export */   normalizeNamespaces: () => (/* binding */ $i),\n/* harmony export */   objToMap: () => (/* binding */ us),\n/* harmony export */   parseAccountId: () => (/* binding */ ci),\n/* harmony export */   parseChainId: () => (/* binding */ pn),\n/* harmony export */   parseContextNames: () => (/* binding */ Cn),\n/* harmony export */   parseExpirerTarget: () => (/* binding */ gs),\n/* harmony export */   parseNamespaceKey: () => (/* binding */ bo),\n/* harmony export */   parseRelayParams: () => (/* binding */ ho),\n/* harmony export */   parseTopic: () => (/* binding */ co),\n/* harmony export */   parseUri: () => (/* binding */ Vu),\n/* harmony export */   populateAuthPayload: () => (/* binding */ pu),\n/* harmony export */   recapHasResource: () => (/* binding */ vu),\n/* harmony export */   serialize: () => (/* binding */ io),\n/* harmony export */   subscribeToBrowserNetworkChange: () => (/* binding */ To),\n/* harmony export */   subscribeToNetworkChange: () => (/* binding */ Ih),\n/* harmony export */   subscribeToReactNativeNetworkChange: () => (/* binding */ Uo),\n/* harmony export */   uuidv4: () => (/* binding */ Ms),\n/* harmony export */   validateDecoding: () => (/* binding */ Tu),\n/* harmony export */   validateEncoding: () => (/* binding */ no),\n/* harmony export */   validateSignedCacao: () => (/* binding */ lu),\n/* harmony export */   verifyP256Jwt: () => (/* binding */ Ku),\n/* harmony export */   verifySignature: () => (/* binding */ Uf)\n/* harmony export */ });\n/* harmony import */ var detect_browser__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! detect-browser */ \"(ssr)/./node_modules/detect-browser/es/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/window-getters */ \"(ssr)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/window-metadata */ \"(ssr)/./node_modules/@walletconnect/window-metadata/dist/cjs/index.js\");\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! query-string */ \"(ssr)/./node_modules/query-string/index.js\");\n/* harmony import */ var _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @stablelib/chacha20poly1305 */ \"(ssr)/./node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js\");\n/* harmony import */ var _stablelib_hkdf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @stablelib/hkdf */ \"(ssr)/./node_modules/@stablelib/hkdf/lib/hkdf.js\");\n/* harmony import */ var _stablelib_random__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @stablelib/random */ \"(ssr)/./node_modules/@stablelib/random/lib/random.js\");\n/* harmony import */ var _stablelib_sha256__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @stablelib/sha256 */ \"(ssr)/./node_modules/@stablelib/sha256/lib/sha256.js\");\n/* harmony import */ var _stablelib_x25519__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @stablelib/x25519 */ \"(ssr)/./node_modules/@stablelib/x25519/lib/x25519.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! uint8arrays */ \"(ssr)/./node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(elliptic__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @walletconnect/relay-auth */ \"(ssr)/./node_modules/@walletconnect/relay-auth/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @walletconnect/relay-api */ \"(ssr)/./node_modules/@walletconnect/relay-api/dist/index.es.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Ir = \":\";\nfunction pn(e) {\n    const [t, r] = e.split(Ir);\n    return {\n        namespace: t,\n        reference: r\n    };\n}\nfunction vn(e) {\n    const { namespace: t, reference: r } = e;\n    return [\n        t,\n        r\n    ].join(Ir);\n}\nfunction ci(e) {\n    const [t, r, i] = e.split(Ir);\n    return {\n        namespace: t,\n        reference: r,\n        address: i\n    };\n}\nfunction mn(e) {\n    const { namespace: t, reference: r, address: i } = e;\n    return [\n        t,\n        r,\n        i\n    ].join(Ir);\n}\nfunction li(e, t) {\n    const r = [];\n    return e.forEach((i)=>{\n        const n = t(i);\n        r.includes(n) || r.push(n);\n    }), r;\n}\nfunction gn(e) {\n    const { address: t } = ci(e);\n    return t;\n}\nfunction An(e) {\n    const { namespace: t, reference: r } = ci(e);\n    return vn({\n        namespace: t,\n        reference: r\n    });\n}\nfunction Qo(e, t) {\n    const { namespace: r, reference: i } = pn(t);\n    return mn({\n        namespace: r,\n        reference: i,\n        address: e\n    });\n}\nfunction Jo(e) {\n    return li(e, gn);\n}\nfunction bn(e) {\n    return li(e, An);\n}\nfunction Go(e, t = []) {\n    const r = [];\n    return Object.keys(e).forEach((i)=>{\n        if (t.length && !t.includes(i)) return;\n        const n = e[i];\n        r.push(...n.accounts);\n    }), r;\n}\nfunction Yo(e, t = []) {\n    const r = [];\n    return Object.keys(e).forEach((i)=>{\n        if (t.length && !t.includes(i)) return;\n        const n = e[i];\n        r.push(...bn(n.accounts));\n    }), r;\n}\nfunction Vo(e, t = []) {\n    const r = [];\n    return Object.keys(e).forEach((i)=>{\n        if (t.length && !t.includes(i)) return;\n        const n = e[i];\n        r.push(..._r(i, n));\n    }), r;\n}\nfunction _r(e, t) {\n    return e.includes(\":\") ? [\n        e\n    ] : t.chains || [];\n}\nvar Wo = Object.defineProperty, yn = Object.getOwnPropertySymbols, Xo = Object.prototype.hasOwnProperty, Zo = Object.prototype.propertyIsEnumerable, wn = (e, t, r)=>t in e ? Wo(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[t] = r, xn = (e, t)=>{\n    for(var r in t || (t = {}))Xo.call(t, r) && wn(e, r, t[r]);\n    if (yn) for (var r of yn(t))Zo.call(t, r) && wn(e, r, t[r]);\n    return e;\n};\nconst Mn = \"ReactNative\", qt = {\n    reactNative: \"react-native\",\n    node: \"node\",\n    browser: \"browser\",\n    unknown: \"unknown\"\n}, Br = \" \", $o = \":\", En = \"/\", di = 2, ts = 1e3, Sn = \"js\";\nfunction pi() {\n    return typeof process < \"u\" && typeof process.versions < \"u\" && typeof process.versions.node < \"u\";\n}\nfunction er() {\n    return !(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getNavigator)() && navigator.product === Mn;\n}\nfunction pr() {\n    return !pi() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getNavigator)() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)();\n}\nfunction We() {\n    return er() ? qt.reactNative : pi() ? qt.node : pr() ? qt.browser : qt.unknown;\n}\nfunction es() {\n    var e;\n    try {\n        return er() && typeof global < \"u\" && typeof (global == null ? void 0 : global.Application) < \"u\" ? (e = global.Application) == null ? void 0 : e.applicationId : void 0;\n    } catch  {\n        return;\n    }\n}\nfunction Nn(e, t) {\n    let r = query_string__WEBPACK_IMPORTED_MODULE_3__.parse(e);\n    return r = xn(xn({}, r), t), e = query_string__WEBPACK_IMPORTED_MODULE_3__.stringify(r), e;\n}\nfunction rs() {\n    return (0,_walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_2__.getWindowMetadata)() || {\n        name: \"\",\n        description: \"\",\n        url: \"\",\n        icons: [\n            \"\"\n        ]\n    };\n}\nfunction is(e, t) {\n    var r;\n    const i = We(), n = {\n        protocol: e,\n        version: t,\n        env: i\n    };\n    return i === \"browser\" && (n.host = ((r = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getLocation)()) == null ? void 0 : r.host) || \"unknown\"), n;\n}\nfunction In() {\n    if (We() === qt.reactNative && typeof global < \"u\" && typeof (global == null ? void 0 : global.Platform) < \"u\") {\n        const { OS: r, Version: i } = global.Platform;\n        return [\n            r,\n            i\n        ].join(\"-\");\n    }\n    const e = (0,detect_browser__WEBPACK_IMPORTED_MODULE_13__.detect)();\n    if (e === null) return \"unknown\";\n    const t = e.os ? e.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n    return e.type === \"browser\" ? [\n        t,\n        e.name,\n        e.version\n    ].join(\"-\") : [\n        t,\n        e.version\n    ].join(\"-\");\n}\nfunction _n() {\n    var e;\n    const t = We();\n    return t === qt.browser ? [\n        t,\n        ((e = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getLocation)()) == null ? void 0 : e.host) || \"unknown\"\n    ].join(\":\") : t;\n}\nfunction Bn(e, t, r) {\n    const i = In(), n = _n();\n    return [\n        [\n            e,\n            t\n        ].join(\"-\"),\n        [\n            Sn,\n            r\n        ].join(\"-\"),\n        i,\n        n\n    ].join(\"/\");\n}\nfunction ns({ protocol: e, version: t, relayUrl: r, sdkVersion: i, auth: n, projectId: o, useOnCloseEvent: h, bundleId: p }) {\n    const A = r.split(\"?\"), m = Bn(e, t, i), w = {\n        auth: n,\n        ua: m,\n        projectId: o,\n        useOnCloseEvent: h || void 0,\n        origin: p || void 0\n    }, y = Nn(A[1] || \"\", w);\n    return A[0] + \"?\" + y;\n}\nfunction fs(e) {\n    let t = (e.match(/^[^:]+(?=:\\/\\/)/gi) || [])[0];\n    const r = typeof t < \"u\" ? e.split(\"://\")[1] : e;\n    return t = t === \"wss\" ? \"https\" : \"http\", [\n        t,\n        r\n    ].join(\"://\");\n}\nfunction os(e, t, r) {\n    if (!e[t] || typeof e[t] !== r) throw new Error(`Missing or invalid \"${t}\" param`);\n}\nfunction Cn(e, t = di) {\n    return Rn(e.split(En), t);\n}\nfunction ss(e) {\n    return Cn(e).join(Br);\n}\nfunction _e(e, t) {\n    return e.filter((r)=>t.includes(r)).length === e.length;\n}\nfunction Rn(e, t = di) {\n    return e.slice(Math.max(e.length - t, 0));\n}\nfunction as(e) {\n    return Object.fromEntries(e.entries());\n}\nfunction us(e) {\n    return new Map(Object.entries(e));\n}\nfunction hs(e, t) {\n    const r = {};\n    return Object.keys(e).forEach((i)=>{\n        r[i] = t(e[i]);\n    }), r;\n}\nconst cs = (e)=>e;\nfunction On(e) {\n    return e.trim().replace(/^\\w/, (t)=>t.toUpperCase());\n}\nfunction ls(e) {\n    return e.split(Br).map((t)=>On(t)).join(Br);\n}\nfunction ds(e = _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.FIVE_MINUTES, t) {\n    const r = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(e || _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.FIVE_MINUTES);\n    let i, n, o;\n    return {\n        resolve: (h)=>{\n            o && i && (clearTimeout(o), i(h));\n        },\n        reject: (h)=>{\n            o && n && (clearTimeout(o), n(h));\n        },\n        done: ()=>new Promise((h, p)=>{\n                o = setTimeout(()=>{\n                    p(new Error(t));\n                }, r), i = h, n = p;\n            })\n    };\n}\nfunction ps(e, t, r) {\n    return new Promise(async (i, n)=>{\n        const o = setTimeout(()=>n(new Error(r)), t);\n        try {\n            const h = await e;\n            i(h);\n        } catch (h) {\n            n(h);\n        }\n        clearTimeout(o);\n    });\n}\nfunction vi(e, t) {\n    if (typeof t == \"string\" && t.startsWith(`${e}:`)) return t;\n    if (e.toLowerCase() === \"topic\") {\n        if (typeof t != \"string\") throw new Error('Value must be \"string\" for expirer target type: topic');\n        return `topic:${t}`;\n    } else if (e.toLowerCase() === \"id\") {\n        if (typeof t != \"number\") throw new Error('Value must be \"number\" for expirer target type: id');\n        return `id:${t}`;\n    }\n    throw new Error(`Unknown expirer target type: ${e}`);\n}\nfunction vs(e) {\n    return vi(\"topic\", e);\n}\nfunction ms(e) {\n    return vi(\"id\", e);\n}\nfunction gs(e) {\n    const [t, r] = e.split(\":\"), i = {\n        id: void 0,\n        topic: void 0\n    };\n    if (t === \"topic\" && typeof r == \"string\") i.topic = r;\n    else if (t === \"id\" && Number.isInteger(Number(r))) i.id = Number(r);\n    else throw new Error(`Invalid target, expected id:number or topic:string, got ${t}:${r}`);\n    return i;\n}\nfunction As(e, t) {\n    return (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.fromMiliseconds)((t || Date.now()) + (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(e));\n}\nfunction bs(e) {\n    return Date.now() >= (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(e);\n}\nfunction ys(e, t) {\n    return `${e}${t ? `:${t}` : \"\"}`;\n}\nfunction ge(e = [], t = []) {\n    return [\n        ...new Set([\n            ...e,\n            ...t\n        ])\n    ];\n}\nasync function ws({ id: e, topic: t, wcDeepLink: r }) {\n    try {\n        if (!r) return;\n        const i = typeof r == \"string\" ? JSON.parse(r) : r;\n        let n = i?.href;\n        if (typeof n != \"string\") return;\n        n.endsWith(\"/\") && (n = n.slice(0, -1));\n        const o = `${n}/wc?requestId=${e}&sessionTopic=${t}`, h = We();\n        h === qt.browser ? o.startsWith(\"https://\") || o.startsWith(\"http://\") ? window.open(o, \"_blank\", \"noreferrer noopener\") : window.open(o, \"_self\", \"noreferrer noopener\") : h === qt.reactNative && typeof (global == null ? void 0 : global.Linking) < \"u\" && await global.Linking.openURL(o);\n    } catch (i) {\n        console.error(i);\n    }\n}\nasync function xs(e, t) {\n    try {\n        return await e.getItem(t) || (pr() ? localStorage.getItem(t) : void 0);\n    } catch (r) {\n        console.error(r);\n    }\n}\nfunction mi(e, t) {\n    return e.filter((r)=>t.includes(r));\n}\nfunction Ms() {\n    return typeof crypto < \"u\" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/gu, (e)=>{\n        const t = Math.random() * 16 | 0;\n        return (e === \"x\" ? t : t & 3 | 8).toString(16);\n    });\n}\nvar Pn = typeof globalThis < \"u\" ? globalThis :  false ? 0 : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction Es(e) {\n    var t = e.default;\n    if (typeof t == \"function\") {\n        var r = function() {\n            return t.apply(this, arguments);\n        };\n        r.prototype = t.prototype;\n    } else r = {};\n    return Object.defineProperty(r, \"__esModule\", {\n        value: !0\n    }), Object.keys(e).forEach(function(i) {\n        var n = Object.getOwnPropertyDescriptor(e, i);\n        Object.defineProperty(r, i, n.get ? n : {\n            enumerable: !0,\n            get: function() {\n                return e[i];\n            }\n        });\n    }), r;\n}\nvar Dn = {\n    exports: {}\n}; /**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.8.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */ \n(function(e) {\n    (function() {\n        var t = \"input is invalid type\", r = \"finalize already called\", i = \"undefined\" == \"object\", n = i ? window : {};\n        n.JS_SHA3_NO_WINDOW && (i = !1);\n        var o = !i && typeof self == \"object\", h = !n.JS_SHA3_NO_NODE_JS && typeof process == \"object\" && process.versions && process.versions.node;\n        h ? n = Pn : o && (n = self);\n        var p = !n.JS_SHA3_NO_COMMON_JS && !0 && e.exports, A = !n.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer < \"u\", m = \"0123456789abcdef\".split(\"\"), w = [\n            31,\n            7936,\n            2031616,\n            520093696\n        ], y = [\n            4,\n            1024,\n            262144,\n            67108864\n        ], S = [\n            1,\n            256,\n            65536,\n            16777216\n        ], I = [\n            6,\n            1536,\n            393216,\n            100663296\n        ], N = [\n            0,\n            8,\n            16,\n            24\n        ], C = [\n            1,\n            0,\n            32898,\n            0,\n            32906,\n            2147483648,\n            2147516416,\n            2147483648,\n            32907,\n            0,\n            2147483649,\n            0,\n            2147516545,\n            2147483648,\n            32777,\n            2147483648,\n            138,\n            0,\n            136,\n            0,\n            2147516425,\n            0,\n            2147483658,\n            0,\n            2147516555,\n            0,\n            139,\n            2147483648,\n            32905,\n            2147483648,\n            32771,\n            2147483648,\n            32770,\n            2147483648,\n            128,\n            2147483648,\n            32778,\n            0,\n            2147483658,\n            2147483648,\n            2147516545,\n            2147483648,\n            32896,\n            2147483648,\n            2147483649,\n            0,\n            2147516424,\n            2147483648\n        ], F = [\n            224,\n            256,\n            384,\n            512\n        ], U = [\n            128,\n            256\n        ], J = [\n            \"hex\",\n            \"buffer\",\n            \"arrayBuffer\",\n            \"array\",\n            \"digest\"\n        ], Bt = {\n            128: 168,\n            256: 136\n        };\n        (n.JS_SHA3_NO_NODE_JS || !Array.isArray) && (Array.isArray = function(u) {\n            return Object.prototype.toString.call(u) === \"[object Array]\";\n        }), A && (n.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView) && (ArrayBuffer.isView = function(u) {\n            return typeof u == \"object\" && u.buffer && u.buffer.constructor === ArrayBuffer;\n        });\n        for(var G = function(u, E, _) {\n            return function(B) {\n                return new s(u, E, u).update(B)[_]();\n            };\n        }, H = function(u, E, _) {\n            return function(B, R) {\n                return new s(u, E, R).update(B)[_]();\n            };\n        }, z = function(u, E, _) {\n            return function(B, R, T, P) {\n                return f[\"cshake\" + u].update(B, R, T, P)[_]();\n            };\n        }, Pt = function(u, E, _) {\n            return function(B, R, T, P) {\n                return f[\"kmac\" + u].update(B, R, T, P)[_]();\n            };\n        }, W = function(u, E, _, B) {\n            for(var R = 0; R < J.length; ++R){\n                var T = J[R];\n                u[T] = E(_, B, T);\n            }\n            return u;\n        }, Rt = function(u, E) {\n            var _ = G(u, E, \"hex\");\n            return _.create = function() {\n                return new s(u, E, u);\n            }, _.update = function(B) {\n                return _.create().update(B);\n            }, W(_, G, u, E);\n        }, Yt = function(u, E) {\n            var _ = H(u, E, \"hex\");\n            return _.create = function(B) {\n                return new s(u, E, B);\n            }, _.update = function(B, R) {\n                return _.create(R).update(B);\n            }, W(_, H, u, E);\n        }, Y = function(u, E) {\n            var _ = Bt[u], B = z(u, E, \"hex\");\n            return B.create = function(R, T, P) {\n                return !T && !P ? f[\"shake\" + u].create(R) : new s(u, E, R).bytepad([\n                    T,\n                    P\n                ], _);\n            }, B.update = function(R, T, P, O) {\n                return B.create(T, P, O).update(R);\n            }, W(B, z, u, E);\n        }, Vt = function(u, E) {\n            var _ = Bt[u], B = Pt(u, E, \"hex\");\n            return B.create = function(R, T, P) {\n                return new v(u, E, T).bytepad([\n                    \"KMAC\",\n                    P\n                ], _).bytepad([\n                    R\n                ], _);\n            }, B.update = function(R, T, P, O) {\n                return B.create(R, P, O).update(T);\n            }, W(B, Pt, u, E);\n        }, b = [\n            {\n                name: \"keccak\",\n                padding: S,\n                bits: F,\n                createMethod: Rt\n            },\n            {\n                name: \"sha3\",\n                padding: I,\n                bits: F,\n                createMethod: Rt\n            },\n            {\n                name: \"shake\",\n                padding: w,\n                bits: U,\n                createMethod: Yt\n            },\n            {\n                name: \"cshake\",\n                padding: y,\n                bits: U,\n                createMethod: Y\n            },\n            {\n                name: \"kmac\",\n                padding: y,\n                bits: U,\n                createMethod: Vt\n            }\n        ], f = {}, a = [], c = 0; c < b.length; ++c)for(var d = b[c], g = d.bits, x = 0; x < g.length; ++x){\n            var M = d.name + \"_\" + g[x];\n            if (a.push(M), f[M] = d.createMethod(g[x], d.padding), d.name !== \"sha3\") {\n                var l = d.name + g[x];\n                a.push(l), f[l] = f[M];\n            }\n        }\n        function s(u, E, _) {\n            this.blocks = [], this.s = [], this.padding = E, this.outputBits = _, this.reset = !0, this.finalized = !1, this.block = 0, this.start = 0, this.blockCount = 1600 - (u << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = _ >> 5, this.extraBytes = (_ & 31) >> 3;\n            for(var B = 0; B < 50; ++B)this.s[B] = 0;\n        }\n        s.prototype.update = function(u) {\n            if (this.finalized) throw new Error(r);\n            var E, _ = typeof u;\n            if (_ !== \"string\") {\n                if (_ === \"object\") {\n                    if (u === null) throw new Error(t);\n                    if (A && u.constructor === ArrayBuffer) u = new Uint8Array(u);\n                    else if (!Array.isArray(u) && (!A || !ArrayBuffer.isView(u))) throw new Error(t);\n                } else throw new Error(t);\n                E = !0;\n            }\n            for(var B = this.blocks, R = this.byteCount, T = u.length, P = this.blockCount, O = 0, Ct = this.s, D, q; O < T;){\n                if (this.reset) for(this.reset = !1, B[0] = this.block, D = 1; D < P + 1; ++D)B[D] = 0;\n                if (E) for(D = this.start; O < T && D < R; ++O)B[D >> 2] |= u[O] << N[D++ & 3];\n                else for(D = this.start; O < T && D < R; ++O)q = u.charCodeAt(O), q < 128 ? B[D >> 2] |= q << N[D++ & 3] : q < 2048 ? (B[D >> 2] |= (192 | q >> 6) << N[D++ & 3], B[D >> 2] |= (128 | q & 63) << N[D++ & 3]) : q < 55296 || q >= 57344 ? (B[D >> 2] |= (224 | q >> 12) << N[D++ & 3], B[D >> 2] |= (128 | q >> 6 & 63) << N[D++ & 3], B[D >> 2] |= (128 | q & 63) << N[D++ & 3]) : (q = 65536 + ((q & 1023) << 10 | u.charCodeAt(++O) & 1023), B[D >> 2] |= (240 | q >> 18) << N[D++ & 3], B[D >> 2] |= (128 | q >> 12 & 63) << N[D++ & 3], B[D >> 2] |= (128 | q >> 6 & 63) << N[D++ & 3], B[D >> 2] |= (128 | q & 63) << N[D++ & 3]);\n                if (this.lastByteIndex = D, D >= R) {\n                    for(this.start = D - R, this.block = B[P], D = 0; D < P; ++D)Ct[D] ^= B[D];\n                    k(Ct), this.reset = !0;\n                } else this.start = D;\n            }\n            return this;\n        }, s.prototype.encode = function(u, E) {\n            var _ = u & 255, B = 1, R = [\n                _\n            ];\n            for(u = u >> 8, _ = u & 255; _ > 0;)R.unshift(_), u = u >> 8, _ = u & 255, ++B;\n            return E ? R.push(B) : R.unshift(B), this.update(R), R.length;\n        }, s.prototype.encodeString = function(u) {\n            var E, _ = typeof u;\n            if (_ !== \"string\") {\n                if (_ === \"object\") {\n                    if (u === null) throw new Error(t);\n                    if (A && u.constructor === ArrayBuffer) u = new Uint8Array(u);\n                    else if (!Array.isArray(u) && (!A || !ArrayBuffer.isView(u))) throw new Error(t);\n                } else throw new Error(t);\n                E = !0;\n            }\n            var B = 0, R = u.length;\n            if (E) B = R;\n            else for(var T = 0; T < u.length; ++T){\n                var P = u.charCodeAt(T);\n                P < 128 ? B += 1 : P < 2048 ? B += 2 : P < 55296 || P >= 57344 ? B += 3 : (P = 65536 + ((P & 1023) << 10 | u.charCodeAt(++T) & 1023), B += 4);\n            }\n            return B += this.encode(B * 8), this.update(u), B;\n        }, s.prototype.bytepad = function(u, E) {\n            for(var _ = this.encode(E), B = 0; B < u.length; ++B)_ += this.encodeString(u[B]);\n            var R = E - _ % E, T = [];\n            return T.length = R, this.update(T), this;\n        }, s.prototype.finalize = function() {\n            if (!this.finalized) {\n                this.finalized = !0;\n                var u = this.blocks, E = this.lastByteIndex, _ = this.blockCount, B = this.s;\n                if (u[E >> 2] |= this.padding[E & 3], this.lastByteIndex === this.byteCount) for(u[0] = u[_], E = 1; E < _ + 1; ++E)u[E] = 0;\n                for(u[_ - 1] |= 2147483648, E = 0; E < _; ++E)B[E] ^= u[E];\n                k(B);\n            }\n        }, s.prototype.toString = s.prototype.hex = function() {\n            this.finalize();\n            for(var u = this.blockCount, E = this.s, _ = this.outputBlocks, B = this.extraBytes, R = 0, T = 0, P = \"\", O; T < _;){\n                for(R = 0; R < u && T < _; ++R, ++T)O = E[R], P += m[O >> 4 & 15] + m[O & 15] + m[O >> 12 & 15] + m[O >> 8 & 15] + m[O >> 20 & 15] + m[O >> 16 & 15] + m[O >> 28 & 15] + m[O >> 24 & 15];\n                T % u === 0 && (k(E), R = 0);\n            }\n            return B && (O = E[R], P += m[O >> 4 & 15] + m[O & 15], B > 1 && (P += m[O >> 12 & 15] + m[O >> 8 & 15]), B > 2 && (P += m[O >> 20 & 15] + m[O >> 16 & 15])), P;\n        }, s.prototype.arrayBuffer = function() {\n            this.finalize();\n            var u = this.blockCount, E = this.s, _ = this.outputBlocks, B = this.extraBytes, R = 0, T = 0, P = this.outputBits >> 3, O;\n            B ? O = new ArrayBuffer(_ + 1 << 2) : O = new ArrayBuffer(P);\n            for(var Ct = new Uint32Array(O); T < _;){\n                for(R = 0; R < u && T < _; ++R, ++T)Ct[T] = E[R];\n                T % u === 0 && k(E);\n            }\n            return B && (Ct[R] = E[R], O = O.slice(0, P)), O;\n        }, s.prototype.buffer = s.prototype.arrayBuffer, s.prototype.digest = s.prototype.array = function() {\n            this.finalize();\n            for(var u = this.blockCount, E = this.s, _ = this.outputBlocks, B = this.extraBytes, R = 0, T = 0, P = [], O, Ct; T < _;){\n                for(R = 0; R < u && T < _; ++R, ++T)O = T << 2, Ct = E[R], P[O] = Ct & 255, P[O + 1] = Ct >> 8 & 255, P[O + 2] = Ct >> 16 & 255, P[O + 3] = Ct >> 24 & 255;\n                T % u === 0 && k(E);\n            }\n            return B && (O = T << 2, Ct = E[R], P[O] = Ct & 255, B > 1 && (P[O + 1] = Ct >> 8 & 255), B > 2 && (P[O + 2] = Ct >> 16 & 255)), P;\n        };\n        function v(u, E, _) {\n            s.call(this, u, E, _);\n        }\n        v.prototype = new s, v.prototype.finalize = function() {\n            return this.encode(this.outputBits, !0), s.prototype.finalize.call(this);\n        };\n        var k = function(u) {\n            var E, _, B, R, T, P, O, Ct, D, q, De, X, Z, Fe, $, tt, Te, et, rt, Ue, it, nt, ke, ft, ot, qe, st, at, Ke, ut, ht, He, ct, lt, ze, dt, pt, Le, vt, mt, je, gt, At, Qe, bt, yt, Je, wt, xt, Ge, Mt, Et, Ye, St, Nt, Ve, It, _t, Me, Ee, Se, Ne, Ie;\n            for(B = 0; B < 48; B += 2)R = u[0] ^ u[10] ^ u[20] ^ u[30] ^ u[40], T = u[1] ^ u[11] ^ u[21] ^ u[31] ^ u[41], P = u[2] ^ u[12] ^ u[22] ^ u[32] ^ u[42], O = u[3] ^ u[13] ^ u[23] ^ u[33] ^ u[43], Ct = u[4] ^ u[14] ^ u[24] ^ u[34] ^ u[44], D = u[5] ^ u[15] ^ u[25] ^ u[35] ^ u[45], q = u[6] ^ u[16] ^ u[26] ^ u[36] ^ u[46], De = u[7] ^ u[17] ^ u[27] ^ u[37] ^ u[47], X = u[8] ^ u[18] ^ u[28] ^ u[38] ^ u[48], Z = u[9] ^ u[19] ^ u[29] ^ u[39] ^ u[49], E = X ^ (P << 1 | O >>> 31), _ = Z ^ (O << 1 | P >>> 31), u[0] ^= E, u[1] ^= _, u[10] ^= E, u[11] ^= _, u[20] ^= E, u[21] ^= _, u[30] ^= E, u[31] ^= _, u[40] ^= E, u[41] ^= _, E = R ^ (Ct << 1 | D >>> 31), _ = T ^ (D << 1 | Ct >>> 31), u[2] ^= E, u[3] ^= _, u[12] ^= E, u[13] ^= _, u[22] ^= E, u[23] ^= _, u[32] ^= E, u[33] ^= _, u[42] ^= E, u[43] ^= _, E = P ^ (q << 1 | De >>> 31), _ = O ^ (De << 1 | q >>> 31), u[4] ^= E, u[5] ^= _, u[14] ^= E, u[15] ^= _, u[24] ^= E, u[25] ^= _, u[34] ^= E, u[35] ^= _, u[44] ^= E, u[45] ^= _, E = Ct ^ (X << 1 | Z >>> 31), _ = D ^ (Z << 1 | X >>> 31), u[6] ^= E, u[7] ^= _, u[16] ^= E, u[17] ^= _, u[26] ^= E, u[27] ^= _, u[36] ^= E, u[37] ^= _, u[46] ^= E, u[47] ^= _, E = q ^ (R << 1 | T >>> 31), _ = De ^ (T << 1 | R >>> 31), u[8] ^= E, u[9] ^= _, u[18] ^= E, u[19] ^= _, u[28] ^= E, u[29] ^= _, u[38] ^= E, u[39] ^= _, u[48] ^= E, u[49] ^= _, Fe = u[0], $ = u[1], yt = u[11] << 4 | u[10] >>> 28, Je = u[10] << 4 | u[11] >>> 28, at = u[20] << 3 | u[21] >>> 29, Ke = u[21] << 3 | u[20] >>> 29, Ee = u[31] << 9 | u[30] >>> 23, Se = u[30] << 9 | u[31] >>> 23, gt = u[40] << 18 | u[41] >>> 14, At = u[41] << 18 | u[40] >>> 14, lt = u[2] << 1 | u[3] >>> 31, ze = u[3] << 1 | u[2] >>> 31, tt = u[13] << 12 | u[12] >>> 20, Te = u[12] << 12 | u[13] >>> 20, wt = u[22] << 10 | u[23] >>> 22, xt = u[23] << 10 | u[22] >>> 22, ut = u[33] << 13 | u[32] >>> 19, ht = u[32] << 13 | u[33] >>> 19, Ne = u[42] << 2 | u[43] >>> 30, Ie = u[43] << 2 | u[42] >>> 30, St = u[5] << 30 | u[4] >>> 2, Nt = u[4] << 30 | u[5] >>> 2, dt = u[14] << 6 | u[15] >>> 26, pt = u[15] << 6 | u[14] >>> 26, et = u[25] << 11 | u[24] >>> 21, rt = u[24] << 11 | u[25] >>> 21, Ge = u[34] << 15 | u[35] >>> 17, Mt = u[35] << 15 | u[34] >>> 17, He = u[45] << 29 | u[44] >>> 3, ct = u[44] << 29 | u[45] >>> 3, ft = u[6] << 28 | u[7] >>> 4, ot = u[7] << 28 | u[6] >>> 4, Ve = u[17] << 23 | u[16] >>> 9, It = u[16] << 23 | u[17] >>> 9, Le = u[26] << 25 | u[27] >>> 7, vt = u[27] << 25 | u[26] >>> 7, Ue = u[36] << 21 | u[37] >>> 11, it = u[37] << 21 | u[36] >>> 11, Et = u[47] << 24 | u[46] >>> 8, Ye = u[46] << 24 | u[47] >>> 8, Qe = u[8] << 27 | u[9] >>> 5, bt = u[9] << 27 | u[8] >>> 5, qe = u[18] << 20 | u[19] >>> 12, st = u[19] << 20 | u[18] >>> 12, _t = u[29] << 7 | u[28] >>> 25, Me = u[28] << 7 | u[29] >>> 25, mt = u[38] << 8 | u[39] >>> 24, je = u[39] << 8 | u[38] >>> 24, nt = u[48] << 14 | u[49] >>> 18, ke = u[49] << 14 | u[48] >>> 18, u[0] = Fe ^ ~tt & et, u[1] = $ ^ ~Te & rt, u[10] = ft ^ ~qe & at, u[11] = ot ^ ~st & Ke, u[20] = lt ^ ~dt & Le, u[21] = ze ^ ~pt & vt, u[30] = Qe ^ ~yt & wt, u[31] = bt ^ ~Je & xt, u[40] = St ^ ~Ve & _t, u[41] = Nt ^ ~It & Me, u[2] = tt ^ ~et & Ue, u[3] = Te ^ ~rt & it, u[12] = qe ^ ~at & ut, u[13] = st ^ ~Ke & ht, u[22] = dt ^ ~Le & mt, u[23] = pt ^ ~vt & je, u[32] = yt ^ ~wt & Ge, u[33] = Je ^ ~xt & Mt, u[42] = Ve ^ ~_t & Ee, u[43] = It ^ ~Me & Se, u[4] = et ^ ~Ue & nt, u[5] = rt ^ ~it & ke, u[14] = at ^ ~ut & He, u[15] = Ke ^ ~ht & ct, u[24] = Le ^ ~mt & gt, u[25] = vt ^ ~je & At, u[34] = wt ^ ~Ge & Et, u[35] = xt ^ ~Mt & Ye, u[44] = _t ^ ~Ee & Ne, u[45] = Me ^ ~Se & Ie, u[6] = Ue ^ ~nt & Fe, u[7] = it ^ ~ke & $, u[16] = ut ^ ~He & ft, u[17] = ht ^ ~ct & ot, u[26] = mt ^ ~gt & lt, u[27] = je ^ ~At & ze, u[36] = Ge ^ ~Et & Qe, u[37] = Mt ^ ~Ye & bt, u[46] = Ee ^ ~Ne & St, u[47] = Se ^ ~Ie & Nt, u[8] = nt ^ ~Fe & tt, u[9] = ke ^ ~$ & Te, u[18] = He ^ ~ft & qe, u[19] = ct ^ ~ot & st, u[28] = gt ^ ~lt & dt, u[29] = At ^ ~ze & pt, u[38] = Et ^ ~Qe & yt, u[39] = Ye ^ ~bt & Je, u[48] = Ne ^ ~St & Ve, u[49] = Ie ^ ~Nt & It, u[0] ^= C[B], u[1] ^= C[B + 1];\n        };\n        if (p) e.exports = f;\n        else for(c = 0; c < a.length; ++c)n[a[c]] = f[a[c]];\n    })();\n})(Dn);\nvar Ss = Dn.exports;\nconst Ns = \"logger/5.7.0\";\nlet Fn = !1, Tn = !1;\nconst Cr = {\n    debug: 1,\n    default: 2,\n    info: 2,\n    warning: 3,\n    error: 4,\n    off: 5\n};\nlet Un = Cr.default, gi = null;\nfunction Is() {\n    try {\n        const e = [];\n        if ([\n            \"NFD\",\n            \"NFC\",\n            \"NFKD\",\n            \"NFKC\"\n        ].forEach((t)=>{\n            try {\n                if (\"test\".normalize(t) !== \"test\") throw new Error(\"bad normalize\");\n            } catch  {\n                e.push(t);\n            }\n        }), e.length) throw new Error(\"missing \" + e.join(\", \"));\n        if (String.fromCharCode(233).normalize(\"NFD\") !== String.fromCharCode(101, 769)) throw new Error(\"broken implementation\");\n    } catch (e) {\n        return e.message;\n    }\n    return null;\n}\nconst kn = Is();\nvar Ai;\n(function(e) {\n    e.DEBUG = \"DEBUG\", e.INFO = \"INFO\", e.WARNING = \"WARNING\", e.ERROR = \"ERROR\", e.OFF = \"OFF\";\n})(Ai || (Ai = {}));\nvar re;\n(function(e) {\n    e.UNKNOWN_ERROR = \"UNKNOWN_ERROR\", e.NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\", e.UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\", e.NETWORK_ERROR = \"NETWORK_ERROR\", e.SERVER_ERROR = \"SERVER_ERROR\", e.TIMEOUT = \"TIMEOUT\", e.BUFFER_OVERRUN = \"BUFFER_OVERRUN\", e.NUMERIC_FAULT = \"NUMERIC_FAULT\", e.MISSING_NEW = \"MISSING_NEW\", e.INVALID_ARGUMENT = \"INVALID_ARGUMENT\", e.MISSING_ARGUMENT = \"MISSING_ARGUMENT\", e.UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\", e.CALL_EXCEPTION = \"CALL_EXCEPTION\", e.INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\", e.NONCE_EXPIRED = \"NONCE_EXPIRED\", e.REPLACEMENT_UNDERPRICED = \"REPLACEMENT_UNDERPRICED\", e.UNPREDICTABLE_GAS_LIMIT = \"UNPREDICTABLE_GAS_LIMIT\", e.TRANSACTION_REPLACED = \"TRANSACTION_REPLACED\", e.ACTION_REJECTED = \"ACTION_REJECTED\";\n})(re || (re = {}));\nconst qn = \"0123456789abcdef\";\nclass L {\n    constructor(t){\n        Object.defineProperty(this, \"version\", {\n            enumerable: !0,\n            value: t,\n            writable: !1\n        });\n    }\n    _log(t, r) {\n        const i = t.toLowerCase();\n        Cr[i] == null && this.throwArgumentError(\"invalid log level name\", \"logLevel\", t), !(Un > Cr[i]) && console.log.apply(console, r);\n    }\n    debug(...t) {\n        this._log(L.levels.DEBUG, t);\n    }\n    info(...t) {\n        this._log(L.levels.INFO, t);\n    }\n    warn(...t) {\n        this._log(L.levels.WARNING, t);\n    }\n    makeError(t, r, i) {\n        if (Tn) return this.makeError(\"censored error\", r, {});\n        r || (r = L.errors.UNKNOWN_ERROR), i || (i = {});\n        const n = [];\n        Object.keys(i).forEach((A)=>{\n            const m = i[A];\n            try {\n                if (m instanceof Uint8Array) {\n                    let w = \"\";\n                    for(let y = 0; y < m.length; y++)w += qn[m[y] >> 4], w += qn[m[y] & 15];\n                    n.push(A + \"=Uint8Array(0x\" + w + \")\");\n                } else n.push(A + \"=\" + JSON.stringify(m));\n            } catch  {\n                n.push(A + \"=\" + JSON.stringify(i[A].toString()));\n            }\n        }), n.push(`code=${r}`), n.push(`version=${this.version}`);\n        const o = t;\n        let h = \"\";\n        switch(r){\n            case re.NUMERIC_FAULT:\n                {\n                    h = \"NUMERIC_FAULT\";\n                    const A = t;\n                    switch(A){\n                        case \"overflow\":\n                        case \"underflow\":\n                        case \"division-by-zero\":\n                            h += \"-\" + A;\n                            break;\n                        case \"negative-power\":\n                        case \"negative-width\":\n                            h += \"-unsupported\";\n                            break;\n                        case \"unbound-bitwise-result\":\n                            h += \"-unbound-result\";\n                            break;\n                    }\n                    break;\n                }\n            case re.CALL_EXCEPTION:\n            case re.INSUFFICIENT_FUNDS:\n            case re.MISSING_NEW:\n            case re.NONCE_EXPIRED:\n            case re.REPLACEMENT_UNDERPRICED:\n            case re.TRANSACTION_REPLACED:\n            case re.UNPREDICTABLE_GAS_LIMIT:\n                h = r;\n                break;\n        }\n        h && (t += \" [ See: https://links.ethers.org/v5-errors-\" + h + \" ]\"), n.length && (t += \" (\" + n.join(\", \") + \")\");\n        const p = new Error(t);\n        return p.reason = o, p.code = r, Object.keys(i).forEach(function(A) {\n            p[A] = i[A];\n        }), p;\n    }\n    throwError(t, r, i) {\n        throw this.makeError(t, r, i);\n    }\n    throwArgumentError(t, r, i) {\n        return this.throwError(t, L.errors.INVALID_ARGUMENT, {\n            argument: r,\n            value: i\n        });\n    }\n    assert(t, r, i, n) {\n        t || this.throwError(r, i, n);\n    }\n    assertArgument(t, r, i, n) {\n        t || this.throwArgumentError(r, i, n);\n    }\n    checkNormalize(t) {\n        kn && this.throwError(\"platform missing String.prototype.normalize\", L.errors.UNSUPPORTED_OPERATION, {\n            operation: \"String.prototype.normalize\",\n            form: kn\n        });\n    }\n    checkSafeUint53(t, r) {\n        typeof t == \"number\" && (r == null && (r = \"value not safe\"), (t < 0 || t >= 9007199254740991) && this.throwError(r, L.errors.NUMERIC_FAULT, {\n            operation: \"checkSafeInteger\",\n            fault: \"out-of-safe-range\",\n            value: t\n        }), t % 1 && this.throwError(r, L.errors.NUMERIC_FAULT, {\n            operation: \"checkSafeInteger\",\n            fault: \"non-integer\",\n            value: t\n        }));\n    }\n    checkArgumentCount(t, r, i) {\n        i ? i = \": \" + i : i = \"\", t < r && this.throwError(\"missing argument\" + i, L.errors.MISSING_ARGUMENT, {\n            count: t,\n            expectedCount: r\n        }), t > r && this.throwError(\"too many arguments\" + i, L.errors.UNEXPECTED_ARGUMENT, {\n            count: t,\n            expectedCount: r\n        });\n    }\n    checkNew(t, r) {\n        (t === Object || t == null) && this.throwError(\"missing new\", L.errors.MISSING_NEW, {\n            name: r.name\n        });\n    }\n    checkAbstract(t, r) {\n        t === r ? this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(r.name) + \" directly; use a sub-class\", L.errors.UNSUPPORTED_OPERATION, {\n            name: t.name,\n            operation: \"new\"\n        }) : (t === Object || t == null) && this.throwError(\"missing new\", L.errors.MISSING_NEW, {\n            name: r.name\n        });\n    }\n    static globalLogger() {\n        return gi || (gi = new L(Ns)), gi;\n    }\n    static setCensorship(t, r) {\n        if (!t && r && this.globalLogger().throwError(\"cannot permanently disable censorship\", L.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setCensorship\"\n        }), Fn) {\n            if (!t) return;\n            this.globalLogger().throwError(\"error censorship permanent\", L.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        Tn = !!t, Fn = !!r;\n    }\n    static setLogLevel(t) {\n        const r = Cr[t.toLowerCase()];\n        if (r == null) {\n            L.globalLogger().warn(\"invalid log level - \" + t);\n            return;\n        }\n        Un = r;\n    }\n    static from(t) {\n        return new L(t);\n    }\n}\nL.errors = re, L.levels = Ai;\nconst _s = \"bytes/5.7.0\", Dt = new L(_s);\nfunction Kn(e) {\n    return !!e.toHexString;\n}\nfunction rr(e) {\n    return e.slice || (e.slice = function() {\n        const t = Array.prototype.slice.call(arguments);\n        return rr(new Uint8Array(Array.prototype.slice.apply(e, t)));\n    }), e;\n}\nfunction Bs(e) {\n    return Qt(e) && !(e.length % 2) || ir(e);\n}\nfunction Hn(e) {\n    return typeof e == \"number\" && e == e && e % 1 === 0;\n}\nfunction ir(e) {\n    if (e == null) return !1;\n    if (e.constructor === Uint8Array) return !0;\n    if (typeof e == \"string\" || !Hn(e.length) || e.length < 0) return !1;\n    for(let t = 0; t < e.length; t++){\n        const r = e[t];\n        if (!Hn(r) || r < 0 || r >= 256) return !1;\n    }\n    return !0;\n}\nfunction Ot(e, t) {\n    if (t || (t = {}), typeof e == \"number\") {\n        Dt.checkSafeUint53(e, \"invalid arrayify value\");\n        const r = [];\n        for(; e;)r.unshift(e & 255), e = parseInt(String(e / 256));\n        return r.length === 0 && r.push(0), rr(new Uint8Array(r));\n    }\n    if (t.allowMissingPrefix && typeof e == \"string\" && e.substring(0, 2) !== \"0x\" && (e = \"0x\" + e), Kn(e) && (e = e.toHexString()), Qt(e)) {\n        let r = e.substring(2);\n        r.length % 2 && (t.hexPad === \"left\" ? r = \"0\" + r : t.hexPad === \"right\" ? r += \"0\" : Dt.throwArgumentError(\"hex data is odd-length\", \"value\", e));\n        const i = [];\n        for(let n = 0; n < r.length; n += 2)i.push(parseInt(r.substring(n, n + 2), 16));\n        return rr(new Uint8Array(i));\n    }\n    return ir(e) ? rr(new Uint8Array(e)) : Dt.throwArgumentError(\"invalid arrayify value\", \"value\", e);\n}\nfunction Cs(e) {\n    const t = e.map((n)=>Ot(n)), r = t.reduce((n, o)=>n + o.length, 0), i = new Uint8Array(r);\n    return t.reduce((n, o)=>(i.set(o, n), n + o.length), 0), rr(i);\n}\nfunction Rs(e, t) {\n    e = Ot(e), e.length > t && Dt.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    const r = new Uint8Array(t);\n    return r.set(e, t - e.length), rr(r);\n}\nfunction Qt(e, t) {\n    return !(typeof e != \"string\" || !e.match(/^0x[0-9A-Fa-f]*$/) || t && e.length !== 2 + 2 * t);\n}\nconst bi = \"0123456789abcdef\";\nfunction Kt(e, t) {\n    if (t || (t = {}), typeof e == \"number\") {\n        Dt.checkSafeUint53(e, \"invalid hexlify value\");\n        let r = \"\";\n        for(; e;)r = bi[e & 15] + r, e = Math.floor(e / 16);\n        return r.length ? (r.length % 2 && (r = \"0\" + r), \"0x\" + r) : \"0x00\";\n    }\n    if (typeof e == \"bigint\") return e = e.toString(16), e.length % 2 ? \"0x0\" + e : \"0x\" + e;\n    if (t.allowMissingPrefix && typeof e == \"string\" && e.substring(0, 2) !== \"0x\" && (e = \"0x\" + e), Kn(e)) return e.toHexString();\n    if (Qt(e)) return e.length % 2 && (t.hexPad === \"left\" ? e = \"0x0\" + e.substring(2) : t.hexPad === \"right\" ? e += \"0\" : Dt.throwArgumentError(\"hex data is odd-length\", \"value\", e)), e.toLowerCase();\n    if (ir(e)) {\n        let r = \"0x\";\n        for(let i = 0; i < e.length; i++){\n            let n = e[i];\n            r += bi[(n & 240) >> 4] + bi[n & 15];\n        }\n        return r;\n    }\n    return Dt.throwArgumentError(\"invalid hexlify value\", \"value\", e);\n}\nfunction Os(e) {\n    if (typeof e != \"string\") e = Kt(e);\n    else if (!Qt(e) || e.length % 2) return null;\n    return (e.length - 2) / 2;\n}\nfunction zn(e, t, r) {\n    return typeof e != \"string\" ? e = Kt(e) : (!Qt(e) || e.length % 2) && Dt.throwArgumentError(\"invalid hexData\", \"value\", e), t = 2 + 2 * t, r != null ? \"0x\" + e.substring(t, 2 + 2 * r) : \"0x\" + e.substring(t);\n}\nfunction oe(e, t) {\n    for(typeof e != \"string\" ? e = Kt(e) : Qt(e) || Dt.throwArgumentError(\"invalid hex string\", \"value\", e), e.length > 2 * t + 2 && Dt.throwArgumentError(\"value out of range\", \"value\", arguments[1]); e.length < 2 * t + 2;)e = \"0x0\" + e.substring(2);\n    return e;\n}\nfunction Ln(e) {\n    const t = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (Bs(e)) {\n        let r = Ot(e);\n        r.length === 64 ? (t.v = 27 + (r[32] >> 7), r[32] &= 127, t.r = Kt(r.slice(0, 32)), t.s = Kt(r.slice(32, 64))) : r.length === 65 ? (t.r = Kt(r.slice(0, 32)), t.s = Kt(r.slice(32, 64)), t.v = r[64]) : Dt.throwArgumentError(\"invalid signature string\", \"signature\", e), t.v < 27 && (t.v === 0 || t.v === 1 ? t.v += 27 : Dt.throwArgumentError(\"signature invalid v byte\", \"signature\", e)), t.recoveryParam = 1 - t.v % 2, t.recoveryParam && (r[32] |= 128), t._vs = Kt(r.slice(32, 64));\n    } else {\n        if (t.r = e.r, t.s = e.s, t.v = e.v, t.recoveryParam = e.recoveryParam, t._vs = e._vs, t._vs != null) {\n            const n = Rs(Ot(t._vs), 32);\n            t._vs = Kt(n);\n            const o = n[0] >= 128 ? 1 : 0;\n            t.recoveryParam == null ? t.recoveryParam = o : t.recoveryParam !== o && Dt.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", e), n[0] &= 127;\n            const h = Kt(n);\n            t.s == null ? t.s = h : t.s !== h && Dt.throwArgumentError(\"signature v mismatch _vs\", \"signature\", e);\n        }\n        if (t.recoveryParam == null) t.v == null ? Dt.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", e) : t.v === 0 || t.v === 1 ? t.recoveryParam = t.v : t.recoveryParam = 1 - t.v % 2;\n        else if (t.v == null) t.v = 27 + t.recoveryParam;\n        else {\n            const n = t.v === 0 || t.v === 1 ? t.v : 1 - t.v % 2;\n            t.recoveryParam !== n && Dt.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", e);\n        }\n        t.r == null || !Qt(t.r) ? Dt.throwArgumentError(\"signature missing or invalid r\", \"signature\", e) : t.r = oe(t.r, 32), t.s == null || !Qt(t.s) ? Dt.throwArgumentError(\"signature missing or invalid s\", \"signature\", e) : t.s = oe(t.s, 32);\n        const r = Ot(t.s);\n        r[0] >= 128 && Dt.throwArgumentError(\"signature s out of range\", \"signature\", e), t.recoveryParam && (r[0] |= 128);\n        const i = Kt(r);\n        t._vs && (Qt(t._vs) || Dt.throwArgumentError(\"signature invalid _vs\", \"signature\", e), t._vs = oe(t._vs, 32)), t._vs == null ? t._vs = i : t._vs !== i && Dt.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", e);\n    }\n    return t.yParityAndS = t._vs, t.compact = t.r + t.yParityAndS.substring(2), t;\n}\nfunction yi(e) {\n    return \"0x\" + Ss.keccak_256(Ot(e));\n}\nvar jn = {\n    exports: {}\n}, Ps = {}, Ds = Object.freeze({\n    __proto__: null,\n    default: Ps\n}), Fs = Es(Ds);\n(function(e) {\n    (function(t, r) {\n        function i(b, f) {\n            if (!b) throw new Error(f || \"Assertion failed\");\n        }\n        function n(b, f) {\n            b.super_ = f;\n            var a = function() {};\n            a.prototype = f.prototype, b.prototype = new a, b.prototype.constructor = b;\n        }\n        function o(b, f, a) {\n            if (o.isBN(b)) return b;\n            this.negative = 0, this.words = null, this.length = 0, this.red = null, b !== null && ((f === \"le\" || f === \"be\") && (a = f, f = 10), this._init(b || 0, f || 10, a || \"be\"));\n        }\n        typeof t == \"object\" ? t.exports = o : r.BN = o, o.BN = o, o.wordSize = 26;\n        var h;\n        try {\n             false ? 0 : h = Fs.Buffer;\n        } catch  {}\n        o.isBN = function(f) {\n            return f instanceof o ? !0 : f !== null && typeof f == \"object\" && f.constructor.wordSize === o.wordSize && Array.isArray(f.words);\n        }, o.max = function(f, a) {\n            return f.cmp(a) > 0 ? f : a;\n        }, o.min = function(f, a) {\n            return f.cmp(a) < 0 ? f : a;\n        }, o.prototype._init = function(f, a, c) {\n            if (typeof f == \"number\") return this._initNumber(f, a, c);\n            if (typeof f == \"object\") return this._initArray(f, a, c);\n            a === \"hex\" && (a = 16), i(a === (a | 0) && a >= 2 && a <= 36), f = f.toString().replace(/\\s+/g, \"\");\n            var d = 0;\n            f[0] === \"-\" && (d++, this.negative = 1), d < f.length && (a === 16 ? this._parseHex(f, d, c) : (this._parseBase(f, a, d), c === \"le\" && this._initArray(this.toArray(), a, c)));\n        }, o.prototype._initNumber = function(f, a, c) {\n            f < 0 && (this.negative = 1, f = -f), f < 67108864 ? (this.words = [\n                f & 67108863\n            ], this.length = 1) : f < 4503599627370496 ? (this.words = [\n                f & 67108863,\n                f / 67108864 & 67108863\n            ], this.length = 2) : (i(f < 9007199254740992), this.words = [\n                f & 67108863,\n                f / 67108864 & 67108863,\n                1\n            ], this.length = 3), c === \"le\" && this._initArray(this.toArray(), a, c);\n        }, o.prototype._initArray = function(f, a, c) {\n            if (i(typeof f.length == \"number\"), f.length <= 0) return this.words = [\n                0\n            ], this.length = 1, this;\n            this.length = Math.ceil(f.length / 3), this.words = new Array(this.length);\n            for(var d = 0; d < this.length; d++)this.words[d] = 0;\n            var g, x, M = 0;\n            if (c === \"be\") for(d = f.length - 1, g = 0; d >= 0; d -= 3)x = f[d] | f[d - 1] << 8 | f[d - 2] << 16, this.words[g] |= x << M & 67108863, this.words[g + 1] = x >>> 26 - M & 67108863, M += 24, M >= 26 && (M -= 26, g++);\n            else if (c === \"le\") for(d = 0, g = 0; d < f.length; d += 3)x = f[d] | f[d + 1] << 8 | f[d + 2] << 16, this.words[g] |= x << M & 67108863, this.words[g + 1] = x >>> 26 - M & 67108863, M += 24, M >= 26 && (M -= 26, g++);\n            return this._strip();\n        };\n        function p(b, f) {\n            var a = b.charCodeAt(f);\n            if (a >= 48 && a <= 57) return a - 48;\n            if (a >= 65 && a <= 70) return a - 55;\n            if (a >= 97 && a <= 102) return a - 87;\n            i(!1, \"Invalid character in \" + b);\n        }\n        function A(b, f, a) {\n            var c = p(b, a);\n            return a - 1 >= f && (c |= p(b, a - 1) << 4), c;\n        }\n        o.prototype._parseHex = function(f, a, c) {\n            this.length = Math.ceil((f.length - a) / 6), this.words = new Array(this.length);\n            for(var d = 0; d < this.length; d++)this.words[d] = 0;\n            var g = 0, x = 0, M;\n            if (c === \"be\") for(d = f.length - 1; d >= a; d -= 2)M = A(f, a, d) << g, this.words[x] |= M & 67108863, g >= 18 ? (g -= 18, x += 1, this.words[x] |= M >>> 26) : g += 8;\n            else {\n                var l = f.length - a;\n                for(d = l % 2 === 0 ? a + 1 : a; d < f.length; d += 2)M = A(f, a, d) << g, this.words[x] |= M & 67108863, g >= 18 ? (g -= 18, x += 1, this.words[x] |= M >>> 26) : g += 8;\n            }\n            this._strip();\n        };\n        function m(b, f, a, c) {\n            for(var d = 0, g = 0, x = Math.min(b.length, a), M = f; M < x; M++){\n                var l = b.charCodeAt(M) - 48;\n                d *= c, l >= 49 ? g = l - 49 + 10 : l >= 17 ? g = l - 17 + 10 : g = l, i(l >= 0 && g < c, \"Invalid character\"), d += g;\n            }\n            return d;\n        }\n        o.prototype._parseBase = function(f, a, c) {\n            this.words = [\n                0\n            ], this.length = 1;\n            for(var d = 0, g = 1; g <= 67108863; g *= a)d++;\n            d--, g = g / a | 0;\n            for(var x = f.length - c, M = x % d, l = Math.min(x, x - M) + c, s = 0, v = c; v < l; v += d)s = m(f, v, v + d, a), this.imuln(g), this.words[0] + s < 67108864 ? this.words[0] += s : this._iaddn(s);\n            if (M !== 0) {\n                var k = 1;\n                for(s = m(f, v, f.length, a), v = 0; v < M; v++)k *= a;\n                this.imuln(k), this.words[0] + s < 67108864 ? this.words[0] += s : this._iaddn(s);\n            }\n            this._strip();\n        }, o.prototype.copy = function(f) {\n            f.words = new Array(this.length);\n            for(var a = 0; a < this.length; a++)f.words[a] = this.words[a];\n            f.length = this.length, f.negative = this.negative, f.red = this.red;\n        };\n        function w(b, f) {\n            b.words = f.words, b.length = f.length, b.negative = f.negative, b.red = f.red;\n        }\n        if (o.prototype._move = function(f) {\n            w(f, this);\n        }, o.prototype.clone = function() {\n            var f = new o(null);\n            return this.copy(f), f;\n        }, o.prototype._expand = function(f) {\n            for(; this.length < f;)this.words[this.length++] = 0;\n            return this;\n        }, o.prototype._strip = function() {\n            for(; this.length > 1 && this.words[this.length - 1] === 0;)this.length--;\n            return this._normSign();\n        }, o.prototype._normSign = function() {\n            return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;\n        }, typeof Symbol < \"u\" && typeof Symbol.for == \"function\") try {\n            o.prototype[Symbol.for(\"nodejs.util.inspect.custom\")] = y;\n        } catch  {\n            o.prototype.inspect = y;\n        }\n        else o.prototype.inspect = y;\n        function y() {\n            return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n        }\n        var S = [\n            \"\",\n            \"0\",\n            \"00\",\n            \"000\",\n            \"0000\",\n            \"00000\",\n            \"000000\",\n            \"0000000\",\n            \"00000000\",\n            \"000000000\",\n            \"0000000000\",\n            \"00000000000\",\n            \"000000000000\",\n            \"0000000000000\",\n            \"00000000000000\",\n            \"000000000000000\",\n            \"0000000000000000\",\n            \"00000000000000000\",\n            \"000000000000000000\",\n            \"0000000000000000000\",\n            \"00000000000000000000\",\n            \"000000000000000000000\",\n            \"0000000000000000000000\",\n            \"00000000000000000000000\",\n            \"000000000000000000000000\",\n            \"0000000000000000000000000\"\n        ], I = [\n            0,\n            0,\n            25,\n            16,\n            12,\n            11,\n            10,\n            9,\n            8,\n            8,\n            7,\n            7,\n            7,\n            7,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5\n        ], N = [\n            0,\n            0,\n            33554432,\n            43046721,\n            16777216,\n            48828125,\n            60466176,\n            40353607,\n            16777216,\n            43046721,\n            1e7,\n            19487171,\n            35831808,\n            62748517,\n            7529536,\n            11390625,\n            16777216,\n            24137569,\n            34012224,\n            47045881,\n            64e6,\n            4084101,\n            5153632,\n            6436343,\n            7962624,\n            9765625,\n            11881376,\n            14348907,\n            17210368,\n            20511149,\n            243e5,\n            28629151,\n            33554432,\n            39135393,\n            45435424,\n            52521875,\n            60466176\n        ];\n        o.prototype.toString = function(f, a) {\n            f = f || 10, a = a | 0 || 1;\n            var c;\n            if (f === 16 || f === \"hex\") {\n                c = \"\";\n                for(var d = 0, g = 0, x = 0; x < this.length; x++){\n                    var M = this.words[x], l = ((M << d | g) & 16777215).toString(16);\n                    g = M >>> 24 - d & 16777215, d += 2, d >= 26 && (d -= 26, x--), g !== 0 || x !== this.length - 1 ? c = S[6 - l.length] + l + c : c = l + c;\n                }\n                for(g !== 0 && (c = g.toString(16) + c); c.length % a !== 0;)c = \"0\" + c;\n                return this.negative !== 0 && (c = \"-\" + c), c;\n            }\n            if (f === (f | 0) && f >= 2 && f <= 36) {\n                var s = I[f], v = N[f];\n                c = \"\";\n                var k = this.clone();\n                for(k.negative = 0; !k.isZero();){\n                    var u = k.modrn(v).toString(f);\n                    k = k.idivn(v), k.isZero() ? c = u + c : c = S[s - u.length] + u + c;\n                }\n                for(this.isZero() && (c = \"0\" + c); c.length % a !== 0;)c = \"0\" + c;\n                return this.negative !== 0 && (c = \"-\" + c), c;\n            }\n            i(!1, \"Base should be between 2 and 36\");\n        }, o.prototype.toNumber = function() {\n            var f = this.words[0];\n            return this.length === 2 ? f += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? f += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && i(!1, \"Number can only safely store up to 53 bits\"), this.negative !== 0 ? -f : f;\n        }, o.prototype.toJSON = function() {\n            return this.toString(16, 2);\n        }, h && (o.prototype.toBuffer = function(f, a) {\n            return this.toArrayLike(h, f, a);\n        }), o.prototype.toArray = function(f, a) {\n            return this.toArrayLike(Array, f, a);\n        };\n        var C = function(f, a) {\n            return f.allocUnsafe ? f.allocUnsafe(a) : new f(a);\n        };\n        o.prototype.toArrayLike = function(f, a, c) {\n            this._strip();\n            var d = this.byteLength(), g = c || Math.max(1, d);\n            i(d <= g, \"byte array longer than desired length\"), i(g > 0, \"Requested array length <= 0\");\n            var x = C(f, g), M = a === \"le\" ? \"LE\" : \"BE\";\n            return this[\"_toArrayLike\" + M](x, d), x;\n        }, o.prototype._toArrayLikeLE = function(f, a) {\n            for(var c = 0, d = 0, g = 0, x = 0; g < this.length; g++){\n                var M = this.words[g] << x | d;\n                f[c++] = M & 255, c < f.length && (f[c++] = M >> 8 & 255), c < f.length && (f[c++] = M >> 16 & 255), x === 6 ? (c < f.length && (f[c++] = M >> 24 & 255), d = 0, x = 0) : (d = M >>> 24, x += 2);\n            }\n            if (c < f.length) for(f[c++] = d; c < f.length;)f[c++] = 0;\n        }, o.prototype._toArrayLikeBE = function(f, a) {\n            for(var c = f.length - 1, d = 0, g = 0, x = 0; g < this.length; g++){\n                var M = this.words[g] << x | d;\n                f[c--] = M & 255, c >= 0 && (f[c--] = M >> 8 & 255), c >= 0 && (f[c--] = M >> 16 & 255), x === 6 ? (c >= 0 && (f[c--] = M >> 24 & 255), d = 0, x = 0) : (d = M >>> 24, x += 2);\n            }\n            if (c >= 0) for(f[c--] = d; c >= 0;)f[c--] = 0;\n        }, Math.clz32 ? o.prototype._countBits = function(f) {\n            return 32 - Math.clz32(f);\n        } : o.prototype._countBits = function(f) {\n            var a = f, c = 0;\n            return a >= 4096 && (c += 13, a >>>= 13), a >= 64 && (c += 7, a >>>= 7), a >= 8 && (c += 4, a >>>= 4), a >= 2 && (c += 2, a >>>= 2), c + a;\n        }, o.prototype._zeroBits = function(f) {\n            if (f === 0) return 26;\n            var a = f, c = 0;\n            return a & 8191 || (c += 13, a >>>= 13), a & 127 || (c += 7, a >>>= 7), a & 15 || (c += 4, a >>>= 4), a & 3 || (c += 2, a >>>= 2), a & 1 || c++, c;\n        }, o.prototype.bitLength = function() {\n            var f = this.words[this.length - 1], a = this._countBits(f);\n            return (this.length - 1) * 26 + a;\n        };\n        function F(b) {\n            for(var f = new Array(b.bitLength()), a = 0; a < f.length; a++){\n                var c = a / 26 | 0, d = a % 26;\n                f[a] = b.words[c] >>> d & 1;\n            }\n            return f;\n        }\n        o.prototype.zeroBits = function() {\n            if (this.isZero()) return 0;\n            for(var f = 0, a = 0; a < this.length; a++){\n                var c = this._zeroBits(this.words[a]);\n                if (f += c, c !== 26) break;\n            }\n            return f;\n        }, o.prototype.byteLength = function() {\n            return Math.ceil(this.bitLength() / 8);\n        }, o.prototype.toTwos = function(f) {\n            return this.negative !== 0 ? this.abs().inotn(f).iaddn(1) : this.clone();\n        }, o.prototype.fromTwos = function(f) {\n            return this.testn(f - 1) ? this.notn(f).iaddn(1).ineg() : this.clone();\n        }, o.prototype.isNeg = function() {\n            return this.negative !== 0;\n        }, o.prototype.neg = function() {\n            return this.clone().ineg();\n        }, o.prototype.ineg = function() {\n            return this.isZero() || (this.negative ^= 1), this;\n        }, o.prototype.iuor = function(f) {\n            for(; this.length < f.length;)this.words[this.length++] = 0;\n            for(var a = 0; a < f.length; a++)this.words[a] = this.words[a] | f.words[a];\n            return this._strip();\n        }, o.prototype.ior = function(f) {\n            return i((this.negative | f.negative) === 0), this.iuor(f);\n        }, o.prototype.or = function(f) {\n            return this.length > f.length ? this.clone().ior(f) : f.clone().ior(this);\n        }, o.prototype.uor = function(f) {\n            return this.length > f.length ? this.clone().iuor(f) : f.clone().iuor(this);\n        }, o.prototype.iuand = function(f) {\n            var a;\n            this.length > f.length ? a = f : a = this;\n            for(var c = 0; c < a.length; c++)this.words[c] = this.words[c] & f.words[c];\n            return this.length = a.length, this._strip();\n        }, o.prototype.iand = function(f) {\n            return i((this.negative | f.negative) === 0), this.iuand(f);\n        }, o.prototype.and = function(f) {\n            return this.length > f.length ? this.clone().iand(f) : f.clone().iand(this);\n        }, o.prototype.uand = function(f) {\n            return this.length > f.length ? this.clone().iuand(f) : f.clone().iuand(this);\n        }, o.prototype.iuxor = function(f) {\n            var a, c;\n            this.length > f.length ? (a = this, c = f) : (a = f, c = this);\n            for(var d = 0; d < c.length; d++)this.words[d] = a.words[d] ^ c.words[d];\n            if (this !== a) for(; d < a.length; d++)this.words[d] = a.words[d];\n            return this.length = a.length, this._strip();\n        }, o.prototype.ixor = function(f) {\n            return i((this.negative | f.negative) === 0), this.iuxor(f);\n        }, o.prototype.xor = function(f) {\n            return this.length > f.length ? this.clone().ixor(f) : f.clone().ixor(this);\n        }, o.prototype.uxor = function(f) {\n            return this.length > f.length ? this.clone().iuxor(f) : f.clone().iuxor(this);\n        }, o.prototype.inotn = function(f) {\n            i(typeof f == \"number\" && f >= 0);\n            var a = Math.ceil(f / 26) | 0, c = f % 26;\n            this._expand(a), c > 0 && a--;\n            for(var d = 0; d < a; d++)this.words[d] = ~this.words[d] & 67108863;\n            return c > 0 && (this.words[d] = ~this.words[d] & 67108863 >> 26 - c), this._strip();\n        }, o.prototype.notn = function(f) {\n            return this.clone().inotn(f);\n        }, o.prototype.setn = function(f, a) {\n            i(typeof f == \"number\" && f >= 0);\n            var c = f / 26 | 0, d = f % 26;\n            return this._expand(c + 1), a ? this.words[c] = this.words[c] | 1 << d : this.words[c] = this.words[c] & ~(1 << d), this._strip();\n        }, o.prototype.iadd = function(f) {\n            var a;\n            if (this.negative !== 0 && f.negative === 0) return this.negative = 0, a = this.isub(f), this.negative ^= 1, this._normSign();\n            if (this.negative === 0 && f.negative !== 0) return f.negative = 0, a = this.isub(f), f.negative = 1, a._normSign();\n            var c, d;\n            this.length > f.length ? (c = this, d = f) : (c = f, d = this);\n            for(var g = 0, x = 0; x < d.length; x++)a = (c.words[x] | 0) + (d.words[x] | 0) + g, this.words[x] = a & 67108863, g = a >>> 26;\n            for(; g !== 0 && x < c.length; x++)a = (c.words[x] | 0) + g, this.words[x] = a & 67108863, g = a >>> 26;\n            if (this.length = c.length, g !== 0) this.words[this.length] = g, this.length++;\n            else if (c !== this) for(; x < c.length; x++)this.words[x] = c.words[x];\n            return this;\n        }, o.prototype.add = function(f) {\n            var a;\n            return f.negative !== 0 && this.negative === 0 ? (f.negative = 0, a = this.sub(f), f.negative ^= 1, a) : f.negative === 0 && this.negative !== 0 ? (this.negative = 0, a = f.sub(this), this.negative = 1, a) : this.length > f.length ? this.clone().iadd(f) : f.clone().iadd(this);\n        }, o.prototype.isub = function(f) {\n            if (f.negative !== 0) {\n                f.negative = 0;\n                var a = this.iadd(f);\n                return f.negative = 1, a._normSign();\n            } else if (this.negative !== 0) return this.negative = 0, this.iadd(f), this.negative = 1, this._normSign();\n            var c = this.cmp(f);\n            if (c === 0) return this.negative = 0, this.length = 1, this.words[0] = 0, this;\n            var d, g;\n            c > 0 ? (d = this, g = f) : (d = f, g = this);\n            for(var x = 0, M = 0; M < g.length; M++)a = (d.words[M] | 0) - (g.words[M] | 0) + x, x = a >> 26, this.words[M] = a & 67108863;\n            for(; x !== 0 && M < d.length; M++)a = (d.words[M] | 0) + x, x = a >> 26, this.words[M] = a & 67108863;\n            if (x === 0 && M < d.length && d !== this) for(; M < d.length; M++)this.words[M] = d.words[M];\n            return this.length = Math.max(this.length, M), d !== this && (this.negative = 1), this._strip();\n        }, o.prototype.sub = function(f) {\n            return this.clone().isub(f);\n        };\n        function U(b, f, a) {\n            a.negative = f.negative ^ b.negative;\n            var c = b.length + f.length | 0;\n            a.length = c, c = c - 1 | 0;\n            var d = b.words[0] | 0, g = f.words[0] | 0, x = d * g, M = x & 67108863, l = x / 67108864 | 0;\n            a.words[0] = M;\n            for(var s = 1; s < c; s++){\n                for(var v = l >>> 26, k = l & 67108863, u = Math.min(s, f.length - 1), E = Math.max(0, s - b.length + 1); E <= u; E++){\n                    var _ = s - E | 0;\n                    d = b.words[_] | 0, g = f.words[E] | 0, x = d * g + k, v += x / 67108864 | 0, k = x & 67108863;\n                }\n                a.words[s] = k | 0, l = v | 0;\n            }\n            return l !== 0 ? a.words[s] = l | 0 : a.length--, a._strip();\n        }\n        var J = function(f, a, c) {\n            var d = f.words, g = a.words, x = c.words, M = 0, l, s, v, k = d[0] | 0, u = k & 8191, E = k >>> 13, _ = d[1] | 0, B = _ & 8191, R = _ >>> 13, T = d[2] | 0, P = T & 8191, O = T >>> 13, Ct = d[3] | 0, D = Ct & 8191, q = Ct >>> 13, De = d[4] | 0, X = De & 8191, Z = De >>> 13, Fe = d[5] | 0, $ = Fe & 8191, tt = Fe >>> 13, Te = d[6] | 0, et = Te & 8191, rt = Te >>> 13, Ue = d[7] | 0, it = Ue & 8191, nt = Ue >>> 13, ke = d[8] | 0, ft = ke & 8191, ot = ke >>> 13, qe = d[9] | 0, st = qe & 8191, at = qe >>> 13, Ke = g[0] | 0, ut = Ke & 8191, ht = Ke >>> 13, He = g[1] | 0, ct = He & 8191, lt = He >>> 13, ze = g[2] | 0, dt = ze & 8191, pt = ze >>> 13, Le = g[3] | 0, vt = Le & 8191, mt = Le >>> 13, je = g[4] | 0, gt = je & 8191, At = je >>> 13, Qe = g[5] | 0, bt = Qe & 8191, yt = Qe >>> 13, Je = g[6] | 0, wt = Je & 8191, xt = Je >>> 13, Ge = g[7] | 0, Mt = Ge & 8191, Et = Ge >>> 13, Ye = g[8] | 0, St = Ye & 8191, Nt = Ye >>> 13, Ve = g[9] | 0, It = Ve & 8191, _t = Ve >>> 13;\n            c.negative = f.negative ^ a.negative, c.length = 19, l = Math.imul(u, ut), s = Math.imul(u, ht), s = s + Math.imul(E, ut) | 0, v = Math.imul(E, ht);\n            var Me = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Me >>> 26) | 0, Me &= 67108863, l = Math.imul(B, ut), s = Math.imul(B, ht), s = s + Math.imul(R, ut) | 0, v = Math.imul(R, ht), l = l + Math.imul(u, ct) | 0, s = s + Math.imul(u, lt) | 0, s = s + Math.imul(E, ct) | 0, v = v + Math.imul(E, lt) | 0;\n            var Ee = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Ee >>> 26) | 0, Ee &= 67108863, l = Math.imul(P, ut), s = Math.imul(P, ht), s = s + Math.imul(O, ut) | 0, v = Math.imul(O, ht), l = l + Math.imul(B, ct) | 0, s = s + Math.imul(B, lt) | 0, s = s + Math.imul(R, ct) | 0, v = v + Math.imul(R, lt) | 0, l = l + Math.imul(u, dt) | 0, s = s + Math.imul(u, pt) | 0, s = s + Math.imul(E, dt) | 0, v = v + Math.imul(E, pt) | 0;\n            var Se = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Se >>> 26) | 0, Se &= 67108863, l = Math.imul(D, ut), s = Math.imul(D, ht), s = s + Math.imul(q, ut) | 0, v = Math.imul(q, ht), l = l + Math.imul(P, ct) | 0, s = s + Math.imul(P, lt) | 0, s = s + Math.imul(O, ct) | 0, v = v + Math.imul(O, lt) | 0, l = l + Math.imul(B, dt) | 0, s = s + Math.imul(B, pt) | 0, s = s + Math.imul(R, dt) | 0, v = v + Math.imul(R, pt) | 0, l = l + Math.imul(u, vt) | 0, s = s + Math.imul(u, mt) | 0, s = s + Math.imul(E, vt) | 0, v = v + Math.imul(E, mt) | 0;\n            var Ne = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Ne >>> 26) | 0, Ne &= 67108863, l = Math.imul(X, ut), s = Math.imul(X, ht), s = s + Math.imul(Z, ut) | 0, v = Math.imul(Z, ht), l = l + Math.imul(D, ct) | 0, s = s + Math.imul(D, lt) | 0, s = s + Math.imul(q, ct) | 0, v = v + Math.imul(q, lt) | 0, l = l + Math.imul(P, dt) | 0, s = s + Math.imul(P, pt) | 0, s = s + Math.imul(O, dt) | 0, v = v + Math.imul(O, pt) | 0, l = l + Math.imul(B, vt) | 0, s = s + Math.imul(B, mt) | 0, s = s + Math.imul(R, vt) | 0, v = v + Math.imul(R, mt) | 0, l = l + Math.imul(u, gt) | 0, s = s + Math.imul(u, At) | 0, s = s + Math.imul(E, gt) | 0, v = v + Math.imul(E, At) | 0;\n            var Ie = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, l = Math.imul($, ut), s = Math.imul($, ht), s = s + Math.imul(tt, ut) | 0, v = Math.imul(tt, ht), l = l + Math.imul(X, ct) | 0, s = s + Math.imul(X, lt) | 0, s = s + Math.imul(Z, ct) | 0, v = v + Math.imul(Z, lt) | 0, l = l + Math.imul(D, dt) | 0, s = s + Math.imul(D, pt) | 0, s = s + Math.imul(q, dt) | 0, v = v + Math.imul(q, pt) | 0, l = l + Math.imul(P, vt) | 0, s = s + Math.imul(P, mt) | 0, s = s + Math.imul(O, vt) | 0, v = v + Math.imul(O, mt) | 0, l = l + Math.imul(B, gt) | 0, s = s + Math.imul(B, At) | 0, s = s + Math.imul(R, gt) | 0, v = v + Math.imul(R, At) | 0, l = l + Math.imul(u, bt) | 0, s = s + Math.imul(u, yt) | 0, s = s + Math.imul(E, bt) | 0, v = v + Math.imul(E, yt) | 0;\n            var Wr = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Wr >>> 26) | 0, Wr &= 67108863, l = Math.imul(et, ut), s = Math.imul(et, ht), s = s + Math.imul(rt, ut) | 0, v = Math.imul(rt, ht), l = l + Math.imul($, ct) | 0, s = s + Math.imul($, lt) | 0, s = s + Math.imul(tt, ct) | 0, v = v + Math.imul(tt, lt) | 0, l = l + Math.imul(X, dt) | 0, s = s + Math.imul(X, pt) | 0, s = s + Math.imul(Z, dt) | 0, v = v + Math.imul(Z, pt) | 0, l = l + Math.imul(D, vt) | 0, s = s + Math.imul(D, mt) | 0, s = s + Math.imul(q, vt) | 0, v = v + Math.imul(q, mt) | 0, l = l + Math.imul(P, gt) | 0, s = s + Math.imul(P, At) | 0, s = s + Math.imul(O, gt) | 0, v = v + Math.imul(O, At) | 0, l = l + Math.imul(B, bt) | 0, s = s + Math.imul(B, yt) | 0, s = s + Math.imul(R, bt) | 0, v = v + Math.imul(R, yt) | 0, l = l + Math.imul(u, wt) | 0, s = s + Math.imul(u, xt) | 0, s = s + Math.imul(E, wt) | 0, v = v + Math.imul(E, xt) | 0;\n            var Xr = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Xr >>> 26) | 0, Xr &= 67108863, l = Math.imul(it, ut), s = Math.imul(it, ht), s = s + Math.imul(nt, ut) | 0, v = Math.imul(nt, ht), l = l + Math.imul(et, ct) | 0, s = s + Math.imul(et, lt) | 0, s = s + Math.imul(rt, ct) | 0, v = v + Math.imul(rt, lt) | 0, l = l + Math.imul($, dt) | 0, s = s + Math.imul($, pt) | 0, s = s + Math.imul(tt, dt) | 0, v = v + Math.imul(tt, pt) | 0, l = l + Math.imul(X, vt) | 0, s = s + Math.imul(X, mt) | 0, s = s + Math.imul(Z, vt) | 0, v = v + Math.imul(Z, mt) | 0, l = l + Math.imul(D, gt) | 0, s = s + Math.imul(D, At) | 0, s = s + Math.imul(q, gt) | 0, v = v + Math.imul(q, At) | 0, l = l + Math.imul(P, bt) | 0, s = s + Math.imul(P, yt) | 0, s = s + Math.imul(O, bt) | 0, v = v + Math.imul(O, yt) | 0, l = l + Math.imul(B, wt) | 0, s = s + Math.imul(B, xt) | 0, s = s + Math.imul(R, wt) | 0, v = v + Math.imul(R, xt) | 0, l = l + Math.imul(u, Mt) | 0, s = s + Math.imul(u, Et) | 0, s = s + Math.imul(E, Mt) | 0, v = v + Math.imul(E, Et) | 0;\n            var Zr = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Zr >>> 26) | 0, Zr &= 67108863, l = Math.imul(ft, ut), s = Math.imul(ft, ht), s = s + Math.imul(ot, ut) | 0, v = Math.imul(ot, ht), l = l + Math.imul(it, ct) | 0, s = s + Math.imul(it, lt) | 0, s = s + Math.imul(nt, ct) | 0, v = v + Math.imul(nt, lt) | 0, l = l + Math.imul(et, dt) | 0, s = s + Math.imul(et, pt) | 0, s = s + Math.imul(rt, dt) | 0, v = v + Math.imul(rt, pt) | 0, l = l + Math.imul($, vt) | 0, s = s + Math.imul($, mt) | 0, s = s + Math.imul(tt, vt) | 0, v = v + Math.imul(tt, mt) | 0, l = l + Math.imul(X, gt) | 0, s = s + Math.imul(X, At) | 0, s = s + Math.imul(Z, gt) | 0, v = v + Math.imul(Z, At) | 0, l = l + Math.imul(D, bt) | 0, s = s + Math.imul(D, yt) | 0, s = s + Math.imul(q, bt) | 0, v = v + Math.imul(q, yt) | 0, l = l + Math.imul(P, wt) | 0, s = s + Math.imul(P, xt) | 0, s = s + Math.imul(O, wt) | 0, v = v + Math.imul(O, xt) | 0, l = l + Math.imul(B, Mt) | 0, s = s + Math.imul(B, Et) | 0, s = s + Math.imul(R, Mt) | 0, v = v + Math.imul(R, Et) | 0, l = l + Math.imul(u, St) | 0, s = s + Math.imul(u, Nt) | 0, s = s + Math.imul(E, St) | 0, v = v + Math.imul(E, Nt) | 0;\n            var $r = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + ($r >>> 26) | 0, $r &= 67108863, l = Math.imul(st, ut), s = Math.imul(st, ht), s = s + Math.imul(at, ut) | 0, v = Math.imul(at, ht), l = l + Math.imul(ft, ct) | 0, s = s + Math.imul(ft, lt) | 0, s = s + Math.imul(ot, ct) | 0, v = v + Math.imul(ot, lt) | 0, l = l + Math.imul(it, dt) | 0, s = s + Math.imul(it, pt) | 0, s = s + Math.imul(nt, dt) | 0, v = v + Math.imul(nt, pt) | 0, l = l + Math.imul(et, vt) | 0, s = s + Math.imul(et, mt) | 0, s = s + Math.imul(rt, vt) | 0, v = v + Math.imul(rt, mt) | 0, l = l + Math.imul($, gt) | 0, s = s + Math.imul($, At) | 0, s = s + Math.imul(tt, gt) | 0, v = v + Math.imul(tt, At) | 0, l = l + Math.imul(X, bt) | 0, s = s + Math.imul(X, yt) | 0, s = s + Math.imul(Z, bt) | 0, v = v + Math.imul(Z, yt) | 0, l = l + Math.imul(D, wt) | 0, s = s + Math.imul(D, xt) | 0, s = s + Math.imul(q, wt) | 0, v = v + Math.imul(q, xt) | 0, l = l + Math.imul(P, Mt) | 0, s = s + Math.imul(P, Et) | 0, s = s + Math.imul(O, Mt) | 0, v = v + Math.imul(O, Et) | 0, l = l + Math.imul(B, St) | 0, s = s + Math.imul(B, Nt) | 0, s = s + Math.imul(R, St) | 0, v = v + Math.imul(R, Nt) | 0, l = l + Math.imul(u, It) | 0, s = s + Math.imul(u, _t) | 0, s = s + Math.imul(E, It) | 0, v = v + Math.imul(E, _t) | 0;\n            var ti = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ti >>> 26) | 0, ti &= 67108863, l = Math.imul(st, ct), s = Math.imul(st, lt), s = s + Math.imul(at, ct) | 0, v = Math.imul(at, lt), l = l + Math.imul(ft, dt) | 0, s = s + Math.imul(ft, pt) | 0, s = s + Math.imul(ot, dt) | 0, v = v + Math.imul(ot, pt) | 0, l = l + Math.imul(it, vt) | 0, s = s + Math.imul(it, mt) | 0, s = s + Math.imul(nt, vt) | 0, v = v + Math.imul(nt, mt) | 0, l = l + Math.imul(et, gt) | 0, s = s + Math.imul(et, At) | 0, s = s + Math.imul(rt, gt) | 0, v = v + Math.imul(rt, At) | 0, l = l + Math.imul($, bt) | 0, s = s + Math.imul($, yt) | 0, s = s + Math.imul(tt, bt) | 0, v = v + Math.imul(tt, yt) | 0, l = l + Math.imul(X, wt) | 0, s = s + Math.imul(X, xt) | 0, s = s + Math.imul(Z, wt) | 0, v = v + Math.imul(Z, xt) | 0, l = l + Math.imul(D, Mt) | 0, s = s + Math.imul(D, Et) | 0, s = s + Math.imul(q, Mt) | 0, v = v + Math.imul(q, Et) | 0, l = l + Math.imul(P, St) | 0, s = s + Math.imul(P, Nt) | 0, s = s + Math.imul(O, St) | 0, v = v + Math.imul(O, Nt) | 0, l = l + Math.imul(B, It) | 0, s = s + Math.imul(B, _t) | 0, s = s + Math.imul(R, It) | 0, v = v + Math.imul(R, _t) | 0;\n            var ei = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ei >>> 26) | 0, ei &= 67108863, l = Math.imul(st, dt), s = Math.imul(st, pt), s = s + Math.imul(at, dt) | 0, v = Math.imul(at, pt), l = l + Math.imul(ft, vt) | 0, s = s + Math.imul(ft, mt) | 0, s = s + Math.imul(ot, vt) | 0, v = v + Math.imul(ot, mt) | 0, l = l + Math.imul(it, gt) | 0, s = s + Math.imul(it, At) | 0, s = s + Math.imul(nt, gt) | 0, v = v + Math.imul(nt, At) | 0, l = l + Math.imul(et, bt) | 0, s = s + Math.imul(et, yt) | 0, s = s + Math.imul(rt, bt) | 0, v = v + Math.imul(rt, yt) | 0, l = l + Math.imul($, wt) | 0, s = s + Math.imul($, xt) | 0, s = s + Math.imul(tt, wt) | 0, v = v + Math.imul(tt, xt) | 0, l = l + Math.imul(X, Mt) | 0, s = s + Math.imul(X, Et) | 0, s = s + Math.imul(Z, Mt) | 0, v = v + Math.imul(Z, Et) | 0, l = l + Math.imul(D, St) | 0, s = s + Math.imul(D, Nt) | 0, s = s + Math.imul(q, St) | 0, v = v + Math.imul(q, Nt) | 0, l = l + Math.imul(P, It) | 0, s = s + Math.imul(P, _t) | 0, s = s + Math.imul(O, It) | 0, v = v + Math.imul(O, _t) | 0;\n            var ri = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ri >>> 26) | 0, ri &= 67108863, l = Math.imul(st, vt), s = Math.imul(st, mt), s = s + Math.imul(at, vt) | 0, v = Math.imul(at, mt), l = l + Math.imul(ft, gt) | 0, s = s + Math.imul(ft, At) | 0, s = s + Math.imul(ot, gt) | 0, v = v + Math.imul(ot, At) | 0, l = l + Math.imul(it, bt) | 0, s = s + Math.imul(it, yt) | 0, s = s + Math.imul(nt, bt) | 0, v = v + Math.imul(nt, yt) | 0, l = l + Math.imul(et, wt) | 0, s = s + Math.imul(et, xt) | 0, s = s + Math.imul(rt, wt) | 0, v = v + Math.imul(rt, xt) | 0, l = l + Math.imul($, Mt) | 0, s = s + Math.imul($, Et) | 0, s = s + Math.imul(tt, Mt) | 0, v = v + Math.imul(tt, Et) | 0, l = l + Math.imul(X, St) | 0, s = s + Math.imul(X, Nt) | 0, s = s + Math.imul(Z, St) | 0, v = v + Math.imul(Z, Nt) | 0, l = l + Math.imul(D, It) | 0, s = s + Math.imul(D, _t) | 0, s = s + Math.imul(q, It) | 0, v = v + Math.imul(q, _t) | 0;\n            var ii = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ii >>> 26) | 0, ii &= 67108863, l = Math.imul(st, gt), s = Math.imul(st, At), s = s + Math.imul(at, gt) | 0, v = Math.imul(at, At), l = l + Math.imul(ft, bt) | 0, s = s + Math.imul(ft, yt) | 0, s = s + Math.imul(ot, bt) | 0, v = v + Math.imul(ot, yt) | 0, l = l + Math.imul(it, wt) | 0, s = s + Math.imul(it, xt) | 0, s = s + Math.imul(nt, wt) | 0, v = v + Math.imul(nt, xt) | 0, l = l + Math.imul(et, Mt) | 0, s = s + Math.imul(et, Et) | 0, s = s + Math.imul(rt, Mt) | 0, v = v + Math.imul(rt, Et) | 0, l = l + Math.imul($, St) | 0, s = s + Math.imul($, Nt) | 0, s = s + Math.imul(tt, St) | 0, v = v + Math.imul(tt, Nt) | 0, l = l + Math.imul(X, It) | 0, s = s + Math.imul(X, _t) | 0, s = s + Math.imul(Z, It) | 0, v = v + Math.imul(Z, _t) | 0;\n            var ni = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ni >>> 26) | 0, ni &= 67108863, l = Math.imul(st, bt), s = Math.imul(st, yt), s = s + Math.imul(at, bt) | 0, v = Math.imul(at, yt), l = l + Math.imul(ft, wt) | 0, s = s + Math.imul(ft, xt) | 0, s = s + Math.imul(ot, wt) | 0, v = v + Math.imul(ot, xt) | 0, l = l + Math.imul(it, Mt) | 0, s = s + Math.imul(it, Et) | 0, s = s + Math.imul(nt, Mt) | 0, v = v + Math.imul(nt, Et) | 0, l = l + Math.imul(et, St) | 0, s = s + Math.imul(et, Nt) | 0, s = s + Math.imul(rt, St) | 0, v = v + Math.imul(rt, Nt) | 0, l = l + Math.imul($, It) | 0, s = s + Math.imul($, _t) | 0, s = s + Math.imul(tt, It) | 0, v = v + Math.imul(tt, _t) | 0;\n            var fi = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (fi >>> 26) | 0, fi &= 67108863, l = Math.imul(st, wt), s = Math.imul(st, xt), s = s + Math.imul(at, wt) | 0, v = Math.imul(at, xt), l = l + Math.imul(ft, Mt) | 0, s = s + Math.imul(ft, Et) | 0, s = s + Math.imul(ot, Mt) | 0, v = v + Math.imul(ot, Et) | 0, l = l + Math.imul(it, St) | 0, s = s + Math.imul(it, Nt) | 0, s = s + Math.imul(nt, St) | 0, v = v + Math.imul(nt, Nt) | 0, l = l + Math.imul(et, It) | 0, s = s + Math.imul(et, _t) | 0, s = s + Math.imul(rt, It) | 0, v = v + Math.imul(rt, _t) | 0;\n            var oi = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (oi >>> 26) | 0, oi &= 67108863, l = Math.imul(st, Mt), s = Math.imul(st, Et), s = s + Math.imul(at, Mt) | 0, v = Math.imul(at, Et), l = l + Math.imul(ft, St) | 0, s = s + Math.imul(ft, Nt) | 0, s = s + Math.imul(ot, St) | 0, v = v + Math.imul(ot, Nt) | 0, l = l + Math.imul(it, It) | 0, s = s + Math.imul(it, _t) | 0, s = s + Math.imul(nt, It) | 0, v = v + Math.imul(nt, _t) | 0;\n            var si = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (si >>> 26) | 0, si &= 67108863, l = Math.imul(st, St), s = Math.imul(st, Nt), s = s + Math.imul(at, St) | 0, v = Math.imul(at, Nt), l = l + Math.imul(ft, It) | 0, s = s + Math.imul(ft, _t) | 0, s = s + Math.imul(ot, It) | 0, v = v + Math.imul(ot, _t) | 0;\n            var ai = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ai >>> 26) | 0, ai &= 67108863, l = Math.imul(st, It), s = Math.imul(st, _t), s = s + Math.imul(at, It) | 0, v = Math.imul(at, _t);\n            var ui = (M + l | 0) + ((s & 8191) << 13) | 0;\n            return M = (v + (s >>> 13) | 0) + (ui >>> 26) | 0, ui &= 67108863, x[0] = Me, x[1] = Ee, x[2] = Se, x[3] = Ne, x[4] = Ie, x[5] = Wr, x[6] = Xr, x[7] = Zr, x[8] = $r, x[9] = ti, x[10] = ei, x[11] = ri, x[12] = ii, x[13] = ni, x[14] = fi, x[15] = oi, x[16] = si, x[17] = ai, x[18] = ui, M !== 0 && (x[19] = M, c.length++), c;\n        };\n        Math.imul || (J = U);\n        function Bt(b, f, a) {\n            a.negative = f.negative ^ b.negative, a.length = b.length + f.length;\n            for(var c = 0, d = 0, g = 0; g < a.length - 1; g++){\n                var x = d;\n                d = 0;\n                for(var M = c & 67108863, l = Math.min(g, f.length - 1), s = Math.max(0, g - b.length + 1); s <= l; s++){\n                    var v = g - s, k = b.words[v] | 0, u = f.words[s] | 0, E = k * u, _ = E & 67108863;\n                    x = x + (E / 67108864 | 0) | 0, _ = _ + M | 0, M = _ & 67108863, x = x + (_ >>> 26) | 0, d += x >>> 26, x &= 67108863;\n                }\n                a.words[g] = M, c = x, x = d;\n            }\n            return c !== 0 ? a.words[g] = c : a.length--, a._strip();\n        }\n        function G(b, f, a) {\n            return Bt(b, f, a);\n        }\n        o.prototype.mulTo = function(f, a) {\n            var c, d = this.length + f.length;\n            return this.length === 10 && f.length === 10 ? c = J(this, f, a) : d < 63 ? c = U(this, f, a) : d < 1024 ? c = Bt(this, f, a) : c = G(this, f, a), c;\n        }, o.prototype.mul = function(f) {\n            var a = new o(null);\n            return a.words = new Array(this.length + f.length), this.mulTo(f, a);\n        }, o.prototype.mulf = function(f) {\n            var a = new o(null);\n            return a.words = new Array(this.length + f.length), G(this, f, a);\n        }, o.prototype.imul = function(f) {\n            return this.clone().mulTo(f, this);\n        }, o.prototype.imuln = function(f) {\n            var a = f < 0;\n            a && (f = -f), i(typeof f == \"number\"), i(f < 67108864);\n            for(var c = 0, d = 0; d < this.length; d++){\n                var g = (this.words[d] | 0) * f, x = (g & 67108863) + (c & 67108863);\n                c >>= 26, c += g / 67108864 | 0, c += x >>> 26, this.words[d] = x & 67108863;\n            }\n            return c !== 0 && (this.words[d] = c, this.length++), a ? this.ineg() : this;\n        }, o.prototype.muln = function(f) {\n            return this.clone().imuln(f);\n        }, o.prototype.sqr = function() {\n            return this.mul(this);\n        }, o.prototype.isqr = function() {\n            return this.imul(this.clone());\n        }, o.prototype.pow = function(f) {\n            var a = F(f);\n            if (a.length === 0) return new o(1);\n            for(var c = this, d = 0; d < a.length && a[d] === 0; d++, c = c.sqr());\n            if (++d < a.length) for(var g = c.sqr(); d < a.length; d++, g = g.sqr())a[d] !== 0 && (c = c.mul(g));\n            return c;\n        }, o.prototype.iushln = function(f) {\n            i(typeof f == \"number\" && f >= 0);\n            var a = f % 26, c = (f - a) / 26, d = 67108863 >>> 26 - a << 26 - a, g;\n            if (a !== 0) {\n                var x = 0;\n                for(g = 0; g < this.length; g++){\n                    var M = this.words[g] & d, l = (this.words[g] | 0) - M << a;\n                    this.words[g] = l | x, x = M >>> 26 - a;\n                }\n                x && (this.words[g] = x, this.length++);\n            }\n            if (c !== 0) {\n                for(g = this.length - 1; g >= 0; g--)this.words[g + c] = this.words[g];\n                for(g = 0; g < c; g++)this.words[g] = 0;\n                this.length += c;\n            }\n            return this._strip();\n        }, o.prototype.ishln = function(f) {\n            return i(this.negative === 0), this.iushln(f);\n        }, o.prototype.iushrn = function(f, a, c) {\n            i(typeof f == \"number\" && f >= 0);\n            var d;\n            a ? d = (a - a % 26) / 26 : d = 0;\n            var g = f % 26, x = Math.min((f - g) / 26, this.length), M = 67108863 ^ 67108863 >>> g << g, l = c;\n            if (d -= x, d = Math.max(0, d), l) {\n                for(var s = 0; s < x; s++)l.words[s] = this.words[s];\n                l.length = x;\n            }\n            if (x !== 0) if (this.length > x) for(this.length -= x, s = 0; s < this.length; s++)this.words[s] = this.words[s + x];\n            else this.words[0] = 0, this.length = 1;\n            var v = 0;\n            for(s = this.length - 1; s >= 0 && (v !== 0 || s >= d); s--){\n                var k = this.words[s] | 0;\n                this.words[s] = v << 26 - g | k >>> g, v = k & M;\n            }\n            return l && v !== 0 && (l.words[l.length++] = v), this.length === 0 && (this.words[0] = 0, this.length = 1), this._strip();\n        }, o.prototype.ishrn = function(f, a, c) {\n            return i(this.negative === 0), this.iushrn(f, a, c);\n        }, o.prototype.shln = function(f) {\n            return this.clone().ishln(f);\n        }, o.prototype.ushln = function(f) {\n            return this.clone().iushln(f);\n        }, o.prototype.shrn = function(f) {\n            return this.clone().ishrn(f);\n        }, o.prototype.ushrn = function(f) {\n            return this.clone().iushrn(f);\n        }, o.prototype.testn = function(f) {\n            i(typeof f == \"number\" && f >= 0);\n            var a = f % 26, c = (f - a) / 26, d = 1 << a;\n            if (this.length <= c) return !1;\n            var g = this.words[c];\n            return !!(g & d);\n        }, o.prototype.imaskn = function(f) {\n            i(typeof f == \"number\" && f >= 0);\n            var a = f % 26, c = (f - a) / 26;\n            if (i(this.negative === 0, \"imaskn works only with positive numbers\"), this.length <= c) return this;\n            if (a !== 0 && c++, this.length = Math.min(c, this.length), a !== 0) {\n                var d = 67108863 ^ 67108863 >>> a << a;\n                this.words[this.length - 1] &= d;\n            }\n            return this._strip();\n        }, o.prototype.maskn = function(f) {\n            return this.clone().imaskn(f);\n        }, o.prototype.iaddn = function(f) {\n            return i(typeof f == \"number\"), i(f < 67108864), f < 0 ? this.isubn(-f) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) <= f ? (this.words[0] = f - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(f), this.negative = 1, this) : this._iaddn(f);\n        }, o.prototype._iaddn = function(f) {\n            this.words[0] += f;\n            for(var a = 0; a < this.length && this.words[a] >= 67108864; a++)this.words[a] -= 67108864, a === this.length - 1 ? this.words[a + 1] = 1 : this.words[a + 1]++;\n            return this.length = Math.max(this.length, a + 1), this;\n        }, o.prototype.isubn = function(f) {\n            if (i(typeof f == \"number\"), i(f < 67108864), f < 0) return this.iaddn(-f);\n            if (this.negative !== 0) return this.negative = 0, this.iaddn(f), this.negative = 1, this;\n            if (this.words[0] -= f, this.length === 1 && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1;\n            else for(var a = 0; a < this.length && this.words[a] < 0; a++)this.words[a] += 67108864, this.words[a + 1] -= 1;\n            return this._strip();\n        }, o.prototype.addn = function(f) {\n            return this.clone().iaddn(f);\n        }, o.prototype.subn = function(f) {\n            return this.clone().isubn(f);\n        }, o.prototype.iabs = function() {\n            return this.negative = 0, this;\n        }, o.prototype.abs = function() {\n            return this.clone().iabs();\n        }, o.prototype._ishlnsubmul = function(f, a, c) {\n            var d = f.length + c, g;\n            this._expand(d);\n            var x, M = 0;\n            for(g = 0; g < f.length; g++){\n                x = (this.words[g + c] | 0) + M;\n                var l = (f.words[g] | 0) * a;\n                x -= l & 67108863, M = (x >> 26) - (l / 67108864 | 0), this.words[g + c] = x & 67108863;\n            }\n            for(; g < this.length - c; g++)x = (this.words[g + c] | 0) + M, M = x >> 26, this.words[g + c] = x & 67108863;\n            if (M === 0) return this._strip();\n            for(i(M === -1), M = 0, g = 0; g < this.length; g++)x = -(this.words[g] | 0) + M, M = x >> 26, this.words[g] = x & 67108863;\n            return this.negative = 1, this._strip();\n        }, o.prototype._wordDiv = function(f, a) {\n            var c = this.length - f.length, d = this.clone(), g = f, x = g.words[g.length - 1] | 0, M = this._countBits(x);\n            c = 26 - M, c !== 0 && (g = g.ushln(c), d.iushln(c), x = g.words[g.length - 1] | 0);\n            var l = d.length - g.length, s;\n            if (a !== \"mod\") {\n                s = new o(null), s.length = l + 1, s.words = new Array(s.length);\n                for(var v = 0; v < s.length; v++)s.words[v] = 0;\n            }\n            var k = d.clone()._ishlnsubmul(g, 1, l);\n            k.negative === 0 && (d = k, s && (s.words[l] = 1));\n            for(var u = l - 1; u >= 0; u--){\n                var E = (d.words[g.length + u] | 0) * 67108864 + (d.words[g.length + u - 1] | 0);\n                for(E = Math.min(E / x | 0, 67108863), d._ishlnsubmul(g, E, u); d.negative !== 0;)E--, d.negative = 0, d._ishlnsubmul(g, 1, u), d.isZero() || (d.negative ^= 1);\n                s && (s.words[u] = E);\n            }\n            return s && s._strip(), d._strip(), a !== \"div\" && c !== 0 && d.iushrn(c), {\n                div: s || null,\n                mod: d\n            };\n        }, o.prototype.divmod = function(f, a, c) {\n            if (i(!f.isZero()), this.isZero()) return {\n                div: new o(0),\n                mod: new o(0)\n            };\n            var d, g, x;\n            return this.negative !== 0 && f.negative === 0 ? (x = this.neg().divmod(f, a), a !== \"mod\" && (d = x.div.neg()), a !== \"div\" && (g = x.mod.neg(), c && g.negative !== 0 && g.iadd(f)), {\n                div: d,\n                mod: g\n            }) : this.negative === 0 && f.negative !== 0 ? (x = this.divmod(f.neg(), a), a !== \"mod\" && (d = x.div.neg()), {\n                div: d,\n                mod: x.mod\n            }) : this.negative & f.negative ? (x = this.neg().divmod(f.neg(), a), a !== \"div\" && (g = x.mod.neg(), c && g.negative !== 0 && g.isub(f)), {\n                div: x.div,\n                mod: g\n            }) : f.length > this.length || this.cmp(f) < 0 ? {\n                div: new o(0),\n                mod: this\n            } : f.length === 1 ? a === \"div\" ? {\n                div: this.divn(f.words[0]),\n                mod: null\n            } : a === \"mod\" ? {\n                div: null,\n                mod: new o(this.modrn(f.words[0]))\n            } : {\n                div: this.divn(f.words[0]),\n                mod: new o(this.modrn(f.words[0]))\n            } : this._wordDiv(f, a);\n        }, o.prototype.div = function(f) {\n            return this.divmod(f, \"div\", !1).div;\n        }, o.prototype.mod = function(f) {\n            return this.divmod(f, \"mod\", !1).mod;\n        }, o.prototype.umod = function(f) {\n            return this.divmod(f, \"mod\", !0).mod;\n        }, o.prototype.divRound = function(f) {\n            var a = this.divmod(f);\n            if (a.mod.isZero()) return a.div;\n            var c = a.div.negative !== 0 ? a.mod.isub(f) : a.mod, d = f.ushrn(1), g = f.andln(1), x = c.cmp(d);\n            return x < 0 || g === 1 && x === 0 ? a.div : a.div.negative !== 0 ? a.div.isubn(1) : a.div.iaddn(1);\n        }, o.prototype.modrn = function(f) {\n            var a = f < 0;\n            a && (f = -f), i(f <= 67108863);\n            for(var c = (1 << 26) % f, d = 0, g = this.length - 1; g >= 0; g--)d = (c * d + (this.words[g] | 0)) % f;\n            return a ? -d : d;\n        }, o.prototype.modn = function(f) {\n            return this.modrn(f);\n        }, o.prototype.idivn = function(f) {\n            var a = f < 0;\n            a && (f = -f), i(f <= 67108863);\n            for(var c = 0, d = this.length - 1; d >= 0; d--){\n                var g = (this.words[d] | 0) + c * 67108864;\n                this.words[d] = g / f | 0, c = g % f;\n            }\n            return this._strip(), a ? this.ineg() : this;\n        }, o.prototype.divn = function(f) {\n            return this.clone().idivn(f);\n        }, o.prototype.egcd = function(f) {\n            i(f.negative === 0), i(!f.isZero());\n            var a = this, c = f.clone();\n            a.negative !== 0 ? a = a.umod(f) : a = a.clone();\n            for(var d = new o(1), g = new o(0), x = new o(0), M = new o(1), l = 0; a.isEven() && c.isEven();)a.iushrn(1), c.iushrn(1), ++l;\n            for(var s = c.clone(), v = a.clone(); !a.isZero();){\n                for(var k = 0, u = 1; !(a.words[0] & u) && k < 26; ++k, u <<= 1);\n                if (k > 0) for(a.iushrn(k); k-- > 0;)(d.isOdd() || g.isOdd()) && (d.iadd(s), g.isub(v)), d.iushrn(1), g.iushrn(1);\n                for(var E = 0, _ = 1; !(c.words[0] & _) && E < 26; ++E, _ <<= 1);\n                if (E > 0) for(c.iushrn(E); E-- > 0;)(x.isOdd() || M.isOdd()) && (x.iadd(s), M.isub(v)), x.iushrn(1), M.iushrn(1);\n                a.cmp(c) >= 0 ? (a.isub(c), d.isub(x), g.isub(M)) : (c.isub(a), x.isub(d), M.isub(g));\n            }\n            return {\n                a: x,\n                b: M,\n                gcd: c.iushln(l)\n            };\n        }, o.prototype._invmp = function(f) {\n            i(f.negative === 0), i(!f.isZero());\n            var a = this, c = f.clone();\n            a.negative !== 0 ? a = a.umod(f) : a = a.clone();\n            for(var d = new o(1), g = new o(0), x = c.clone(); a.cmpn(1) > 0 && c.cmpn(1) > 0;){\n                for(var M = 0, l = 1; !(a.words[0] & l) && M < 26; ++M, l <<= 1);\n                if (M > 0) for(a.iushrn(M); M-- > 0;)d.isOdd() && d.iadd(x), d.iushrn(1);\n                for(var s = 0, v = 1; !(c.words[0] & v) && s < 26; ++s, v <<= 1);\n                if (s > 0) for(c.iushrn(s); s-- > 0;)g.isOdd() && g.iadd(x), g.iushrn(1);\n                a.cmp(c) >= 0 ? (a.isub(c), d.isub(g)) : (c.isub(a), g.isub(d));\n            }\n            var k;\n            return a.cmpn(1) === 0 ? k = d : k = g, k.cmpn(0) < 0 && k.iadd(f), k;\n        }, o.prototype.gcd = function(f) {\n            if (this.isZero()) return f.abs();\n            if (f.isZero()) return this.abs();\n            var a = this.clone(), c = f.clone();\n            a.negative = 0, c.negative = 0;\n            for(var d = 0; a.isEven() && c.isEven(); d++)a.iushrn(1), c.iushrn(1);\n            do {\n                for(; a.isEven();)a.iushrn(1);\n                for(; c.isEven();)c.iushrn(1);\n                var g = a.cmp(c);\n                if (g < 0) {\n                    var x = a;\n                    a = c, c = x;\n                } else if (g === 0 || c.cmpn(1) === 0) break;\n                a.isub(c);\n            }while (!0);\n            return c.iushln(d);\n        }, o.prototype.invm = function(f) {\n            return this.egcd(f).a.umod(f);\n        }, o.prototype.isEven = function() {\n            return (this.words[0] & 1) === 0;\n        }, o.prototype.isOdd = function() {\n            return (this.words[0] & 1) === 1;\n        }, o.prototype.andln = function(f) {\n            return this.words[0] & f;\n        }, o.prototype.bincn = function(f) {\n            i(typeof f == \"number\");\n            var a = f % 26, c = (f - a) / 26, d = 1 << a;\n            if (this.length <= c) return this._expand(c + 1), this.words[c] |= d, this;\n            for(var g = d, x = c; g !== 0 && x < this.length; x++){\n                var M = this.words[x] | 0;\n                M += g, g = M >>> 26, M &= 67108863, this.words[x] = M;\n            }\n            return g !== 0 && (this.words[x] = g, this.length++), this;\n        }, o.prototype.isZero = function() {\n            return this.length === 1 && this.words[0] === 0;\n        }, o.prototype.cmpn = function(f) {\n            var a = f < 0;\n            if (this.negative !== 0 && !a) return -1;\n            if (this.negative === 0 && a) return 1;\n            this._strip();\n            var c;\n            if (this.length > 1) c = 1;\n            else {\n                a && (f = -f), i(f <= 67108863, \"Number is too big\");\n                var d = this.words[0] | 0;\n                c = d === f ? 0 : d < f ? -1 : 1;\n            }\n            return this.negative !== 0 ? -c | 0 : c;\n        }, o.prototype.cmp = function(f) {\n            if (this.negative !== 0 && f.negative === 0) return -1;\n            if (this.negative === 0 && f.negative !== 0) return 1;\n            var a = this.ucmp(f);\n            return this.negative !== 0 ? -a | 0 : a;\n        }, o.prototype.ucmp = function(f) {\n            if (this.length > f.length) return 1;\n            if (this.length < f.length) return -1;\n            for(var a = 0, c = this.length - 1; c >= 0; c--){\n                var d = this.words[c] | 0, g = f.words[c] | 0;\n                if (d !== g) {\n                    d < g ? a = -1 : d > g && (a = 1);\n                    break;\n                }\n            }\n            return a;\n        }, o.prototype.gtn = function(f) {\n            return this.cmpn(f) === 1;\n        }, o.prototype.gt = function(f) {\n            return this.cmp(f) === 1;\n        }, o.prototype.gten = function(f) {\n            return this.cmpn(f) >= 0;\n        }, o.prototype.gte = function(f) {\n            return this.cmp(f) >= 0;\n        }, o.prototype.ltn = function(f) {\n            return this.cmpn(f) === -1;\n        }, o.prototype.lt = function(f) {\n            return this.cmp(f) === -1;\n        }, o.prototype.lten = function(f) {\n            return this.cmpn(f) <= 0;\n        }, o.prototype.lte = function(f) {\n            return this.cmp(f) <= 0;\n        }, o.prototype.eqn = function(f) {\n            return this.cmpn(f) === 0;\n        }, o.prototype.eq = function(f) {\n            return this.cmp(f) === 0;\n        }, o.red = function(f) {\n            return new Y(f);\n        }, o.prototype.toRed = function(f) {\n            return i(!this.red, \"Already a number in reduction context\"), i(this.negative === 0, \"red works only with positives\"), f.convertTo(this)._forceRed(f);\n        }, o.prototype.fromRed = function() {\n            return i(this.red, \"fromRed works only with numbers in reduction context\"), this.red.convertFrom(this);\n        }, o.prototype._forceRed = function(f) {\n            return this.red = f, this;\n        }, o.prototype.forceRed = function(f) {\n            return i(!this.red, \"Already a number in reduction context\"), this._forceRed(f);\n        }, o.prototype.redAdd = function(f) {\n            return i(this.red, \"redAdd works only with red numbers\"), this.red.add(this, f);\n        }, o.prototype.redIAdd = function(f) {\n            return i(this.red, \"redIAdd works only with red numbers\"), this.red.iadd(this, f);\n        }, o.prototype.redSub = function(f) {\n            return i(this.red, \"redSub works only with red numbers\"), this.red.sub(this, f);\n        }, o.prototype.redISub = function(f) {\n            return i(this.red, \"redISub works only with red numbers\"), this.red.isub(this, f);\n        }, o.prototype.redShl = function(f) {\n            return i(this.red, \"redShl works only with red numbers\"), this.red.shl(this, f);\n        }, o.prototype.redMul = function(f) {\n            return i(this.red, \"redMul works only with red numbers\"), this.red._verify2(this, f), this.red.mul(this, f);\n        }, o.prototype.redIMul = function(f) {\n            return i(this.red, \"redMul works only with red numbers\"), this.red._verify2(this, f), this.red.imul(this, f);\n        }, o.prototype.redSqr = function() {\n            return i(this.red, \"redSqr works only with red numbers\"), this.red._verify1(this), this.red.sqr(this);\n        }, o.prototype.redISqr = function() {\n            return i(this.red, \"redISqr works only with red numbers\"), this.red._verify1(this), this.red.isqr(this);\n        }, o.prototype.redSqrt = function() {\n            return i(this.red, \"redSqrt works only with red numbers\"), this.red._verify1(this), this.red.sqrt(this);\n        }, o.prototype.redInvm = function() {\n            return i(this.red, \"redInvm works only with red numbers\"), this.red._verify1(this), this.red.invm(this);\n        }, o.prototype.redNeg = function() {\n            return i(this.red, \"redNeg works only with red numbers\"), this.red._verify1(this), this.red.neg(this);\n        }, o.prototype.redPow = function(f) {\n            return i(this.red && !f.red, \"redPow(normalNum)\"), this.red._verify1(this), this.red.pow(this, f);\n        };\n        var H = {\n            k256: null,\n            p224: null,\n            p192: null,\n            p25519: null\n        };\n        function z(b, f) {\n            this.name = b, this.p = new o(f, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();\n        }\n        z.prototype._tmp = function() {\n            var f = new o(null);\n            return f.words = new Array(Math.ceil(this.n / 13)), f;\n        }, z.prototype.ireduce = function(f) {\n            var a = f, c;\n            do this.split(a, this.tmp), a = this.imulK(a), a = a.iadd(this.tmp), c = a.bitLength();\n            while (c > this.n);\n            var d = c < this.n ? -1 : a.ucmp(this.p);\n            return d === 0 ? (a.words[0] = 0, a.length = 1) : d > 0 ? a.isub(this.p) : a.strip !== void 0 ? a.strip() : a._strip(), a;\n        }, z.prototype.split = function(f, a) {\n            f.iushrn(this.n, 0, a);\n        }, z.prototype.imulK = function(f) {\n            return f.imul(this.k);\n        };\n        function Pt() {\n            z.call(this, \"k256\", \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\");\n        }\n        n(Pt, z), Pt.prototype.split = function(f, a) {\n            for(var c = 4194303, d = Math.min(f.length, 9), g = 0; g < d; g++)a.words[g] = f.words[g];\n            if (a.length = d, f.length <= 9) {\n                f.words[0] = 0, f.length = 1;\n                return;\n            }\n            var x = f.words[9];\n            for(a.words[a.length++] = x & c, g = 10; g < f.length; g++){\n                var M = f.words[g] | 0;\n                f.words[g - 10] = (M & c) << 4 | x >>> 22, x = M;\n            }\n            x >>>= 22, f.words[g - 10] = x, x === 0 && f.length > 10 ? f.length -= 10 : f.length -= 9;\n        }, Pt.prototype.imulK = function(f) {\n            f.words[f.length] = 0, f.words[f.length + 1] = 0, f.length += 2;\n            for(var a = 0, c = 0; c < f.length; c++){\n                var d = f.words[c] | 0;\n                a += d * 977, f.words[c] = a & 67108863, a = d * 64 + (a / 67108864 | 0);\n            }\n            return f.words[f.length - 1] === 0 && (f.length--, f.words[f.length - 1] === 0 && f.length--), f;\n        };\n        function W() {\n            z.call(this, \"p224\", \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\");\n        }\n        n(W, z);\n        function Rt() {\n            z.call(this, \"p192\", \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\");\n        }\n        n(Rt, z);\n        function Yt() {\n            z.call(this, \"25519\", \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\");\n        }\n        n(Yt, z), Yt.prototype.imulK = function(f) {\n            for(var a = 0, c = 0; c < f.length; c++){\n                var d = (f.words[c] | 0) * 19 + a, g = d & 67108863;\n                d >>>= 26, f.words[c] = g, a = d;\n            }\n            return a !== 0 && (f.words[f.length++] = a), f;\n        }, o._prime = function(f) {\n            if (H[f]) return H[f];\n            var a;\n            if (f === \"k256\") a = new Pt;\n            else if (f === \"p224\") a = new W;\n            else if (f === \"p192\") a = new Rt;\n            else if (f === \"p25519\") a = new Yt;\n            else throw new Error(\"Unknown prime \" + f);\n            return H[f] = a, a;\n        };\n        function Y(b) {\n            if (typeof b == \"string\") {\n                var f = o._prime(b);\n                this.m = f.p, this.prime = f;\n            } else i(b.gtn(1), \"modulus must be greater than 1\"), this.m = b, this.prime = null;\n        }\n        Y.prototype._verify1 = function(f) {\n            i(f.negative === 0, \"red works only with positives\"), i(f.red, \"red works only with red numbers\");\n        }, Y.prototype._verify2 = function(f, a) {\n            i((f.negative | a.negative) === 0, \"red works only with positives\"), i(f.red && f.red === a.red, \"red works only with red numbers\");\n        }, Y.prototype.imod = function(f) {\n            return this.prime ? this.prime.ireduce(f)._forceRed(this) : (w(f, f.umod(this.m)._forceRed(this)), f);\n        }, Y.prototype.neg = function(f) {\n            return f.isZero() ? f.clone() : this.m.sub(f)._forceRed(this);\n        }, Y.prototype.add = function(f, a) {\n            this._verify2(f, a);\n            var c = f.add(a);\n            return c.cmp(this.m) >= 0 && c.isub(this.m), c._forceRed(this);\n        }, Y.prototype.iadd = function(f, a) {\n            this._verify2(f, a);\n            var c = f.iadd(a);\n            return c.cmp(this.m) >= 0 && c.isub(this.m), c;\n        }, Y.prototype.sub = function(f, a) {\n            this._verify2(f, a);\n            var c = f.sub(a);\n            return c.cmpn(0) < 0 && c.iadd(this.m), c._forceRed(this);\n        }, Y.prototype.isub = function(f, a) {\n            this._verify2(f, a);\n            var c = f.isub(a);\n            return c.cmpn(0) < 0 && c.iadd(this.m), c;\n        }, Y.prototype.shl = function(f, a) {\n            return this._verify1(f), this.imod(f.ushln(a));\n        }, Y.prototype.imul = function(f, a) {\n            return this._verify2(f, a), this.imod(f.imul(a));\n        }, Y.prototype.mul = function(f, a) {\n            return this._verify2(f, a), this.imod(f.mul(a));\n        }, Y.prototype.isqr = function(f) {\n            return this.imul(f, f.clone());\n        }, Y.prototype.sqr = function(f) {\n            return this.mul(f, f);\n        }, Y.prototype.sqrt = function(f) {\n            if (f.isZero()) return f.clone();\n            var a = this.m.andln(3);\n            if (i(a % 2 === 1), a === 3) {\n                var c = this.m.add(new o(1)).iushrn(2);\n                return this.pow(f, c);\n            }\n            for(var d = this.m.subn(1), g = 0; !d.isZero() && d.andln(1) === 0;)g++, d.iushrn(1);\n            i(!d.isZero());\n            var x = new o(1).toRed(this), M = x.redNeg(), l = this.m.subn(1).iushrn(1), s = this.m.bitLength();\n            for(s = new o(2 * s * s).toRed(this); this.pow(s, l).cmp(M) !== 0;)s.redIAdd(M);\n            for(var v = this.pow(s, d), k = this.pow(f, d.addn(1).iushrn(1)), u = this.pow(f, d), E = g; u.cmp(x) !== 0;){\n                for(var _ = u, B = 0; _.cmp(x) !== 0; B++)_ = _.redSqr();\n                i(B < E);\n                var R = this.pow(v, new o(1).iushln(E - B - 1));\n                k = k.redMul(R), v = R.redSqr(), u = u.redMul(v), E = B;\n            }\n            return k;\n        }, Y.prototype.invm = function(f) {\n            var a = f._invmp(this.m);\n            return a.negative !== 0 ? (a.negative = 0, this.imod(a).redNeg()) : this.imod(a);\n        }, Y.prototype.pow = function(f, a) {\n            if (a.isZero()) return new o(1).toRed(this);\n            if (a.cmpn(1) === 0) return f.clone();\n            var c = 4, d = new Array(1 << c);\n            d[0] = new o(1).toRed(this), d[1] = f;\n            for(var g = 2; g < d.length; g++)d[g] = this.mul(d[g - 1], f);\n            var x = d[0], M = 0, l = 0, s = a.bitLength() % 26;\n            for(s === 0 && (s = 26), g = a.length - 1; g >= 0; g--){\n                for(var v = a.words[g], k = s - 1; k >= 0; k--){\n                    var u = v >> k & 1;\n                    if (x !== d[0] && (x = this.sqr(x)), u === 0 && M === 0) {\n                        l = 0;\n                        continue;\n                    }\n                    M <<= 1, M |= u, l++, !(l !== c && (g !== 0 || k !== 0)) && (x = this.mul(x, d[M]), l = 0, M = 0);\n                }\n                s = 26;\n            }\n            return x;\n        }, Y.prototype.convertTo = function(f) {\n            var a = f.umod(this.m);\n            return a === f ? a.clone() : a;\n        }, Y.prototype.convertFrom = function(f) {\n            var a = f.clone();\n            return a.red = null, a;\n        }, o.mont = function(f) {\n            return new Vt(f);\n        };\n        function Vt(b) {\n            Y.call(this, b), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);\n        }\n        n(Vt, Y), Vt.prototype.convertTo = function(f) {\n            return this.imod(f.ushln(this.shift));\n        }, Vt.prototype.convertFrom = function(f) {\n            var a = this.imod(f.mul(this.rinv));\n            return a.red = null, a;\n        }, Vt.prototype.imul = function(f, a) {\n            if (f.isZero() || a.isZero()) return f.words[0] = 0, f.length = 1, f;\n            var c = f.imul(a), d = c.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), g = c.isub(d).iushrn(this.shift), x = g;\n            return g.cmp(this.m) >= 0 ? x = g.isub(this.m) : g.cmpn(0) < 0 && (x = g.iadd(this.m)), x._forceRed(this);\n        }, Vt.prototype.mul = function(f, a) {\n            if (f.isZero() || a.isZero()) return new o(0)._forceRed(this);\n            var c = f.mul(a), d = c.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), g = c.isub(d).iushrn(this.shift), x = g;\n            return g.cmp(this.m) >= 0 ? x = g.isub(this.m) : g.cmpn(0) < 0 && (x = g.iadd(this.m)), x._forceRed(this);\n        }, Vt.prototype.invm = function(f) {\n            var a = this.imod(f._invmp(this.m).mul(this.r2));\n            return a._forceRed(this);\n        };\n    })(e, Pn);\n})(jn);\nvar K = jn.exports;\nconst Qn = \"bignumber/5.7.0\";\nvar Rr = K.BN;\nconst Ae = new L(Qn), wi = {}, Jn = 9007199254740991;\nfunction Ts(e) {\n    return e != null && (V.isBigNumber(e) || typeof e == \"number\" && e % 1 === 0 || typeof e == \"string\" && !!e.match(/^-?[0-9]+$/) || Qt(e) || typeof e == \"bigint\" || ir(e));\n}\nlet Gn = !1;\nclass V {\n    constructor(t, r){\n        t !== wi && Ae.throwError(\"cannot call constructor directly; use BigNumber.from\", L.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new (BigNumber)\"\n        }), this._hex = r, this._isBigNumber = !0, Object.freeze(this);\n    }\n    fromTwos(t) {\n        return Lt(j(this).fromTwos(t));\n    }\n    toTwos(t) {\n        return Lt(j(this).toTwos(t));\n    }\n    abs() {\n        return this._hex[0] === \"-\" ? V.from(this._hex.substring(1)) : this;\n    }\n    add(t) {\n        return Lt(j(this).add(j(t)));\n    }\n    sub(t) {\n        return Lt(j(this).sub(j(t)));\n    }\n    div(t) {\n        return V.from(t).isZero() && Wt(\"division-by-zero\", \"div\"), Lt(j(this).div(j(t)));\n    }\n    mul(t) {\n        return Lt(j(this).mul(j(t)));\n    }\n    mod(t) {\n        const r = j(t);\n        return r.isNeg() && Wt(\"division-by-zero\", \"mod\"), Lt(j(this).umod(r));\n    }\n    pow(t) {\n        const r = j(t);\n        return r.isNeg() && Wt(\"negative-power\", \"pow\"), Lt(j(this).pow(r));\n    }\n    and(t) {\n        const r = j(t);\n        return (this.isNegative() || r.isNeg()) && Wt(\"unbound-bitwise-result\", \"and\"), Lt(j(this).and(r));\n    }\n    or(t) {\n        const r = j(t);\n        return (this.isNegative() || r.isNeg()) && Wt(\"unbound-bitwise-result\", \"or\"), Lt(j(this).or(r));\n    }\n    xor(t) {\n        const r = j(t);\n        return (this.isNegative() || r.isNeg()) && Wt(\"unbound-bitwise-result\", \"xor\"), Lt(j(this).xor(r));\n    }\n    mask(t) {\n        return (this.isNegative() || t < 0) && Wt(\"negative-width\", \"mask\"), Lt(j(this).maskn(t));\n    }\n    shl(t) {\n        return (this.isNegative() || t < 0) && Wt(\"negative-width\", \"shl\"), Lt(j(this).shln(t));\n    }\n    shr(t) {\n        return (this.isNegative() || t < 0) && Wt(\"negative-width\", \"shr\"), Lt(j(this).shrn(t));\n    }\n    eq(t) {\n        return j(this).eq(j(t));\n    }\n    lt(t) {\n        return j(this).lt(j(t));\n    }\n    lte(t) {\n        return j(this).lte(j(t));\n    }\n    gt(t) {\n        return j(this).gt(j(t));\n    }\n    gte(t) {\n        return j(this).gte(j(t));\n    }\n    isNegative() {\n        return this._hex[0] === \"-\";\n    }\n    isZero() {\n        return j(this).isZero();\n    }\n    toNumber() {\n        try {\n            return j(this).toNumber();\n        } catch  {\n            Wt(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n    toBigInt() {\n        try {\n            return BigInt(this.toString());\n        } catch  {}\n        return Ae.throwError(\"this platform does not support BigInt\", L.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n    toString() {\n        return arguments.length > 0 && (arguments[0] === 10 ? Gn || (Gn = !0, Ae.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\")) : arguments[0] === 16 ? Ae.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", L.errors.UNEXPECTED_ARGUMENT, {}) : Ae.throwError(\"BigNumber.toString does not accept parameters\", L.errors.UNEXPECTED_ARGUMENT, {})), j(this).toString(10);\n    }\n    toHexString() {\n        return this._hex;\n    }\n    toJSON(t) {\n        return {\n            type: \"BigNumber\",\n            hex: this.toHexString()\n        };\n    }\n    static from(t) {\n        if (t instanceof V) return t;\n        if (typeof t == \"string\") return t.match(/^-?0x[0-9a-f]+$/i) ? new V(wi, vr(t)) : t.match(/^-?[0-9]+$/) ? new V(wi, vr(new Rr(t))) : Ae.throwArgumentError(\"invalid BigNumber string\", \"value\", t);\n        if (typeof t == \"number\") return t % 1 && Wt(\"underflow\", \"BigNumber.from\", t), (t >= Jn || t <= -Jn) && Wt(\"overflow\", \"BigNumber.from\", t), V.from(String(t));\n        const r = t;\n        if (typeof r == \"bigint\") return V.from(r.toString());\n        if (ir(r)) return V.from(Kt(r));\n        if (r) if (r.toHexString) {\n            const i = r.toHexString();\n            if (typeof i == \"string\") return V.from(i);\n        } else {\n            let i = r._hex;\n            if (i == null && r.type === \"BigNumber\" && (i = r.hex), typeof i == \"string\" && (Qt(i) || i[0] === \"-\" && Qt(i.substring(1)))) return V.from(i);\n        }\n        return Ae.throwArgumentError(\"invalid BigNumber value\", \"value\", t);\n    }\n    static isBigNumber(t) {\n        return !!(t && t._isBigNumber);\n    }\n}\nfunction vr(e) {\n    if (typeof e != \"string\") return vr(e.toString(16));\n    if (e[0] === \"-\") return e = e.substring(1), e[0] === \"-\" && Ae.throwArgumentError(\"invalid hex\", \"value\", e), e = vr(e), e === \"0x00\" ? e : \"-\" + e;\n    if (e.substring(0, 2) !== \"0x\" && (e = \"0x\" + e), e === \"0x\") return \"0x00\";\n    for(e.length % 2 && (e = \"0x0\" + e.substring(2)); e.length > 4 && e.substring(0, 4) === \"0x00\";)e = \"0x\" + e.substring(4);\n    return e;\n}\nfunction Lt(e) {\n    return V.from(vr(e));\n}\nfunction j(e) {\n    const t = V.from(e).toHexString();\n    return t[0] === \"-\" ? new Rr(\"-\" + t.substring(3), 16) : new Rr(t.substring(2), 16);\n}\nfunction Wt(e, t, r) {\n    const i = {\n        fault: e,\n        operation: t\n    };\n    return r != null && (i.value = r), Ae.throwError(e, L.errors.NUMERIC_FAULT, i);\n}\nfunction Us(e) {\n    return new Rr(e, 36).toString(16);\n}\nconst Ht = new L(Qn), mr = {}, Yn = V.from(0), Vn = V.from(-1);\nfunction Wn(e, t, r, i) {\n    const n = {\n        fault: t,\n        operation: r\n    };\n    return i !== void 0 && (n.value = i), Ht.throwError(e, L.errors.NUMERIC_FAULT, n);\n}\nlet gr = \"0\";\nfor(; gr.length < 256;)gr += gr;\nfunction xi(e) {\n    if (typeof e != \"number\") try {\n        e = V.from(e).toNumber();\n    } catch  {}\n    return typeof e == \"number\" && e >= 0 && e <= 256 && !(e % 1) ? \"1\" + gr.substring(0, e) : Ht.throwArgumentError(\"invalid decimal size\", \"decimals\", e);\n}\nfunction Mi(e, t) {\n    t == null && (t = 0);\n    const r = xi(t);\n    e = V.from(e);\n    const i = e.lt(Yn);\n    i && (e = e.mul(Vn));\n    let n = e.mod(r).toString();\n    for(; n.length < r.length - 1;)n = \"0\" + n;\n    n = n.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    const o = e.div(r).toString();\n    return r.length === 1 ? e = o : e = o + \".\" + n, i && (e = \"-\" + e), e;\n}\nfunction be(e, t) {\n    t == null && (t = 0);\n    const r = xi(t);\n    (typeof e != \"string\" || !e.match(/^-?[0-9.]+$/)) && Ht.throwArgumentError(\"invalid decimal value\", \"value\", e);\n    const i = e.substring(0, 1) === \"-\";\n    i && (e = e.substring(1)), e === \".\" && Ht.throwArgumentError(\"missing value\", \"value\", e);\n    const n = e.split(\".\");\n    n.length > 2 && Ht.throwArgumentError(\"too many decimal points\", \"value\", e);\n    let o = n[0], h = n[1];\n    for(o || (o = \"0\"), h || (h = \"0\"); h[h.length - 1] === \"0\";)h = h.substring(0, h.length - 1);\n    for(h.length > r.length - 1 && Wn(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\"), h === \"\" && (h = \"0\"); h.length < r.length - 1;)h += \"0\";\n    const p = V.from(o), A = V.from(h);\n    let m = p.mul(r).add(A);\n    return i && (m = m.mul(Vn)), m;\n}\nclass dr {\n    constructor(t, r, i, n){\n        t !== mr && Ht.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", L.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new FixedFormat\"\n        }), this.signed = r, this.width = i, this.decimals = n, this.name = (r ? \"\" : \"u\") + \"fixed\" + String(i) + \"x\" + String(n), this._multiplier = xi(n), Object.freeze(this);\n    }\n    static from(t) {\n        if (t instanceof dr) return t;\n        typeof t == \"number\" && (t = `fixed128x${t}`);\n        let r = !0, i = 128, n = 18;\n        if (typeof t == \"string\") {\n            if (t !== \"fixed\") if (t === \"ufixed\") r = !1;\n            else {\n                const o = t.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                o || Ht.throwArgumentError(\"invalid fixed format\", \"format\", t), r = o[1] !== \"u\", i = parseInt(o[2]), n = parseInt(o[3]);\n            }\n        } else if (t) {\n            const o = (h, p, A)=>t[h] == null ? A : (typeof t[h] !== p && Ht.throwArgumentError(\"invalid fixed format (\" + h + \" not \" + p + \")\", \"format.\" + h, t[h]), t[h]);\n            r = o(\"signed\", \"boolean\", r), i = o(\"width\", \"number\", i), n = o(\"decimals\", \"number\", n);\n        }\n        return i % 8 && Ht.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", i), n > 80 && Ht.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", n), new dr(mr, r, i, n);\n    }\n}\nclass Ut {\n    constructor(t, r, i, n){\n        t !== mr && Ht.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", L.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new FixedFormat\"\n        }), this.format = n, this._hex = r, this._value = i, this._isFixedNumber = !0, Object.freeze(this);\n    }\n    _checkFormat(t) {\n        this.format.name !== t.format.name && Ht.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", t);\n    }\n    addUnsafe(t) {\n        this._checkFormat(t);\n        const r = be(this._value, this.format.decimals), i = be(t._value, t.format.decimals);\n        return Ut.fromValue(r.add(i), this.format.decimals, this.format);\n    }\n    subUnsafe(t) {\n        this._checkFormat(t);\n        const r = be(this._value, this.format.decimals), i = be(t._value, t.format.decimals);\n        return Ut.fromValue(r.sub(i), this.format.decimals, this.format);\n    }\n    mulUnsafe(t) {\n        this._checkFormat(t);\n        const r = be(this._value, this.format.decimals), i = be(t._value, t.format.decimals);\n        return Ut.fromValue(r.mul(i).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n    divUnsafe(t) {\n        this._checkFormat(t);\n        const r = be(this._value, this.format.decimals), i = be(t._value, t.format.decimals);\n        return Ut.fromValue(r.mul(this.format._multiplier).div(i), this.format.decimals, this.format);\n    }\n    floor() {\n        const t = this.toString().split(\".\");\n        t.length === 1 && t.push(\"0\");\n        let r = Ut.from(t[0], this.format);\n        const i = !t[1].match(/^(0*)$/);\n        return this.isNegative() && i && (r = r.subUnsafe(Xn.toFormat(r.format))), r;\n    }\n    ceiling() {\n        const t = this.toString().split(\".\");\n        t.length === 1 && t.push(\"0\");\n        let r = Ut.from(t[0], this.format);\n        const i = !t[1].match(/^(0*)$/);\n        return !this.isNegative() && i && (r = r.addUnsafe(Xn.toFormat(r.format))), r;\n    }\n    round(t) {\n        t == null && (t = 0);\n        const r = this.toString().split(\".\");\n        if (r.length === 1 && r.push(\"0\"), (t < 0 || t > 80 || t % 1) && Ht.throwArgumentError(\"invalid decimal count\", \"decimals\", t), r[1].length <= t) return this;\n        const i = Ut.from(\"1\" + gr.substring(0, t), this.format), n = ks.toFormat(this.format);\n        return this.mulUnsafe(i).addUnsafe(n).floor().divUnsafe(i);\n    }\n    isZero() {\n        return this._value === \"0.0\" || this._value === \"0\";\n    }\n    isNegative() {\n        return this._value[0] === \"-\";\n    }\n    toString() {\n        return this._value;\n    }\n    toHexString(t) {\n        if (t == null) return this._hex;\n        t % 8 && Ht.throwArgumentError(\"invalid byte width\", \"width\", t);\n        const r = V.from(this._hex).fromTwos(this.format.width).toTwos(t).toHexString();\n        return oe(r, t / 8);\n    }\n    toUnsafeFloat() {\n        return parseFloat(this.toString());\n    }\n    toFormat(t) {\n        return Ut.fromString(this._value, t);\n    }\n    static fromValue(t, r, i) {\n        return i == null && r != null && !Ts(r) && (i = r, r = null), r == null && (r = 0), i == null && (i = \"fixed\"), Ut.fromString(Mi(t, r), dr.from(i));\n    }\n    static fromString(t, r) {\n        r == null && (r = \"fixed\");\n        const i = dr.from(r), n = be(t, i.decimals);\n        !i.signed && n.lt(Yn) && Wn(\"unsigned value cannot be negative\", \"overflow\", \"value\", t);\n        let o = null;\n        i.signed ? o = n.toTwos(i.width).toHexString() : (o = n.toHexString(), o = oe(o, i.width / 8));\n        const h = Mi(n, i.decimals);\n        return new Ut(mr, o, h, i);\n    }\n    static fromBytes(t, r) {\n        r == null && (r = \"fixed\");\n        const i = dr.from(r);\n        if (Ot(t).length > i.width / 8) throw new Error(\"overflow\");\n        let n = V.from(t);\n        i.signed && (n = n.fromTwos(i.width));\n        const o = n.toTwos((i.signed ? 0 : 1) + i.width).toHexString(), h = Mi(n, i.decimals);\n        return new Ut(mr, o, h, i);\n    }\n    static from(t, r) {\n        if (typeof t == \"string\") return Ut.fromString(t, r);\n        if (ir(t)) return Ut.fromBytes(t, r);\n        try {\n            return Ut.fromValue(t, 0, r);\n        } catch (i) {\n            if (i.code !== L.errors.INVALID_ARGUMENT) throw i;\n        }\n        return Ht.throwArgumentError(\"invalid FixedNumber value\", \"value\", t);\n    }\n    static isFixedNumber(t) {\n        return !!(t && t._isFixedNumber);\n    }\n}\nconst Xn = Ut.from(1), ks = Ut.from(\"0.5\"), qs = \"strings/5.7.0\", Zn = new L(qs);\nvar Or;\n(function(e) {\n    e.current = \"\", e.NFC = \"NFC\", e.NFD = \"NFD\", e.NFKC = \"NFKC\", e.NFKD = \"NFKD\";\n})(Or || (Or = {}));\nvar nr;\n(function(e) {\n    e.UNEXPECTED_CONTINUE = \"unexpected continuation byte\", e.BAD_PREFIX = \"bad codepoint prefix\", e.OVERRUN = \"string overrun\", e.MISSING_CONTINUE = \"missing continuation byte\", e.OUT_OF_RANGE = \"out of UTF-8 range\", e.UTF16_SURROGATE = \"UTF-16 surrogate\", e.OVERLONG = \"overlong representation\";\n})(nr || (nr = {}));\nfunction Ks(e, t, r, i, n) {\n    return Zn.throwArgumentError(`invalid codepoint at offset ${t}; ${e}`, \"bytes\", r);\n}\nfunction $n(e, t, r, i, n) {\n    if (e === nr.BAD_PREFIX || e === nr.UNEXPECTED_CONTINUE) {\n        let o = 0;\n        for(let h = t + 1; h < r.length && r[h] >> 6 === 2; h++)o++;\n        return o;\n    }\n    return e === nr.OVERRUN ? r.length - t - 1 : 0;\n}\nfunction Hs(e, t, r, i, n) {\n    return e === nr.OVERLONG ? (i.push(n), 0) : (i.push(65533), $n(e, t, r));\n}\nObject.freeze({\n    error: Ks,\n    ignore: $n,\n    replace: Hs\n});\nfunction Ei(e, t = Or.current) {\n    t != Or.current && (Zn.checkNormalize(), e = e.normalize(t));\n    let r = [];\n    for(let i = 0; i < e.length; i++){\n        const n = e.charCodeAt(i);\n        if (n < 128) r.push(n);\n        else if (n < 2048) r.push(n >> 6 | 192), r.push(n & 63 | 128);\n        else if ((n & 64512) == 55296) {\n            i++;\n            const o = e.charCodeAt(i);\n            if (i >= e.length || (o & 64512) !== 56320) throw new Error(\"invalid utf-8 string\");\n            const h = 65536 + ((n & 1023) << 10) + (o & 1023);\n            r.push(h >> 18 | 240), r.push(h >> 12 & 63 | 128), r.push(h >> 6 & 63 | 128), r.push(h & 63 | 128);\n        } else r.push(n >> 12 | 224), r.push(n >> 6 & 63 | 128), r.push(n & 63 | 128);\n    }\n    return Ot(r);\n}\nfunction zs(e) {\n    if (e.length % 4 !== 0) throw new Error(\"bad data\");\n    let t = [];\n    for(let r = 0; r < e.length; r += 4)t.push(parseInt(e.substring(r, r + 4), 16));\n    return t;\n}\nfunction Si(e, t) {\n    t || (t = function(n) {\n        return [\n            parseInt(n, 16)\n        ];\n    });\n    let r = 0, i = {};\n    return e.split(\",\").forEach((n)=>{\n        let o = n.split(\":\");\n        r += parseInt(o[0], 16), i[r] = t(o[1]);\n    }), i;\n}\nfunction tf(e) {\n    let t = 0;\n    return e.split(\",\").map((r)=>{\n        let i = r.split(\"-\");\n        i.length === 1 ? i[1] = \"0\" : i[1] === \"\" && (i[1] = \"1\");\n        let n = t + parseInt(i[0], 16);\n        return t = parseInt(i[1], 16), {\n            l: n,\n            h: t\n        };\n    });\n}\ntf(\"221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d\"), \"ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff\".split(\",\").map((e)=>parseInt(e, 16)), Si(\"b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3\"), Si(\"179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7\"), Si(\"df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D\", zs), tf(\"80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001\");\nconst ef = \"hash/5.7.0\";\nfunction Ls(e) {\n    e = atob(e);\n    const t = [];\n    for(let r = 0; r < e.length; r++)t.push(e.charCodeAt(r));\n    return Ot(t);\n}\nfunction rf(e, t) {\n    t == null && (t = 1);\n    const r = [], i = r.forEach, n = function(o, h) {\n        i.call(o, function(p) {\n            h > 0 && Array.isArray(p) ? n(p, h - 1) : r.push(p);\n        });\n    };\n    return n(e, t), r;\n}\nfunction js(e) {\n    const t = {};\n    for(let r = 0; r < e.length; r++){\n        const i = e[r];\n        t[i[0]] = i[1];\n    }\n    return t;\n}\nfunction Qs(e) {\n    let t = 0;\n    function r() {\n        return e[t++] << 8 | e[t++];\n    }\n    let i = r(), n = 1, o = [\n        0,\n        1\n    ];\n    for(let H = 1; H < i; H++)o.push(n += r());\n    let h = r(), p = t;\n    t += h;\n    let A = 0, m = 0;\n    function w() {\n        return A == 0 && (m = m << 8 | e[t++], A = 8), m >> --A & 1;\n    }\n    const y = 31, S = Math.pow(2, y), I = S >>> 1, N = I >> 1, C = S - 1;\n    let F = 0;\n    for(let H = 0; H < y; H++)F = F << 1 | w();\n    let U = [], J = 0, Bt = S;\n    for(;;){\n        let H = Math.floor(((F - J + 1) * n - 1) / Bt), z = 0, Pt = i;\n        for(; Pt - z > 1;){\n            let Yt = z + Pt >>> 1;\n            H < o[Yt] ? Pt = Yt : z = Yt;\n        }\n        if (z == 0) break;\n        U.push(z);\n        let W = J + Math.floor(Bt * o[z] / n), Rt = J + Math.floor(Bt * o[z + 1] / n) - 1;\n        for(; !((W ^ Rt) & I);)F = F << 1 & C | w(), W = W << 1 & C, Rt = Rt << 1 & C | 1;\n        for(; W & ~Rt & N;)F = F & I | F << 1 & C >>> 1 | w(), W = W << 1 ^ I, Rt = (Rt ^ I) << 1 | I | 1;\n        J = W, Bt = 1 + Rt - W;\n    }\n    let G = i - 4;\n    return U.map((H)=>{\n        switch(H - G){\n            case 3:\n                return G + 65792 + (e[p++] << 16 | e[p++] << 8 | e[p++]);\n            case 2:\n                return G + 256 + (e[p++] << 8 | e[p++]);\n            case 1:\n                return G + e[p++];\n            default:\n                return H - 1;\n        }\n    });\n}\nfunction Js(e) {\n    let t = 0;\n    return ()=>e[t++];\n}\nfunction Gs(e) {\n    return Js(Qs(e));\n}\nfunction Ys(e) {\n    return e & 1 ? ~e >> 1 : e >> 1;\n}\nfunction Vs(e, t) {\n    let r = Array(e);\n    for(let i = 0; i < e; i++)r[i] = 1 + t();\n    return r;\n}\nfunction nf(e, t) {\n    let r = Array(e);\n    for(let i = 0, n = -1; i < e; i++)r[i] = n += 1 + t();\n    return r;\n}\nfunction Ws(e, t) {\n    let r = Array(e);\n    for(let i = 0, n = 0; i < e; i++)r[i] = n += Ys(t());\n    return r;\n}\nfunction Pr(e, t) {\n    let r = nf(e(), e), i = e(), n = nf(i, e), o = Vs(i, e);\n    for(let h = 0; h < i; h++)for(let p = 0; p < o[h]; p++)r.push(n[h] + p);\n    return t ? r.map((h)=>t[h]) : r;\n}\nfunction Xs(e) {\n    let t = [];\n    for(;;){\n        let r = e();\n        if (r == 0) break;\n        t.push($s(r, e));\n    }\n    for(;;){\n        let r = e() - 1;\n        if (r < 0) break;\n        t.push(t0(r, e));\n    }\n    return js(rf(t));\n}\nfunction Zs(e) {\n    let t = [];\n    for(;;){\n        let r = e();\n        if (r == 0) break;\n        t.push(r);\n    }\n    return t;\n}\nfunction ff(e, t, r) {\n    let i = Array(e).fill(void 0).map(()=>[]);\n    for(let n = 0; n < t; n++)Ws(e, r).forEach((o, h)=>i[h].push(o));\n    return i;\n}\nfunction $s(e, t) {\n    let r = 1 + t(), i = t(), n = Zs(t), o = ff(n.length, 1 + e, t);\n    return rf(o.map((h, p)=>{\n        const A = h[0], m = h.slice(1);\n        return Array(n[p]).fill(void 0).map((w, y)=>{\n            let S = y * i;\n            return [\n                A + y * r,\n                m.map((I)=>I + S)\n            ];\n        });\n    }));\n}\nfunction t0(e, t) {\n    let r = 1 + t();\n    return ff(r, 1 + e, t).map((n)=>[\n            n[0],\n            n.slice(1)\n        ]);\n}\nfunction e0(e) {\n    let t = Pr(e).sort((i, n)=>i - n);\n    return r();\n    function r() {\n        let i = [];\n        for(;;){\n            let m = Pr(e, t);\n            if (m.length == 0) break;\n            i.push({\n                set: new Set(m),\n                node: r()\n            });\n        }\n        i.sort((m, w)=>w.set.size - m.set.size);\n        let n = e(), o = n % 3;\n        n = n / 3 | 0;\n        let h = !!(n & 1);\n        n >>= 1;\n        let p = n == 1, A = n == 2;\n        return {\n            branches: i,\n            valid: o,\n            fe0f: h,\n            save: p,\n            check: A\n        };\n    }\n}\nfunction r0() {\n    return Gs(Ls(\"\"));\n}\nconst Dr = r0();\nnew Set(Pr(Dr)), new Set(Pr(Dr)), Xs(Dr), e0(Dr), new L(ef);\nconst i0 = new Uint8Array(32);\ni0.fill(0);\nconst n0 = `\u0019Ethereum Signed Message:\n`;\nfunction of(e) {\n    return typeof e == \"string\" && (e = Ei(e)), yi(Cs([\n        Ei(n0),\n        Ei(String(e.length)),\n        e\n    ]));\n}\nconst f0 = \"rlp/5.7.0\";\nnew L(f0);\nconst o0 = \"address/5.7.0\", Ar = new L(o0);\nfunction sf(e) {\n    Qt(e, 20) || Ar.throwArgumentError(\"invalid address\", \"address\", e), e = e.toLowerCase();\n    const t = e.substring(2).split(\"\"), r = new Uint8Array(40);\n    for(let n = 0; n < 40; n++)r[n] = t[n].charCodeAt(0);\n    const i = Ot(yi(r));\n    for(let n = 0; n < 40; n += 2)i[n >> 1] >> 4 >= 8 && (t[n] = t[n].toUpperCase()), (i[n >> 1] & 15) >= 8 && (t[n + 1] = t[n + 1].toUpperCase());\n    return \"0x\" + t.join(\"\");\n}\nconst s0 = 9007199254740991;\nfunction a0(e) {\n    return Math.log10 ? Math.log10(e) : Math.log(e) / Math.LN10;\n}\nconst Ni = {};\nfor(let e = 0; e < 10; e++)Ni[String(e)] = String(e);\nfor(let e = 0; e < 26; e++)Ni[String.fromCharCode(65 + e)] = String(10 + e);\nconst af = Math.floor(a0(s0));\nfunction u0(e) {\n    e = e.toUpperCase(), e = e.substring(4) + e.substring(0, 2) + \"00\";\n    let t = e.split(\"\").map((i)=>Ni[i]).join(\"\");\n    for(; t.length >= af;){\n        let i = t.substring(0, af);\n        t = parseInt(i, 10) % 97 + t.substring(i.length);\n    }\n    let r = String(98 - parseInt(t, 10) % 97);\n    for(; r.length < 2;)r = \"0\" + r;\n    return r;\n}\nfunction h0(e) {\n    let t = null;\n    if (typeof e != \"string\" && Ar.throwArgumentError(\"invalid address\", \"address\", e), e.match(/^(0x)?[0-9a-fA-F]{40}$/)) e.substring(0, 2) !== \"0x\" && (e = \"0x\" + e), t = sf(e), e.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && t !== e && Ar.throwArgumentError(\"bad address checksum\", \"address\", e);\n    else if (e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        for(e.substring(2, 4) !== u0(e) && Ar.throwArgumentError(\"bad icap checksum\", \"address\", e), t = Us(e.substring(4)); t.length < 40;)t = \"0\" + t;\n        t = sf(\"0x\" + t);\n    } else Ar.throwArgumentError(\"invalid address\", \"address\", e);\n    return t;\n}\nconst c0 = \"properties/5.7.0\";\nnew L(c0);\nfunction br(e, t, r) {\n    Object.defineProperty(e, t, {\n        enumerable: !0,\n        value: r,\n        writable: !1\n    });\n}\nnew L(ef);\nconst l0 = new Uint8Array(32);\nl0.fill(0), V.from(-1);\nconst d0 = V.from(0), p0 = V.from(1);\nV.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"), oe(p0.toHexString(), 32), oe(d0.toHexString(), 32);\nvar se = {}, Q = {}, yr = uf;\nfunction uf(e, t) {\n    if (!e) throw new Error(t || \"Assertion failed\");\n}\nuf.equal = function(t, r, i) {\n    if (t != r) throw new Error(i || \"Assertion failed: \" + t + \" != \" + r);\n};\nvar Ii = {\n    exports: {}\n};\ntypeof Object.create == \"function\" ? Ii.exports = function(t, r) {\n    r && (t.super_ = r, t.prototype = Object.create(r.prototype, {\n        constructor: {\n            value: t,\n            enumerable: !1,\n            writable: !0,\n            configurable: !0\n        }\n    }));\n} : Ii.exports = function(t, r) {\n    if (r) {\n        t.super_ = r;\n        var i = function() {};\n        i.prototype = r.prototype, t.prototype = new i, t.prototype.constructor = t;\n    }\n};\nvar v0 = yr, m0 = Ii.exports;\nQ.inherits = m0;\nfunction g0(e, t) {\n    return (e.charCodeAt(t) & 64512) !== 55296 || t < 0 || t + 1 >= e.length ? !1 : (e.charCodeAt(t + 1) & 64512) === 56320;\n}\nfunction A0(e, t) {\n    if (Array.isArray(e)) return e.slice();\n    if (!e) return [];\n    var r = [];\n    if (typeof e == \"string\") if (t) {\n        if (t === \"hex\") for(e = e.replace(/[^a-z0-9]+/ig, \"\"), e.length % 2 !== 0 && (e = \"0\" + e), n = 0; n < e.length; n += 2)r.push(parseInt(e[n] + e[n + 1], 16));\n    } else for(var i = 0, n = 0; n < e.length; n++){\n        var o = e.charCodeAt(n);\n        o < 128 ? r[i++] = o : o < 2048 ? (r[i++] = o >> 6 | 192, r[i++] = o & 63 | 128) : g0(e, n) ? (o = 65536 + ((o & 1023) << 10) + (e.charCodeAt(++n) & 1023), r[i++] = o >> 18 | 240, r[i++] = o >> 12 & 63 | 128, r[i++] = o >> 6 & 63 | 128, r[i++] = o & 63 | 128) : (r[i++] = o >> 12 | 224, r[i++] = o >> 6 & 63 | 128, r[i++] = o & 63 | 128);\n    }\n    else for(n = 0; n < e.length; n++)r[n] = e[n] | 0;\n    return r;\n}\nQ.toArray = A0;\nfunction b0(e) {\n    for(var t = \"\", r = 0; r < e.length; r++)t += cf(e[r].toString(16));\n    return t;\n}\nQ.toHex = b0;\nfunction hf(e) {\n    var t = e >>> 24 | e >>> 8 & 65280 | e << 8 & 16711680 | (e & 255) << 24;\n    return t >>> 0;\n}\nQ.htonl = hf;\nfunction y0(e, t) {\n    for(var r = \"\", i = 0; i < e.length; i++){\n        var n = e[i];\n        t === \"little\" && (n = hf(n)), r += lf(n.toString(16));\n    }\n    return r;\n}\nQ.toHex32 = y0;\nfunction cf(e) {\n    return e.length === 1 ? \"0\" + e : e;\n}\nQ.zero2 = cf;\nfunction lf(e) {\n    return e.length === 7 ? \"0\" + e : e.length === 6 ? \"00\" + e : e.length === 5 ? \"000\" + e : e.length === 4 ? \"0000\" + e : e.length === 3 ? \"00000\" + e : e.length === 2 ? \"000000\" + e : e.length === 1 ? \"0000000\" + e : e;\n}\nQ.zero8 = lf;\nfunction w0(e, t, r, i) {\n    var n = r - t;\n    v0(n % 4 === 0);\n    for(var o = new Array(n / 4), h = 0, p = t; h < o.length; h++, p += 4){\n        var A;\n        i === \"big\" ? A = e[p] << 24 | e[p + 1] << 16 | e[p + 2] << 8 | e[p + 3] : A = e[p + 3] << 24 | e[p + 2] << 16 | e[p + 1] << 8 | e[p], o[h] = A >>> 0;\n    }\n    return o;\n}\nQ.join32 = w0;\nfunction x0(e, t) {\n    for(var r = new Array(e.length * 4), i = 0, n = 0; i < e.length; i++, n += 4){\n        var o = e[i];\n        t === \"big\" ? (r[n] = o >>> 24, r[n + 1] = o >>> 16 & 255, r[n + 2] = o >>> 8 & 255, r[n + 3] = o & 255) : (r[n + 3] = o >>> 24, r[n + 2] = o >>> 16 & 255, r[n + 1] = o >>> 8 & 255, r[n] = o & 255);\n    }\n    return r;\n}\nQ.split32 = x0;\nfunction M0(e, t) {\n    return e >>> t | e << 32 - t;\n}\nQ.rotr32 = M0;\nfunction E0(e, t) {\n    return e << t | e >>> 32 - t;\n}\nQ.rotl32 = E0;\nfunction S0(e, t) {\n    return e + t >>> 0;\n}\nQ.sum32 = S0;\nfunction N0(e, t, r) {\n    return e + t + r >>> 0;\n}\nQ.sum32_3 = N0;\nfunction I0(e, t, r, i) {\n    return e + t + r + i >>> 0;\n}\nQ.sum32_4 = I0;\nfunction _0(e, t, r, i, n) {\n    return e + t + r + i + n >>> 0;\n}\nQ.sum32_5 = _0;\nfunction B0(e, t, r, i) {\n    var n = e[t], o = e[t + 1], h = i + o >>> 0, p = (h < i ? 1 : 0) + r + n;\n    e[t] = p >>> 0, e[t + 1] = h;\n}\nQ.sum64 = B0;\nfunction C0(e, t, r, i) {\n    var n = t + i >>> 0, o = (n < t ? 1 : 0) + e + r;\n    return o >>> 0;\n}\nQ.sum64_hi = C0;\nfunction R0(e, t, r, i) {\n    var n = t + i;\n    return n >>> 0;\n}\nQ.sum64_lo = R0;\nfunction O0(e, t, r, i, n, o, h, p) {\n    var A = 0, m = t;\n    m = m + i >>> 0, A += m < t ? 1 : 0, m = m + o >>> 0, A += m < o ? 1 : 0, m = m + p >>> 0, A += m < p ? 1 : 0;\n    var w = e + r + n + h + A;\n    return w >>> 0;\n}\nQ.sum64_4_hi = O0;\nfunction P0(e, t, r, i, n, o, h, p) {\n    var A = t + i + o + p;\n    return A >>> 0;\n}\nQ.sum64_4_lo = P0;\nfunction D0(e, t, r, i, n, o, h, p, A, m) {\n    var w = 0, y = t;\n    y = y + i >>> 0, w += y < t ? 1 : 0, y = y + o >>> 0, w += y < o ? 1 : 0, y = y + p >>> 0, w += y < p ? 1 : 0, y = y + m >>> 0, w += y < m ? 1 : 0;\n    var S = e + r + n + h + A + w;\n    return S >>> 0;\n}\nQ.sum64_5_hi = D0;\nfunction F0(e, t, r, i, n, o, h, p, A, m) {\n    var w = t + i + o + p + m;\n    return w >>> 0;\n}\nQ.sum64_5_lo = F0;\nfunction T0(e, t, r) {\n    var i = t << 32 - r | e >>> r;\n    return i >>> 0;\n}\nQ.rotr64_hi = T0;\nfunction U0(e, t, r) {\n    var i = e << 32 - r | t >>> r;\n    return i >>> 0;\n}\nQ.rotr64_lo = U0;\nfunction k0(e, t, r) {\n    return e >>> r;\n}\nQ.shr64_hi = k0;\nfunction q0(e, t, r) {\n    var i = e << 32 - r | t >>> r;\n    return i >>> 0;\n}\nQ.shr64_lo = q0;\nvar fr = {}, df = Q, K0 = yr;\nfunction Fr() {\n    this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = \"big\", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;\n}\nfr.BlockHash = Fr, Fr.prototype.update = function(t, r) {\n    if (t = df.toArray(t, r), this.pending ? this.pending = this.pending.concat(t) : this.pending = t, this.pendingTotal += t.length, this.pending.length >= this._delta8) {\n        t = this.pending;\n        var i = t.length % this._delta8;\n        this.pending = t.slice(t.length - i, t.length), this.pending.length === 0 && (this.pending = null), t = df.join32(t, 0, t.length - i, this.endian);\n        for(var n = 0; n < t.length; n += this._delta32)this._update(t, n, n + this._delta32);\n    }\n    return this;\n}, Fr.prototype.digest = function(t) {\n    return this.update(this._pad()), K0(this.pending === null), this._digest(t);\n}, Fr.prototype._pad = function() {\n    var t = this.pendingTotal, r = this._delta8, i = r - (t + this.padLength) % r, n = new Array(i + this.padLength);\n    n[0] = 128;\n    for(var o = 1; o < i; o++)n[o] = 0;\n    if (t <<= 3, this.endian === \"big\") {\n        for(var h = 8; h < this.padLength; h++)n[o++] = 0;\n        n[o++] = 0, n[o++] = 0, n[o++] = 0, n[o++] = 0, n[o++] = t >>> 24 & 255, n[o++] = t >>> 16 & 255, n[o++] = t >>> 8 & 255, n[o++] = t & 255;\n    } else for(n[o++] = t & 255, n[o++] = t >>> 8 & 255, n[o++] = t >>> 16 & 255, n[o++] = t >>> 24 & 255, n[o++] = 0, n[o++] = 0, n[o++] = 0, n[o++] = 0, h = 8; h < this.padLength; h++)n[o++] = 0;\n    return n;\n};\nvar or = {}, ae = {}, H0 = Q, ue = H0.rotr32;\nfunction z0(e, t, r, i) {\n    if (e === 0) return pf(t, r, i);\n    if (e === 1 || e === 3) return mf(t, r, i);\n    if (e === 2) return vf(t, r, i);\n}\nae.ft_1 = z0;\nfunction pf(e, t, r) {\n    return e & t ^ ~e & r;\n}\nae.ch32 = pf;\nfunction vf(e, t, r) {\n    return e & t ^ e & r ^ t & r;\n}\nae.maj32 = vf;\nfunction mf(e, t, r) {\n    return e ^ t ^ r;\n}\nae.p32 = mf;\nfunction L0(e) {\n    return ue(e, 2) ^ ue(e, 13) ^ ue(e, 22);\n}\nae.s0_256 = L0;\nfunction j0(e) {\n    return ue(e, 6) ^ ue(e, 11) ^ ue(e, 25);\n}\nae.s1_256 = j0;\nfunction Q0(e) {\n    return ue(e, 7) ^ ue(e, 18) ^ e >>> 3;\n}\nae.g0_256 = Q0;\nfunction J0(e) {\n    return ue(e, 17) ^ ue(e, 19) ^ e >>> 10;\n}\nae.g1_256 = J0;\nvar sr = Q, G0 = fr, Y0 = ae, _i = sr.rotl32, wr = sr.sum32, V0 = sr.sum32_5, W0 = Y0.ft_1, gf = G0.BlockHash, X0 = [\n    1518500249,\n    1859775393,\n    2400959708,\n    3395469782\n];\nfunction he() {\n    if (!(this instanceof he)) return new he;\n    gf.call(this), this.h = [\n        1732584193,\n        4023233417,\n        2562383102,\n        271733878,\n        3285377520\n    ], this.W = new Array(80);\n}\nsr.inherits(he, gf);\nvar Z0 = he;\nhe.blockSize = 512, he.outSize = 160, he.hmacStrength = 80, he.padLength = 64, he.prototype._update = function(t, r) {\n    for(var i = this.W, n = 0; n < 16; n++)i[n] = t[r + n];\n    for(; n < i.length; n++)i[n] = _i(i[n - 3] ^ i[n - 8] ^ i[n - 14] ^ i[n - 16], 1);\n    var o = this.h[0], h = this.h[1], p = this.h[2], A = this.h[3], m = this.h[4];\n    for(n = 0; n < i.length; n++){\n        var w = ~~(n / 20), y = V0(_i(o, 5), W0(w, h, p, A), m, i[n], X0[w]);\n        m = A, A = p, p = _i(h, 30), h = o, o = y;\n    }\n    this.h[0] = wr(this.h[0], o), this.h[1] = wr(this.h[1], h), this.h[2] = wr(this.h[2], p), this.h[3] = wr(this.h[3], A), this.h[4] = wr(this.h[4], m);\n}, he.prototype._digest = function(t) {\n    return t === \"hex\" ? sr.toHex32(this.h, \"big\") : sr.split32(this.h, \"big\");\n};\nvar ar = Q, $0 = fr, ur = ae, ta = yr, ie = ar.sum32, ea = ar.sum32_4, ra = ar.sum32_5, ia = ur.ch32, na = ur.maj32, fa = ur.s0_256, oa = ur.s1_256, sa = ur.g0_256, aa = ur.g1_256, Af = $0.BlockHash, ua = [\n    1116352408,\n    1899447441,\n    3049323471,\n    3921009573,\n    961987163,\n    1508970993,\n    2453635748,\n    2870763221,\n    3624381080,\n    310598401,\n    607225278,\n    1426881987,\n    1925078388,\n    2162078206,\n    2614888103,\n    3248222580,\n    3835390401,\n    4022224774,\n    264347078,\n    604807628,\n    770255983,\n    1249150122,\n    1555081692,\n    1996064986,\n    2554220882,\n    2821834349,\n    2952996808,\n    3210313671,\n    3336571891,\n    3584528711,\n    113926993,\n    338241895,\n    666307205,\n    773529912,\n    1294757372,\n    1396182291,\n    1695183700,\n    1986661051,\n    2177026350,\n    2456956037,\n    2730485921,\n    2820302411,\n    3259730800,\n    3345764771,\n    3516065817,\n    3600352804,\n    4094571909,\n    275423344,\n    430227734,\n    506948616,\n    659060556,\n    883997877,\n    958139571,\n    1322822218,\n    1537002063,\n    1747873779,\n    1955562222,\n    2024104815,\n    2227730452,\n    2361852424,\n    2428436474,\n    2756734187,\n    3204031479,\n    3329325298\n];\nfunction ce() {\n    if (!(this instanceof ce)) return new ce;\n    Af.call(this), this.h = [\n        1779033703,\n        3144134277,\n        1013904242,\n        2773480762,\n        1359893119,\n        2600822924,\n        528734635,\n        1541459225\n    ], this.k = ua, this.W = new Array(64);\n}\nar.inherits(ce, Af);\nvar bf = ce;\nce.blockSize = 512, ce.outSize = 256, ce.hmacStrength = 192, ce.padLength = 64, ce.prototype._update = function(t, r) {\n    for(var i = this.W, n = 0; n < 16; n++)i[n] = t[r + n];\n    for(; n < i.length; n++)i[n] = ea(aa(i[n - 2]), i[n - 7], sa(i[n - 15]), i[n - 16]);\n    var o = this.h[0], h = this.h[1], p = this.h[2], A = this.h[3], m = this.h[4], w = this.h[5], y = this.h[6], S = this.h[7];\n    for(ta(this.k.length === i.length), n = 0; n < i.length; n++){\n        var I = ra(S, oa(m), ia(m, w, y), this.k[n], i[n]), N = ie(fa(o), na(o, h, p));\n        S = y, y = w, w = m, m = ie(A, I), A = p, p = h, h = o, o = ie(I, N);\n    }\n    this.h[0] = ie(this.h[0], o), this.h[1] = ie(this.h[1], h), this.h[2] = ie(this.h[2], p), this.h[3] = ie(this.h[3], A), this.h[4] = ie(this.h[4], m), this.h[5] = ie(this.h[5], w), this.h[6] = ie(this.h[6], y), this.h[7] = ie(this.h[7], S);\n}, ce.prototype._digest = function(t) {\n    return t === \"hex\" ? ar.toHex32(this.h, \"big\") : ar.split32(this.h, \"big\");\n};\nvar Bi = Q, yf = bf;\nfunction ye() {\n    if (!(this instanceof ye)) return new ye;\n    yf.call(this), this.h = [\n        3238371032,\n        914150663,\n        812702999,\n        4144912697,\n        4290775857,\n        1750603025,\n        1694076839,\n        3204075428\n    ];\n}\nBi.inherits(ye, yf);\nvar ha = ye;\nye.blockSize = 512, ye.outSize = 224, ye.hmacStrength = 192, ye.padLength = 64, ye.prototype._digest = function(t) {\n    return t === \"hex\" ? Bi.toHex32(this.h.slice(0, 7), \"big\") : Bi.split32(this.h.slice(0, 7), \"big\");\n};\nvar jt = Q, ca = fr, la = yr, le = jt.rotr64_hi, de = jt.rotr64_lo, wf = jt.shr64_hi, xf = jt.shr64_lo, Be = jt.sum64, Ci = jt.sum64_hi, Ri = jt.sum64_lo, da = jt.sum64_4_hi, pa = jt.sum64_4_lo, va = jt.sum64_5_hi, ma = jt.sum64_5_lo, Mf = ca.BlockHash, ga = [\n    1116352408,\n    3609767458,\n    1899447441,\n    602891725,\n    3049323471,\n    3964484399,\n    3921009573,\n    2173295548,\n    961987163,\n    4081628472,\n    1508970993,\n    3053834265,\n    2453635748,\n    2937671579,\n    2870763221,\n    3664609560,\n    3624381080,\n    2734883394,\n    310598401,\n    1164996542,\n    607225278,\n    1323610764,\n    1426881987,\n    3590304994,\n    1925078388,\n    4068182383,\n    2162078206,\n    991336113,\n    2614888103,\n    633803317,\n    3248222580,\n    3479774868,\n    3835390401,\n    2666613458,\n    4022224774,\n    944711139,\n    264347078,\n    2341262773,\n    604807628,\n    2007800933,\n    770255983,\n    1495990901,\n    1249150122,\n    1856431235,\n    1555081692,\n    3175218132,\n    1996064986,\n    2198950837,\n    2554220882,\n    3999719339,\n    2821834349,\n    766784016,\n    2952996808,\n    2566594879,\n    3210313671,\n    3203337956,\n    3336571891,\n    1034457026,\n    3584528711,\n    2466948901,\n    113926993,\n    3758326383,\n    338241895,\n    168717936,\n    666307205,\n    1188179964,\n    773529912,\n    1546045734,\n    1294757372,\n    1522805485,\n    1396182291,\n    2643833823,\n    1695183700,\n    2343527390,\n    1986661051,\n    1014477480,\n    2177026350,\n    1206759142,\n    2456956037,\n    344077627,\n    2730485921,\n    1290863460,\n    2820302411,\n    3158454273,\n    3259730800,\n    3505952657,\n    3345764771,\n    106217008,\n    3516065817,\n    3606008344,\n    3600352804,\n    1432725776,\n    4094571909,\n    1467031594,\n    275423344,\n    851169720,\n    430227734,\n    3100823752,\n    506948616,\n    1363258195,\n    659060556,\n    3750685593,\n    883997877,\n    3785050280,\n    958139571,\n    3318307427,\n    1322822218,\n    3812723403,\n    1537002063,\n    2003034995,\n    1747873779,\n    3602036899,\n    1955562222,\n    1575990012,\n    2024104815,\n    1125592928,\n    2227730452,\n    2716904306,\n    2361852424,\n    442776044,\n    2428436474,\n    593698344,\n    2756734187,\n    3733110249,\n    3204031479,\n    2999351573,\n    3329325298,\n    3815920427,\n    3391569614,\n    3928383900,\n    3515267271,\n    566280711,\n    3940187606,\n    3454069534,\n    4118630271,\n    4000239992,\n    116418474,\n    1914138554,\n    174292421,\n    2731055270,\n    289380356,\n    3203993006,\n    460393269,\n    320620315,\n    685471733,\n    587496836,\n    852142971,\n    1086792851,\n    1017036298,\n    365543100,\n    1126000580,\n    2618297676,\n    1288033470,\n    3409855158,\n    1501505948,\n    4234509866,\n    1607167915,\n    987167468,\n    1816402316,\n    1246189591\n];\nfunction ne() {\n    if (!(this instanceof ne)) return new ne;\n    Mf.call(this), this.h = [\n        1779033703,\n        4089235720,\n        3144134277,\n        2227873595,\n        1013904242,\n        4271175723,\n        2773480762,\n        1595750129,\n        1359893119,\n        2917565137,\n        2600822924,\n        725511199,\n        528734635,\n        4215389547,\n        1541459225,\n        327033209\n    ], this.k = ga, this.W = new Array(160);\n}\njt.inherits(ne, Mf);\nvar Ef = ne;\nne.blockSize = 1024, ne.outSize = 512, ne.hmacStrength = 192, ne.padLength = 128, ne.prototype._prepareBlock = function(t, r) {\n    for(var i = this.W, n = 0; n < 32; n++)i[n] = t[r + n];\n    for(; n < i.length; n += 2){\n        var o = _a(i[n - 4], i[n - 3]), h = Ba(i[n - 4], i[n - 3]), p = i[n - 14], A = i[n - 13], m = Na(i[n - 30], i[n - 29]), w = Ia(i[n - 30], i[n - 29]), y = i[n - 32], S = i[n - 31];\n        i[n] = da(o, h, p, A, m, w, y, S), i[n + 1] = pa(o, h, p, A, m, w, y, S);\n    }\n}, ne.prototype._update = function(t, r) {\n    this._prepareBlock(t, r);\n    var i = this.W, n = this.h[0], o = this.h[1], h = this.h[2], p = this.h[3], A = this.h[4], m = this.h[5], w = this.h[6], y = this.h[7], S = this.h[8], I = this.h[9], N = this.h[10], C = this.h[11], F = this.h[12], U = this.h[13], J = this.h[14], Bt = this.h[15];\n    la(this.k.length === i.length);\n    for(var G = 0; G < i.length; G += 2){\n        var H = J, z = Bt, Pt = Ea(S, I), W = Sa(S, I), Rt = Aa(S, I, N, C, F), Yt = ba(S, I, N, C, F, U), Y = this.k[G], Vt = this.k[G + 1], b = i[G], f = i[G + 1], a = va(H, z, Pt, W, Rt, Yt, Y, Vt, b, f), c = ma(H, z, Pt, W, Rt, Yt, Y, Vt, b, f);\n        H = xa(n, o), z = Ma(n, o), Pt = ya(n, o, h, p, A), W = wa(n, o, h, p, A, m);\n        var d = Ci(H, z, Pt, W), g = Ri(H, z, Pt, W);\n        J = F, Bt = U, F = N, U = C, N = S, C = I, S = Ci(w, y, a, c), I = Ri(y, y, a, c), w = A, y = m, A = h, m = p, h = n, p = o, n = Ci(a, c, d, g), o = Ri(a, c, d, g);\n    }\n    Be(this.h, 0, n, o), Be(this.h, 2, h, p), Be(this.h, 4, A, m), Be(this.h, 6, w, y), Be(this.h, 8, S, I), Be(this.h, 10, N, C), Be(this.h, 12, F, U), Be(this.h, 14, J, Bt);\n}, ne.prototype._digest = function(t) {\n    return t === \"hex\" ? jt.toHex32(this.h, \"big\") : jt.split32(this.h, \"big\");\n};\nfunction Aa(e, t, r, i, n) {\n    var o = e & r ^ ~e & n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction ba(e, t, r, i, n, o) {\n    var h = t & i ^ ~t & o;\n    return h < 0 && (h += 4294967296), h;\n}\nfunction ya(e, t, r, i, n) {\n    var o = e & r ^ e & n ^ r & n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction wa(e, t, r, i, n, o) {\n    var h = t & i ^ t & o ^ i & o;\n    return h < 0 && (h += 4294967296), h;\n}\nfunction xa(e, t) {\n    var r = le(e, t, 28), i = le(t, e, 2), n = le(t, e, 7), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction Ma(e, t) {\n    var r = de(e, t, 28), i = de(t, e, 2), n = de(t, e, 7), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction Ea(e, t) {\n    var r = le(e, t, 14), i = le(e, t, 18), n = le(t, e, 9), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction Sa(e, t) {\n    var r = de(e, t, 14), i = de(e, t, 18), n = de(t, e, 9), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction Na(e, t) {\n    var r = le(e, t, 1), i = le(e, t, 8), n = wf(e, t, 7), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction Ia(e, t) {\n    var r = de(e, t, 1), i = de(e, t, 8), n = xf(e, t, 7), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction _a(e, t) {\n    var r = le(e, t, 19), i = le(t, e, 29), n = wf(e, t, 6), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction Ba(e, t) {\n    var r = de(e, t, 19), i = de(t, e, 29), n = xf(e, t, 6), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nvar Oi = Q, Sf = Ef;\nfunction we() {\n    if (!(this instanceof we)) return new we;\n    Sf.call(this), this.h = [\n        3418070365,\n        3238371032,\n        1654270250,\n        914150663,\n        2438529370,\n        812702999,\n        355462360,\n        4144912697,\n        1731405415,\n        4290775857,\n        2394180231,\n        1750603025,\n        3675008525,\n        1694076839,\n        1203062813,\n        3204075428\n    ];\n}\nOi.inherits(we, Sf);\nvar Ca = we;\nwe.blockSize = 1024, we.outSize = 384, we.hmacStrength = 192, we.padLength = 128, we.prototype._digest = function(t) {\n    return t === \"hex\" ? Oi.toHex32(this.h.slice(0, 12), \"big\") : Oi.split32(this.h.slice(0, 12), \"big\");\n}, or.sha1 = Z0, or.sha224 = ha, or.sha256 = bf, or.sha384 = Ca, or.sha512 = Ef;\nvar Nf = {}, Xe = Q, Ra = fr, Tr = Xe.rotl32, If = Xe.sum32, xr = Xe.sum32_3, _f = Xe.sum32_4, Bf = Ra.BlockHash;\nfunction pe() {\n    if (!(this instanceof pe)) return new pe;\n    Bf.call(this), this.h = [\n        1732584193,\n        4023233417,\n        2562383102,\n        271733878,\n        3285377520\n    ], this.endian = \"little\";\n}\nXe.inherits(pe, Bf), Nf.ripemd160 = pe, pe.blockSize = 512, pe.outSize = 160, pe.hmacStrength = 192, pe.padLength = 64, pe.prototype._update = function(t, r) {\n    for(var i = this.h[0], n = this.h[1], o = this.h[2], h = this.h[3], p = this.h[4], A = i, m = n, w = o, y = h, S = p, I = 0; I < 80; I++){\n        var N = If(Tr(_f(i, Cf(I, n, o, h), t[Da[I] + r], Oa(I)), Ta[I]), p);\n        i = p, p = h, h = Tr(o, 10), o = n, n = N, N = If(Tr(_f(A, Cf(79 - I, m, w, y), t[Fa[I] + r], Pa(I)), Ua[I]), S), A = S, S = y, y = Tr(w, 10), w = m, m = N;\n    }\n    N = xr(this.h[1], o, y), this.h[1] = xr(this.h[2], h, S), this.h[2] = xr(this.h[3], p, A), this.h[3] = xr(this.h[4], i, m), this.h[4] = xr(this.h[0], n, w), this.h[0] = N;\n}, pe.prototype._digest = function(t) {\n    return t === \"hex\" ? Xe.toHex32(this.h, \"little\") : Xe.split32(this.h, \"little\");\n};\nfunction Cf(e, t, r, i) {\n    return e <= 15 ? t ^ r ^ i : e <= 31 ? t & r | ~t & i : e <= 47 ? (t | ~r) ^ i : e <= 63 ? t & i | r & ~i : t ^ (r | ~i);\n}\nfunction Oa(e) {\n    return e <= 15 ? 0 : e <= 31 ? 1518500249 : e <= 47 ? 1859775393 : e <= 63 ? 2400959708 : 2840853838;\n}\nfunction Pa(e) {\n    return e <= 15 ? 1352829926 : e <= 31 ? 1548603684 : e <= 47 ? 1836072691 : e <= 63 ? 2053994217 : 0;\n}\nvar Da = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    7,\n    4,\n    13,\n    1,\n    10,\n    6,\n    15,\n    3,\n    12,\n    0,\n    9,\n    5,\n    2,\n    14,\n    11,\n    8,\n    3,\n    10,\n    14,\n    4,\n    9,\n    15,\n    8,\n    1,\n    2,\n    7,\n    0,\n    6,\n    13,\n    11,\n    5,\n    12,\n    1,\n    9,\n    11,\n    10,\n    0,\n    8,\n    12,\n    4,\n    13,\n    3,\n    7,\n    15,\n    14,\n    5,\n    6,\n    2,\n    4,\n    0,\n    5,\n    9,\n    7,\n    12,\n    2,\n    10,\n    14,\n    1,\n    3,\n    8,\n    11,\n    6,\n    15,\n    13\n], Fa = [\n    5,\n    14,\n    7,\n    0,\n    9,\n    2,\n    11,\n    4,\n    13,\n    6,\n    15,\n    8,\n    1,\n    10,\n    3,\n    12,\n    6,\n    11,\n    3,\n    7,\n    0,\n    13,\n    5,\n    10,\n    14,\n    15,\n    8,\n    12,\n    4,\n    9,\n    1,\n    2,\n    15,\n    5,\n    1,\n    3,\n    7,\n    14,\n    6,\n    9,\n    11,\n    8,\n    12,\n    2,\n    10,\n    0,\n    4,\n    13,\n    8,\n    6,\n    4,\n    1,\n    3,\n    11,\n    15,\n    0,\n    5,\n    12,\n    2,\n    13,\n    9,\n    7,\n    10,\n    14,\n    12,\n    15,\n    10,\n    4,\n    1,\n    5,\n    8,\n    7,\n    6,\n    2,\n    13,\n    14,\n    0,\n    3,\n    9,\n    11\n], Ta = [\n    11,\n    14,\n    15,\n    12,\n    5,\n    8,\n    7,\n    9,\n    11,\n    13,\n    14,\n    15,\n    6,\n    7,\n    9,\n    8,\n    7,\n    6,\n    8,\n    13,\n    11,\n    9,\n    7,\n    15,\n    7,\n    12,\n    15,\n    9,\n    11,\n    7,\n    13,\n    12,\n    11,\n    13,\n    6,\n    7,\n    14,\n    9,\n    13,\n    15,\n    14,\n    8,\n    13,\n    6,\n    5,\n    12,\n    7,\n    5,\n    11,\n    12,\n    14,\n    15,\n    14,\n    15,\n    9,\n    8,\n    9,\n    14,\n    5,\n    6,\n    8,\n    6,\n    5,\n    12,\n    9,\n    15,\n    5,\n    11,\n    6,\n    8,\n    13,\n    12,\n    5,\n    12,\n    13,\n    14,\n    11,\n    8,\n    5,\n    6\n], Ua = [\n    8,\n    9,\n    9,\n    11,\n    13,\n    15,\n    15,\n    5,\n    7,\n    7,\n    8,\n    11,\n    14,\n    14,\n    12,\n    6,\n    9,\n    13,\n    15,\n    7,\n    12,\n    8,\n    9,\n    11,\n    7,\n    7,\n    12,\n    7,\n    6,\n    15,\n    13,\n    11,\n    9,\n    7,\n    15,\n    11,\n    8,\n    6,\n    6,\n    14,\n    12,\n    13,\n    5,\n    14,\n    13,\n    13,\n    7,\n    5,\n    15,\n    5,\n    8,\n    11,\n    14,\n    14,\n    6,\n    14,\n    6,\n    9,\n    12,\n    9,\n    12,\n    5,\n    15,\n    8,\n    8,\n    5,\n    12,\n    9,\n    12,\n    5,\n    14,\n    6,\n    8,\n    13,\n    6,\n    5,\n    15,\n    13,\n    11,\n    11\n], ka = Q, qa = yr;\nfunction hr(e, t, r) {\n    if (!(this instanceof hr)) return new hr(e, t, r);\n    this.Hash = e, this.blockSize = e.blockSize / 8, this.outSize = e.outSize / 8, this.inner = null, this.outer = null, this._init(ka.toArray(t, r));\n}\nvar Ka = hr;\nhr.prototype._init = function(t) {\n    t.length > this.blockSize && (t = new this.Hash().update(t).digest()), qa(t.length <= this.blockSize);\n    for(var r = t.length; r < this.blockSize; r++)t.push(0);\n    for(r = 0; r < t.length; r++)t[r] ^= 54;\n    for(this.inner = new this.Hash().update(t), r = 0; r < t.length; r++)t[r] ^= 106;\n    this.outer = new this.Hash().update(t);\n}, hr.prototype.update = function(t, r) {\n    return this.inner.update(t, r), this;\n}, hr.prototype.digest = function(t) {\n    return this.outer.update(this.inner.digest()), this.outer.digest(t);\n}, function(e) {\n    var t = e;\n    t.utils = Q, t.common = fr, t.sha = or, t.ripemd = Nf, t.hmac = Ka, t.sha1 = t.sha.sha1, t.sha256 = t.sha.sha256, t.sha224 = t.sha.sha224, t.sha384 = t.sha.sha384, t.sha512 = t.sha.sha512, t.ripemd160 = t.ripemd.ripemd160;\n}(se);\nfunction cr(e, t, r) {\n    return r = {\n        path: t,\n        exports: {},\n        require: function(i, n) {\n            return Ha(i, n ?? r.path);\n        }\n    }, e(r, r.exports), r.exports;\n}\nfunction Ha() {\n    throw new Error(\"Dynamic requires are not currently supported by @rollup/plugin-commonjs\");\n}\nvar Pi = Rf;\nfunction Rf(e, t) {\n    if (!e) throw new Error(t || \"Assertion failed\");\n}\nRf.equal = function(t, r, i) {\n    if (t != r) throw new Error(i || \"Assertion failed: \" + t + \" != \" + r);\n};\nvar fe = cr(function(e, t) {\n    var r = t;\n    function i(h, p) {\n        if (Array.isArray(h)) return h.slice();\n        if (!h) return [];\n        var A = [];\n        if (typeof h != \"string\") {\n            for(var m = 0; m < h.length; m++)A[m] = h[m] | 0;\n            return A;\n        }\n        if (p === \"hex\") {\n            h = h.replace(/[^a-z0-9]+/ig, \"\"), h.length % 2 !== 0 && (h = \"0\" + h);\n            for(var m = 0; m < h.length; m += 2)A.push(parseInt(h[m] + h[m + 1], 16));\n        } else for(var m = 0; m < h.length; m++){\n            var w = h.charCodeAt(m), y = w >> 8, S = w & 255;\n            y ? A.push(y, S) : A.push(S);\n        }\n        return A;\n    }\n    r.toArray = i;\n    function n(h) {\n        return h.length === 1 ? \"0\" + h : h;\n    }\n    r.zero2 = n;\n    function o(h) {\n        for(var p = \"\", A = 0; A < h.length; A++)p += n(h[A].toString(16));\n        return p;\n    }\n    r.toHex = o, r.encode = function(p, A) {\n        return A === \"hex\" ? o(p) : p;\n    };\n}), Jt = cr(function(e, t) {\n    var r = t;\n    r.assert = Pi, r.toArray = fe.toArray, r.zero2 = fe.zero2, r.toHex = fe.toHex, r.encode = fe.encode;\n    function i(A, m, w) {\n        var y = new Array(Math.max(A.bitLength(), w) + 1);\n        y.fill(0);\n        for(var S = 1 << m + 1, I = A.clone(), N = 0; N < y.length; N++){\n            var C, F = I.andln(S - 1);\n            I.isOdd() ? (F > (S >> 1) - 1 ? C = (S >> 1) - F : C = F, I.isubn(C)) : C = 0, y[N] = C, I.iushrn(1);\n        }\n        return y;\n    }\n    r.getNAF = i;\n    function n(A, m) {\n        var w = [\n            [],\n            []\n        ];\n        A = A.clone(), m = m.clone();\n        for(var y = 0, S = 0, I; A.cmpn(-y) > 0 || m.cmpn(-S) > 0;){\n            var N = A.andln(3) + y & 3, C = m.andln(3) + S & 3;\n            N === 3 && (N = -1), C === 3 && (C = -1);\n            var F;\n            N & 1 ? (I = A.andln(7) + y & 7, (I === 3 || I === 5) && C === 2 ? F = -N : F = N) : F = 0, w[0].push(F);\n            var U;\n            C & 1 ? (I = m.andln(7) + S & 7, (I === 3 || I === 5) && N === 2 ? U = -C : U = C) : U = 0, w[1].push(U), 2 * y === F + 1 && (y = 1 - y), 2 * S === U + 1 && (S = 1 - S), A.iushrn(1), m.iushrn(1);\n        }\n        return w;\n    }\n    r.getJSF = n;\n    function o(A, m, w) {\n        var y = \"_\" + m;\n        A.prototype[m] = function() {\n            return this[y] !== void 0 ? this[y] : this[y] = w.call(this);\n        };\n    }\n    r.cachedProperty = o;\n    function h(A) {\n        return typeof A == \"string\" ? r.toArray(A, \"hex\") : A;\n    }\n    r.parseBytes = h;\n    function p(A) {\n        return new K(A, \"hex\", \"le\");\n    }\n    r.intFromLE = p;\n}), Ur = Jt.getNAF, za = Jt.getJSF, kr = Jt.assert;\nfunction Ce(e, t) {\n    this.type = e, this.p = new K(t.p, 16), this.red = t.prime ? K.red(t.prime) : K.mont(this.p), this.zero = new K(0).toRed(this.red), this.one = new K(1).toRed(this.red), this.two = new K(2).toRed(this.red), this.n = t.n && new K(t.n, 16), this.g = t.g && this.pointFromJSON(t.g, t.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;\n    var r = this.n && this.p.div(this.n);\n    !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));\n}\nvar Ze = Ce;\nCe.prototype.point = function() {\n    throw new Error(\"Not implemented\");\n}, Ce.prototype.validate = function() {\n    throw new Error(\"Not implemented\");\n}, Ce.prototype._fixedNafMul = function(t, r) {\n    kr(t.precomputed);\n    var i = t._getDoubles(), n = Ur(r, 1, this._bitLength), o = (1 << i.step + 1) - (i.step % 2 === 0 ? 2 : 1);\n    o /= 3;\n    var h = [], p, A;\n    for(p = 0; p < n.length; p += i.step){\n        A = 0;\n        for(var m = p + i.step - 1; m >= p; m--)A = (A << 1) + n[m];\n        h.push(A);\n    }\n    for(var w = this.jpoint(null, null, null), y = this.jpoint(null, null, null), S = o; S > 0; S--){\n        for(p = 0; p < h.length; p++)A = h[p], A === S ? y = y.mixedAdd(i.points[p]) : A === -S && (y = y.mixedAdd(i.points[p].neg()));\n        w = w.add(y);\n    }\n    return w.toP();\n}, Ce.prototype._wnafMul = function(t, r) {\n    var i = 4, n = t._getNAFPoints(i);\n    i = n.wnd;\n    for(var o = n.points, h = Ur(r, i, this._bitLength), p = this.jpoint(null, null, null), A = h.length - 1; A >= 0; A--){\n        for(var m = 0; A >= 0 && h[A] === 0; A--)m++;\n        if (A >= 0 && m++, p = p.dblp(m), A < 0) break;\n        var w = h[A];\n        kr(w !== 0), t.type === \"affine\" ? w > 0 ? p = p.mixedAdd(o[w - 1 >> 1]) : p = p.mixedAdd(o[-w - 1 >> 1].neg()) : w > 0 ? p = p.add(o[w - 1 >> 1]) : p = p.add(o[-w - 1 >> 1].neg());\n    }\n    return t.type === \"affine\" ? p.toP() : p;\n}, Ce.prototype._wnafMulAdd = function(t, r, i, n, o) {\n    var h = this._wnafT1, p = this._wnafT2, A = this._wnafT3, m = 0, w, y, S;\n    for(w = 0; w < n; w++){\n        S = r[w];\n        var I = S._getNAFPoints(t);\n        h[w] = I.wnd, p[w] = I.points;\n    }\n    for(w = n - 1; w >= 1; w -= 2){\n        var N = w - 1, C = w;\n        if (h[N] !== 1 || h[C] !== 1) {\n            A[N] = Ur(i[N], h[N], this._bitLength), A[C] = Ur(i[C], h[C], this._bitLength), m = Math.max(A[N].length, m), m = Math.max(A[C].length, m);\n            continue;\n        }\n        var F = [\n            r[N],\n            null,\n            null,\n            r[C]\n        ];\n        r[N].y.cmp(r[C].y) === 0 ? (F[1] = r[N].add(r[C]), F[2] = r[N].toJ().mixedAdd(r[C].neg())) : r[N].y.cmp(r[C].y.redNeg()) === 0 ? (F[1] = r[N].toJ().mixedAdd(r[C]), F[2] = r[N].add(r[C].neg())) : (F[1] = r[N].toJ().mixedAdd(r[C]), F[2] = r[N].toJ().mixedAdd(r[C].neg()));\n        var U = [\n            -3,\n            -1,\n            -5,\n            -7,\n            0,\n            7,\n            5,\n            1,\n            3\n        ], J = za(i[N], i[C]);\n        for(m = Math.max(J[0].length, m), A[N] = new Array(m), A[C] = new Array(m), y = 0; y < m; y++){\n            var Bt = J[0][y] | 0, G = J[1][y] | 0;\n            A[N][y] = U[(Bt + 1) * 3 + (G + 1)], A[C][y] = 0, p[N] = F;\n        }\n    }\n    var H = this.jpoint(null, null, null), z = this._wnafT4;\n    for(w = m; w >= 0; w--){\n        for(var Pt = 0; w >= 0;){\n            var W = !0;\n            for(y = 0; y < n; y++)z[y] = A[y][w] | 0, z[y] !== 0 && (W = !1);\n            if (!W) break;\n            Pt++, w--;\n        }\n        if (w >= 0 && Pt++, H = H.dblp(Pt), w < 0) break;\n        for(y = 0; y < n; y++){\n            var Rt = z[y];\n            Rt !== 0 && (Rt > 0 ? S = p[y][Rt - 1 >> 1] : Rt < 0 && (S = p[y][-Rt - 1 >> 1].neg()), S.type === \"affine\" ? H = H.mixedAdd(S) : H = H.add(S));\n        }\n    }\n    for(w = 0; w < n; w++)p[w] = null;\n    return o ? H : H.toP();\n};\nfunction Xt(e, t) {\n    this.curve = e, this.type = t, this.precomputed = null;\n}\nCe.BasePoint = Xt, Xt.prototype.eq = function() {\n    throw new Error(\"Not implemented\");\n}, Xt.prototype.validate = function() {\n    return this.curve.validate(this);\n}, Ce.prototype.decodePoint = function(t, r) {\n    t = Jt.toArray(t, r);\n    var i = this.p.byteLength();\n    if ((t[0] === 4 || t[0] === 6 || t[0] === 7) && t.length - 1 === 2 * i) {\n        t[0] === 6 ? kr(t[t.length - 1] % 2 === 0) : t[0] === 7 && kr(t[t.length - 1] % 2 === 1);\n        var n = this.point(t.slice(1, 1 + i), t.slice(1 + i, 1 + 2 * i));\n        return n;\n    } else if ((t[0] === 2 || t[0] === 3) && t.length - 1 === i) return this.pointFromX(t.slice(1, 1 + i), t[0] === 3);\n    throw new Error(\"Unknown point format\");\n}, Xt.prototype.encodeCompressed = function(t) {\n    return this.encode(t, !0);\n}, Xt.prototype._encode = function(t) {\n    var r = this.curve.p.byteLength(), i = this.getX().toArray(\"be\", r);\n    return t ? [\n        this.getY().isEven() ? 2 : 3\n    ].concat(i) : [\n        4\n    ].concat(i, this.getY().toArray(\"be\", r));\n}, Xt.prototype.encode = function(t, r) {\n    return Jt.encode(this._encode(r), t);\n}, Xt.prototype.precompute = function(t) {\n    if (this.precomputed) return this;\n    var r = {\n        doubles: null,\n        naf: null,\n        beta: null\n    };\n    return r.naf = this._getNAFPoints(8), r.doubles = this._getDoubles(4, t), r.beta = this._getBeta(), this.precomputed = r, this;\n}, Xt.prototype._hasDoubles = function(t) {\n    if (!this.precomputed) return !1;\n    var r = this.precomputed.doubles;\n    return r ? r.points.length >= Math.ceil((t.bitLength() + 1) / r.step) : !1;\n}, Xt.prototype._getDoubles = function(t, r) {\n    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;\n    for(var i = [\n        this\n    ], n = this, o = 0; o < r; o += t){\n        for(var h = 0; h < t; h++)n = n.dbl();\n        i.push(n);\n    }\n    return {\n        step: t,\n        points: i\n    };\n}, Xt.prototype._getNAFPoints = function(t) {\n    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;\n    for(var r = [\n        this\n    ], i = (1 << t) - 1, n = i === 1 ? null : this.dbl(), o = 1; o < i; o++)r[o] = r[o - 1].add(n);\n    return {\n        wnd: t,\n        points: r\n    };\n}, Xt.prototype._getBeta = function() {\n    return null;\n}, Xt.prototype.dblp = function(t) {\n    for(var r = this, i = 0; i < t; i++)r = r.dbl();\n    return r;\n};\nvar Di = cr(function(e) {\n    typeof Object.create == \"function\" ? e.exports = function(r, i) {\n        i && (r.super_ = i, r.prototype = Object.create(i.prototype, {\n            constructor: {\n                value: r,\n                enumerable: !1,\n                writable: !0,\n                configurable: !0\n            }\n        }));\n    } : e.exports = function(r, i) {\n        if (i) {\n            r.super_ = i;\n            var n = function() {};\n            n.prototype = i.prototype, r.prototype = new n, r.prototype.constructor = r;\n        }\n    };\n}), La = Jt.assert;\nfunction Zt(e) {\n    Ze.call(this, \"short\", e), this.a = new K(e.a, 16).toRed(this.red), this.b = new K(e.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = this.a.fromRed().cmpn(0) === 0, this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0, this.endo = this._getEndomorphism(e), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);\n}\nDi(Zt, Ze);\nvar ja = Zt;\nZt.prototype._getEndomorphism = function(t) {\n    if (!(!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)) {\n        var r, i;\n        if (t.beta) r = new K(t.beta, 16).toRed(this.red);\n        else {\n            var n = this._getEndoRoots(this.p);\n            r = n[0].cmp(n[1]) < 0 ? n[0] : n[1], r = r.toRed(this.red);\n        }\n        if (t.lambda) i = new K(t.lambda, 16);\n        else {\n            var o = this._getEndoRoots(this.n);\n            this.g.mul(o[0]).x.cmp(this.g.x.redMul(r)) === 0 ? i = o[0] : (i = o[1], La(this.g.mul(i).x.cmp(this.g.x.redMul(r)) === 0));\n        }\n        var h;\n        return t.basis ? h = t.basis.map(function(p) {\n            return {\n                a: new K(p.a, 16),\n                b: new K(p.b, 16)\n            };\n        }) : h = this._getEndoBasis(i), {\n            beta: r,\n            lambda: i,\n            basis: h\n        };\n    }\n}, Zt.prototype._getEndoRoots = function(t) {\n    var r = t === this.p ? this.red : K.mont(t), i = new K(2).toRed(r).redInvm(), n = i.redNeg(), o = new K(3).toRed(r).redNeg().redSqrt().redMul(i), h = n.redAdd(o).fromRed(), p = n.redSub(o).fromRed();\n    return [\n        h,\n        p\n    ];\n}, Zt.prototype._getEndoBasis = function(t) {\n    for(var r = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), i = t, n = this.n.clone(), o = new K(1), h = new K(0), p = new K(0), A = new K(1), m, w, y, S, I, N, C, F = 0, U, J; i.cmpn(0) !== 0;){\n        var Bt = n.div(i);\n        U = n.sub(Bt.mul(i)), J = p.sub(Bt.mul(o));\n        var G = A.sub(Bt.mul(h));\n        if (!y && U.cmp(r) < 0) m = C.neg(), w = o, y = U.neg(), S = J;\n        else if (y && ++F === 2) break;\n        C = U, n = i, i = U, p = o, o = J, A = h, h = G;\n    }\n    I = U.neg(), N = J;\n    var H = y.sqr().add(S.sqr()), z = I.sqr().add(N.sqr());\n    return z.cmp(H) >= 0 && (I = m, N = w), y.negative && (y = y.neg(), S = S.neg()), I.negative && (I = I.neg(), N = N.neg()), [\n        {\n            a: y,\n            b: S\n        },\n        {\n            a: I,\n            b: N\n        }\n    ];\n}, Zt.prototype._endoSplit = function(t) {\n    var r = this.endo.basis, i = r[0], n = r[1], o = n.b.mul(t).divRound(this.n), h = i.b.neg().mul(t).divRound(this.n), p = o.mul(i.a), A = h.mul(n.a), m = o.mul(i.b), w = h.mul(n.b), y = t.sub(p).sub(A), S = m.add(w).neg();\n    return {\n        k1: y,\n        k2: S\n    };\n}, Zt.prototype.pointFromX = function(t, r) {\n    t = new K(t, 16), t.red || (t = t.toRed(this.red));\n    var i = t.redSqr().redMul(t).redIAdd(t.redMul(this.a)).redIAdd(this.b), n = i.redSqrt();\n    if (n.redSqr().redSub(i).cmp(this.zero) !== 0) throw new Error(\"invalid point\");\n    var o = n.fromRed().isOdd();\n    return (r && !o || !r && o) && (n = n.redNeg()), this.point(t, n);\n}, Zt.prototype.validate = function(t) {\n    if (t.inf) return !0;\n    var r = t.x, i = t.y, n = this.a.redMul(r), o = r.redSqr().redMul(r).redIAdd(n).redIAdd(this.b);\n    return i.redSqr().redISub(o).cmpn(0) === 0;\n}, Zt.prototype._endoWnafMulAdd = function(t, r, i) {\n    for(var n = this._endoWnafT1, o = this._endoWnafT2, h = 0; h < t.length; h++){\n        var p = this._endoSplit(r[h]), A = t[h], m = A._getBeta();\n        p.k1.negative && (p.k1.ineg(), A = A.neg(!0)), p.k2.negative && (p.k2.ineg(), m = m.neg(!0)), n[h * 2] = A, n[h * 2 + 1] = m, o[h * 2] = p.k1, o[h * 2 + 1] = p.k2;\n    }\n    for(var w = this._wnafMulAdd(1, n, o, h * 2, i), y = 0; y < h * 2; y++)n[y] = null, o[y] = null;\n    return w;\n};\nfunction Ft(e, t, r, i) {\n    Ze.BasePoint.call(this, e, \"affine\"), t === null && r === null ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new K(t, 16), this.y = new K(r, 16), i && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);\n}\nDi(Ft, Ze.BasePoint), Zt.prototype.point = function(t, r, i) {\n    return new Ft(this, t, r, i);\n}, Zt.prototype.pointFromJSON = function(t, r) {\n    return Ft.fromJSON(this, t, r);\n}, Ft.prototype._getBeta = function() {\n    if (this.curve.endo) {\n        var t = this.precomputed;\n        if (t && t.beta) return t.beta;\n        var r = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n        if (t) {\n            var i = this.curve, n = function(o) {\n                return i.point(o.x.redMul(i.endo.beta), o.y);\n            };\n            t.beta = r, r.precomputed = {\n                beta: null,\n                naf: t.naf && {\n                    wnd: t.naf.wnd,\n                    points: t.naf.points.map(n)\n                },\n                doubles: t.doubles && {\n                    step: t.doubles.step,\n                    points: t.doubles.points.map(n)\n                }\n            };\n        }\n        return r;\n    }\n}, Ft.prototype.toJSON = function() {\n    return this.precomputed ? [\n        this.x,\n        this.y,\n        this.precomputed && {\n            doubles: this.precomputed.doubles && {\n                step: this.precomputed.doubles.step,\n                points: this.precomputed.doubles.points.slice(1)\n            },\n            naf: this.precomputed.naf && {\n                wnd: this.precomputed.naf.wnd,\n                points: this.precomputed.naf.points.slice(1)\n            }\n        }\n    ] : [\n        this.x,\n        this.y\n    ];\n}, Ft.fromJSON = function(t, r, i) {\n    typeof r == \"string\" && (r = JSON.parse(r));\n    var n = t.point(r[0], r[1], i);\n    if (!r[2]) return n;\n    function o(p) {\n        return t.point(p[0], p[1], i);\n    }\n    var h = r[2];\n    return n.precomputed = {\n        beta: null,\n        doubles: h.doubles && {\n            step: h.doubles.step,\n            points: [\n                n\n            ].concat(h.doubles.points.map(o))\n        },\n        naf: h.naf && {\n            wnd: h.naf.wnd,\n            points: [\n                n\n            ].concat(h.naf.points.map(o))\n        }\n    }, n;\n}, Ft.prototype.inspect = function() {\n    return this.isInfinity() ? \"<EC Point Infinity>\" : \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \">\";\n}, Ft.prototype.isInfinity = function() {\n    return this.inf;\n}, Ft.prototype.add = function(t) {\n    if (this.inf) return t;\n    if (t.inf) return this;\n    if (this.eq(t)) return this.dbl();\n    if (this.neg().eq(t)) return this.curve.point(null, null);\n    if (this.x.cmp(t.x) === 0) return this.curve.point(null, null);\n    var r = this.y.redSub(t.y);\n    r.cmpn(0) !== 0 && (r = r.redMul(this.x.redSub(t.x).redInvm()));\n    var i = r.redSqr().redISub(this.x).redISub(t.x), n = r.redMul(this.x.redSub(i)).redISub(this.y);\n    return this.curve.point(i, n);\n}, Ft.prototype.dbl = function() {\n    if (this.inf) return this;\n    var t = this.y.redAdd(this.y);\n    if (t.cmpn(0) === 0) return this.curve.point(null, null);\n    var r = this.curve.a, i = this.x.redSqr(), n = t.redInvm(), o = i.redAdd(i).redIAdd(i).redIAdd(r).redMul(n), h = o.redSqr().redISub(this.x.redAdd(this.x)), p = o.redMul(this.x.redSub(h)).redISub(this.y);\n    return this.curve.point(h, p);\n}, Ft.prototype.getX = function() {\n    return this.x.fromRed();\n}, Ft.prototype.getY = function() {\n    return this.y.fromRed();\n}, Ft.prototype.mul = function(t) {\n    return t = new K(t, 16), this.isInfinity() ? this : this._hasDoubles(t) ? this.curve._fixedNafMul(this, t) : this.curve.endo ? this.curve._endoWnafMulAdd([\n        this\n    ], [\n        t\n    ]) : this.curve._wnafMul(this, t);\n}, Ft.prototype.mulAdd = function(t, r, i) {\n    var n = [\n        this,\n        r\n    ], o = [\n        t,\n        i\n    ];\n    return this.curve.endo ? this.curve._endoWnafMulAdd(n, o) : this.curve._wnafMulAdd(1, n, o, 2);\n}, Ft.prototype.jmulAdd = function(t, r, i) {\n    var n = [\n        this,\n        r\n    ], o = [\n        t,\n        i\n    ];\n    return this.curve.endo ? this.curve._endoWnafMulAdd(n, o, !0) : this.curve._wnafMulAdd(1, n, o, 2, !0);\n}, Ft.prototype.eq = function(t) {\n    return this === t || this.inf === t.inf && (this.inf || this.x.cmp(t.x) === 0 && this.y.cmp(t.y) === 0);\n}, Ft.prototype.neg = function(t) {\n    if (this.inf) return this;\n    var r = this.curve.point(this.x, this.y.redNeg());\n    if (t && this.precomputed) {\n        var i = this.precomputed, n = function(o) {\n            return o.neg();\n        };\n        r.precomputed = {\n            naf: i.naf && {\n                wnd: i.naf.wnd,\n                points: i.naf.points.map(n)\n            },\n            doubles: i.doubles && {\n                step: i.doubles.step,\n                points: i.doubles.points.map(n)\n            }\n        };\n    }\n    return r;\n}, Ft.prototype.toJ = function() {\n    if (this.inf) return this.curve.jpoint(null, null, null);\n    var t = this.curve.jpoint(this.x, this.y, this.curve.one);\n    return t;\n};\nfunction Tt(e, t, r, i) {\n    Ze.BasePoint.call(this, e, \"jacobian\"), t === null && r === null && i === null ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new K(0)) : (this.x = new K(t, 16), this.y = new K(r, 16), this.z = new K(i, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;\n}\nDi(Tt, Ze.BasePoint), Zt.prototype.jpoint = function(t, r, i) {\n    return new Tt(this, t, r, i);\n}, Tt.prototype.toP = function() {\n    if (this.isInfinity()) return this.curve.point(null, null);\n    var t = this.z.redInvm(), r = t.redSqr(), i = this.x.redMul(r), n = this.y.redMul(r).redMul(t);\n    return this.curve.point(i, n);\n}, Tt.prototype.neg = function() {\n    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n}, Tt.prototype.add = function(t) {\n    if (this.isInfinity()) return t;\n    if (t.isInfinity()) return this;\n    var r = t.z.redSqr(), i = this.z.redSqr(), n = this.x.redMul(r), o = t.x.redMul(i), h = this.y.redMul(r.redMul(t.z)), p = t.y.redMul(i.redMul(this.z)), A = n.redSub(o), m = h.redSub(p);\n    if (A.cmpn(0) === 0) return m.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();\n    var w = A.redSqr(), y = w.redMul(A), S = n.redMul(w), I = m.redSqr().redIAdd(y).redISub(S).redISub(S), N = m.redMul(S.redISub(I)).redISub(h.redMul(y)), C = this.z.redMul(t.z).redMul(A);\n    return this.curve.jpoint(I, N, C);\n}, Tt.prototype.mixedAdd = function(t) {\n    if (this.isInfinity()) return t.toJ();\n    if (t.isInfinity()) return this;\n    var r = this.z.redSqr(), i = this.x, n = t.x.redMul(r), o = this.y, h = t.y.redMul(r).redMul(this.z), p = i.redSub(n), A = o.redSub(h);\n    if (p.cmpn(0) === 0) return A.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();\n    var m = p.redSqr(), w = m.redMul(p), y = i.redMul(m), S = A.redSqr().redIAdd(w).redISub(y).redISub(y), I = A.redMul(y.redISub(S)).redISub(o.redMul(w)), N = this.z.redMul(p);\n    return this.curve.jpoint(S, I, N);\n}, Tt.prototype.dblp = function(t) {\n    if (t === 0) return this;\n    if (this.isInfinity()) return this;\n    if (!t) return this.dbl();\n    var r;\n    if (this.curve.zeroA || this.curve.threeA) {\n        var i = this;\n        for(r = 0; r < t; r++)i = i.dbl();\n        return i;\n    }\n    var n = this.curve.a, o = this.curve.tinv, h = this.x, p = this.y, A = this.z, m = A.redSqr().redSqr(), w = p.redAdd(p);\n    for(r = 0; r < t; r++){\n        var y = h.redSqr(), S = w.redSqr(), I = S.redSqr(), N = y.redAdd(y).redIAdd(y).redIAdd(n.redMul(m)), C = h.redMul(S), F = N.redSqr().redISub(C.redAdd(C)), U = C.redISub(F), J = N.redMul(U);\n        J = J.redIAdd(J).redISub(I);\n        var Bt = w.redMul(A);\n        r + 1 < t && (m = m.redMul(I)), h = F, A = Bt, w = J;\n    }\n    return this.curve.jpoint(h, w.redMul(o), A);\n}, Tt.prototype.dbl = function() {\n    return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();\n}, Tt.prototype._zeroDbl = function() {\n    var t, r, i;\n    if (this.zOne) {\n        var n = this.x.redSqr(), o = this.y.redSqr(), h = o.redSqr(), p = this.x.redAdd(o).redSqr().redISub(n).redISub(h);\n        p = p.redIAdd(p);\n        var A = n.redAdd(n).redIAdd(n), m = A.redSqr().redISub(p).redISub(p), w = h.redIAdd(h);\n        w = w.redIAdd(w), w = w.redIAdd(w), t = m, r = A.redMul(p.redISub(m)).redISub(w), i = this.y.redAdd(this.y);\n    } else {\n        var y = this.x.redSqr(), S = this.y.redSqr(), I = S.redSqr(), N = this.x.redAdd(S).redSqr().redISub(y).redISub(I);\n        N = N.redIAdd(N);\n        var C = y.redAdd(y).redIAdd(y), F = C.redSqr(), U = I.redIAdd(I);\n        U = U.redIAdd(U), U = U.redIAdd(U), t = F.redISub(N).redISub(N), r = C.redMul(N.redISub(t)).redISub(U), i = this.y.redMul(this.z), i = i.redIAdd(i);\n    }\n    return this.curve.jpoint(t, r, i);\n}, Tt.prototype._threeDbl = function() {\n    var t, r, i;\n    if (this.zOne) {\n        var n = this.x.redSqr(), o = this.y.redSqr(), h = o.redSqr(), p = this.x.redAdd(o).redSqr().redISub(n).redISub(h);\n        p = p.redIAdd(p);\n        var A = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a), m = A.redSqr().redISub(p).redISub(p);\n        t = m;\n        var w = h.redIAdd(h);\n        w = w.redIAdd(w), w = w.redIAdd(w), r = A.redMul(p.redISub(m)).redISub(w), i = this.y.redAdd(this.y);\n    } else {\n        var y = this.z.redSqr(), S = this.y.redSqr(), I = this.x.redMul(S), N = this.x.redSub(y).redMul(this.x.redAdd(y));\n        N = N.redAdd(N).redIAdd(N);\n        var C = I.redIAdd(I);\n        C = C.redIAdd(C);\n        var F = C.redAdd(C);\n        t = N.redSqr().redISub(F), i = this.y.redAdd(this.z).redSqr().redISub(S).redISub(y);\n        var U = S.redSqr();\n        U = U.redIAdd(U), U = U.redIAdd(U), U = U.redIAdd(U), r = N.redMul(C.redISub(t)).redISub(U);\n    }\n    return this.curve.jpoint(t, r, i);\n}, Tt.prototype._dbl = function() {\n    var t = this.curve.a, r = this.x, i = this.y, n = this.z, o = n.redSqr().redSqr(), h = r.redSqr(), p = i.redSqr(), A = h.redAdd(h).redIAdd(h).redIAdd(t.redMul(o)), m = r.redAdd(r);\n    m = m.redIAdd(m);\n    var w = m.redMul(p), y = A.redSqr().redISub(w.redAdd(w)), S = w.redISub(y), I = p.redSqr();\n    I = I.redIAdd(I), I = I.redIAdd(I), I = I.redIAdd(I);\n    var N = A.redMul(S).redISub(I), C = i.redAdd(i).redMul(n);\n    return this.curve.jpoint(y, N, C);\n}, Tt.prototype.trpl = function() {\n    if (!this.curve.zeroA) return this.dbl().add(this);\n    var t = this.x.redSqr(), r = this.y.redSqr(), i = this.z.redSqr(), n = r.redSqr(), o = t.redAdd(t).redIAdd(t), h = o.redSqr(), p = this.x.redAdd(r).redSqr().redISub(t).redISub(n);\n    p = p.redIAdd(p), p = p.redAdd(p).redIAdd(p), p = p.redISub(h);\n    var A = p.redSqr(), m = n.redIAdd(n);\n    m = m.redIAdd(m), m = m.redIAdd(m), m = m.redIAdd(m);\n    var w = o.redIAdd(p).redSqr().redISub(h).redISub(A).redISub(m), y = r.redMul(w);\n    y = y.redIAdd(y), y = y.redIAdd(y);\n    var S = this.x.redMul(A).redISub(y);\n    S = S.redIAdd(S), S = S.redIAdd(S);\n    var I = this.y.redMul(w.redMul(m.redISub(w)).redISub(p.redMul(A)));\n    I = I.redIAdd(I), I = I.redIAdd(I), I = I.redIAdd(I);\n    var N = this.z.redAdd(p).redSqr().redISub(i).redISub(A);\n    return this.curve.jpoint(S, I, N);\n}, Tt.prototype.mul = function(t, r) {\n    return t = new K(t, r), this.curve._wnafMul(this, t);\n}, Tt.prototype.eq = function(t) {\n    if (t.type === \"affine\") return this.eq(t.toJ());\n    if (this === t) return !0;\n    var r = this.z.redSqr(), i = t.z.redSqr();\n    if (this.x.redMul(i).redISub(t.x.redMul(r)).cmpn(0) !== 0) return !1;\n    var n = r.redMul(this.z), o = i.redMul(t.z);\n    return this.y.redMul(o).redISub(t.y.redMul(n)).cmpn(0) === 0;\n}, Tt.prototype.eqXToP = function(t) {\n    var r = this.z.redSqr(), i = t.toRed(this.curve.red).redMul(r);\n    if (this.x.cmp(i) === 0) return !0;\n    for(var n = t.clone(), o = this.curve.redN.redMul(r);;){\n        if (n.iadd(this.curve.n), n.cmp(this.curve.p) >= 0) return !1;\n        if (i.redIAdd(o), this.x.cmp(i) === 0) return !0;\n    }\n}, Tt.prototype.inspect = function() {\n    return this.isInfinity() ? \"<EC JPoint Infinity>\" : \"<EC JPoint x: \" + this.x.toString(16, 2) + \" y: \" + this.y.toString(16, 2) + \" z: \" + this.z.toString(16, 2) + \">\";\n}, Tt.prototype.isInfinity = function() {\n    return this.z.cmpn(0) === 0;\n};\nvar qr = cr(function(e, t) {\n    var r = t;\n    r.base = Ze, r.short = ja, r.mont = null, r.edwards = null;\n}), Kr = cr(function(e, t) {\n    var r = t, i = Jt.assert;\n    function n(p) {\n        p.type === \"short\" ? this.curve = new qr.short(p) : p.type === \"edwards\" ? this.curve = new qr.edwards(p) : this.curve = new qr.mont(p), this.g = this.curve.g, this.n = this.curve.n, this.hash = p.hash, i(this.g.validate(), \"Invalid curve\"), i(this.g.mul(this.n).isInfinity(), \"Invalid curve, G*N != O\");\n    }\n    r.PresetCurve = n;\n    function o(p, A) {\n        Object.defineProperty(r, p, {\n            configurable: !0,\n            enumerable: !0,\n            get: function() {\n                var m = new n(A);\n                return Object.defineProperty(r, p, {\n                    configurable: !0,\n                    enumerable: !0,\n                    value: m\n                }), m;\n            }\n        });\n    }\n    o(\"p192\", {\n        type: \"short\",\n        prime: \"p192\",\n        p: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\",\n        a: \"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc\",\n        b: \"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1\",\n        n: \"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831\",\n        hash: se.sha256,\n        gRed: !1,\n        g: [\n            \"188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012\",\n            \"07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811\"\n        ]\n    }), o(\"p224\", {\n        type: \"short\",\n        prime: \"p224\",\n        p: \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\",\n        a: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe\",\n        b: \"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4\",\n        n: \"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d\",\n        hash: se.sha256,\n        gRed: !1,\n        g: [\n            \"b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21\",\n            \"bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34\"\n        ]\n    }), o(\"p256\", {\n        type: \"short\",\n        prime: null,\n        p: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff\",\n        a: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc\",\n        b: \"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b\",\n        n: \"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551\",\n        hash: se.sha256,\n        gRed: !1,\n        g: [\n            \"6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296\",\n            \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5\"\n        ]\n    }), o(\"p384\", {\n        type: \"short\",\n        prime: null,\n        p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff\",\n        a: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc\",\n        b: \"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef\",\n        n: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973\",\n        hash: se.sha384,\n        gRed: !1,\n        g: [\n            \"aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7\",\n            \"3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\"\n        ]\n    }), o(\"p521\", {\n        type: \"short\",\n        prime: null,\n        p: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff\",\n        a: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc\",\n        b: \"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00\",\n        n: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409\",\n        hash: se.sha512,\n        gRed: !1,\n        g: [\n            \"000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66\",\n            \"00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650\"\n        ]\n    }), o(\"curve25519\", {\n        type: \"mont\",\n        prime: \"p25519\",\n        p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n        a: \"76d06\",\n        b: \"1\",\n        n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n        hash: se.sha256,\n        gRed: !1,\n        g: [\n            \"9\"\n        ]\n    }), o(\"ed25519\", {\n        type: \"edwards\",\n        prime: \"p25519\",\n        p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n        a: \"-1\",\n        c: \"1\",\n        d: \"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3\",\n        n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n        hash: se.sha256,\n        gRed: !1,\n        g: [\n            \"216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a\",\n            \"6666666666666666666666666666666666666666666666666666666666666658\"\n        ]\n    });\n    var h;\n    try {\n        h = null.crash();\n    } catch  {\n        h = void 0;\n    }\n    o(\"secp256k1\", {\n        type: \"short\",\n        prime: \"k256\",\n        p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\",\n        a: \"0\",\n        b: \"7\",\n        n: \"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141\",\n        h: \"1\",\n        hash: se.sha256,\n        beta: \"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\",\n        lambda: \"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72\",\n        basis: [\n            {\n                a: \"3086d221a7d46bcde86c90e49284eb15\",\n                b: \"-e4437ed6010e88286f547fa90abfe4c3\"\n            },\n            {\n                a: \"114ca50f7a8e2f3f657c1108d9d44cfd8\",\n                b: \"3086d221a7d46bcde86c90e49284eb15\"\n            }\n        ],\n        gRed: !1,\n        g: [\n            \"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n            \"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n            h\n        ]\n    });\n});\nfunction Re(e) {\n    if (!(this instanceof Re)) return new Re(e);\n    this.hash = e.hash, this.predResist = !!e.predResist, this.outLen = this.hash.outSize, this.minEntropy = e.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;\n    var t = fe.toArray(e.entropy, e.entropyEnc || \"hex\"), r = fe.toArray(e.nonce, e.nonceEnc || \"hex\"), i = fe.toArray(e.pers, e.persEnc || \"hex\");\n    Pi(t.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\"), this._init(t, r, i);\n}\nvar Of = Re;\nRe.prototype._init = function(t, r, i) {\n    var n = t.concat(r).concat(i);\n    this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);\n    for(var o = 0; o < this.V.length; o++)this.K[o] = 0, this.V[o] = 1;\n    this._update(n), this._reseed = 1, this.reseedInterval = 281474976710656;\n}, Re.prototype._hmac = function() {\n    return new se.hmac(this.hash, this.K);\n}, Re.prototype._update = function(t) {\n    var r = this._hmac().update(this.V).update([\n        0\n    ]);\n    t && (r = r.update(t)), this.K = r.digest(), this.V = this._hmac().update(this.V).digest(), t && (this.K = this._hmac().update(this.V).update([\n        1\n    ]).update(t).digest(), this.V = this._hmac().update(this.V).digest());\n}, Re.prototype.reseed = function(t, r, i, n) {\n    typeof r != \"string\" && (n = i, i = r, r = null), t = fe.toArray(t, r), i = fe.toArray(i, n), Pi(t.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\"), this._update(t.concat(i || [])), this._reseed = 1;\n}, Re.prototype.generate = function(t, r, i, n) {\n    if (this._reseed > this.reseedInterval) throw new Error(\"Reseed is required\");\n    typeof r != \"string\" && (n = i, i = r, r = null), i && (i = fe.toArray(i, n || \"hex\"), this._update(i));\n    for(var o = []; o.length < t;)this.V = this._hmac().update(this.V).digest(), o = o.concat(this.V);\n    var h = o.slice(0, t);\n    return this._update(i), this._reseed++, fe.encode(h, r);\n};\nvar Fi = Jt.assert;\nfunction kt(e, t) {\n    this.ec = e, this.priv = null, this.pub = null, t.priv && this._importPrivate(t.priv, t.privEnc), t.pub && this._importPublic(t.pub, t.pubEnc);\n}\nvar Ti = kt;\nkt.fromPublic = function(t, r, i) {\n    return r instanceof kt ? r : new kt(t, {\n        pub: r,\n        pubEnc: i\n    });\n}, kt.fromPrivate = function(t, r, i) {\n    return r instanceof kt ? r : new kt(t, {\n        priv: r,\n        privEnc: i\n    });\n}, kt.prototype.validate = function() {\n    var t = this.getPublic();\n    return t.isInfinity() ? {\n        result: !1,\n        reason: \"Invalid public key\"\n    } : t.validate() ? t.mul(this.ec.curve.n).isInfinity() ? {\n        result: !0,\n        reason: null\n    } : {\n        result: !1,\n        reason: \"Public key * N != O\"\n    } : {\n        result: !1,\n        reason: \"Public key is not a point\"\n    };\n}, kt.prototype.getPublic = function(t, r) {\n    return typeof t == \"string\" && (r = t, t = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), r ? this.pub.encode(r, t) : this.pub;\n}, kt.prototype.getPrivate = function(t) {\n    return t === \"hex\" ? this.priv.toString(16, 2) : this.priv;\n}, kt.prototype._importPrivate = function(t, r) {\n    this.priv = new K(t, r || 16), this.priv = this.priv.umod(this.ec.curve.n);\n}, kt.prototype._importPublic = function(t, r) {\n    if (t.x || t.y) {\n        this.ec.curve.type === \"mont\" ? Fi(t.x, \"Need x coordinate\") : (this.ec.curve.type === \"short\" || this.ec.curve.type === \"edwards\") && Fi(t.x && t.y, \"Need both x and y coordinate\"), this.pub = this.ec.curve.point(t.x, t.y);\n        return;\n    }\n    this.pub = this.ec.curve.decodePoint(t, r);\n}, kt.prototype.derive = function(t) {\n    return t.validate() || Fi(t.validate(), \"public point not validated\"), t.mul(this.priv).getX();\n}, kt.prototype.sign = function(t, r, i) {\n    return this.ec.sign(t, this, r, i);\n}, kt.prototype.verify = function(t, r) {\n    return this.ec.verify(t, r, this);\n}, kt.prototype.inspect = function() {\n    return \"<Key priv: \" + (this.priv && this.priv.toString(16, 2)) + \" pub: \" + (this.pub && this.pub.inspect()) + \" >\";\n};\nvar Qa = Jt.assert;\nfunction Hr(e, t) {\n    if (e instanceof Hr) return e;\n    this._importDER(e, t) || (Qa(e.r && e.s, \"Signature without r or s\"), this.r = new K(e.r, 16), this.s = new K(e.s, 16), e.recoveryParam === void 0 ? this.recoveryParam = null : this.recoveryParam = e.recoveryParam);\n}\nvar zr = Hr;\nfunction Ja() {\n    this.place = 0;\n}\nfunction Ui(e, t) {\n    var r = e[t.place++];\n    if (!(r & 128)) return r;\n    var i = r & 15;\n    if (i === 0 || i > 4) return !1;\n    for(var n = 0, o = 0, h = t.place; o < i; o++, h++)n <<= 8, n |= e[h], n >>>= 0;\n    return n <= 127 ? !1 : (t.place = h, n);\n}\nfunction Pf(e) {\n    for(var t = 0, r = e.length - 1; !e[t] && !(e[t + 1] & 128) && t < r;)t++;\n    return t === 0 ? e : e.slice(t);\n}\nHr.prototype._importDER = function(t, r) {\n    t = Jt.toArray(t, r);\n    var i = new Ja;\n    if (t[i.place++] !== 48) return !1;\n    var n = Ui(t, i);\n    if (n === !1 || n + i.place !== t.length || t[i.place++] !== 2) return !1;\n    var o = Ui(t, i);\n    if (o === !1) return !1;\n    var h = t.slice(i.place, o + i.place);\n    if (i.place += o, t[i.place++] !== 2) return !1;\n    var p = Ui(t, i);\n    if (p === !1 || t.length !== p + i.place) return !1;\n    var A = t.slice(i.place, p + i.place);\n    if (h[0] === 0) if (h[1] & 128) h = h.slice(1);\n    else return !1;\n    if (A[0] === 0) if (A[1] & 128) A = A.slice(1);\n    else return !1;\n    return this.r = new K(h), this.s = new K(A), this.recoveryParam = null, !0;\n};\nfunction ki(e, t) {\n    if (t < 128) {\n        e.push(t);\n        return;\n    }\n    var r = 1 + (Math.log(t) / Math.LN2 >>> 3);\n    for(e.push(r | 128); --r;)e.push(t >>> (r << 3) & 255);\n    e.push(t);\n}\nHr.prototype.toDER = function(t) {\n    var r = this.r.toArray(), i = this.s.toArray();\n    for(r[0] & 128 && (r = [\n        0\n    ].concat(r)), i[0] & 128 && (i = [\n        0\n    ].concat(i)), r = Pf(r), i = Pf(i); !i[0] && !(i[1] & 128);)i = i.slice(1);\n    var n = [\n        2\n    ];\n    ki(n, r.length), n = n.concat(r), n.push(2), ki(n, i.length);\n    var o = n.concat(i), h = [\n        48\n    ];\n    return ki(h, o.length), h = h.concat(o), Jt.encode(h, t);\n};\nvar Ga = function() {\n    throw new Error(\"unsupported\");\n}, Df = Jt.assert;\nfunction $t(e) {\n    if (!(this instanceof $t)) return new $t(e);\n    typeof e == \"string\" && (Df(Object.prototype.hasOwnProperty.call(Kr, e), \"Unknown curve \" + e), e = Kr[e]), e instanceof Kr.PresetCurve && (e = {\n        curve: e\n    }), this.curve = e.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e.curve.g, this.g.precompute(e.curve.n.bitLength() + 1), this.hash = e.hash || e.curve.hash;\n}\nvar Ya = $t;\n$t.prototype.keyPair = function(t) {\n    return new Ti(this, t);\n}, $t.prototype.keyFromPrivate = function(t, r) {\n    return Ti.fromPrivate(this, t, r);\n}, $t.prototype.keyFromPublic = function(t, r) {\n    return Ti.fromPublic(this, t, r);\n}, $t.prototype.genKeyPair = function(t) {\n    t || (t = {});\n    for(var r = new Of({\n        hash: this.hash,\n        pers: t.pers,\n        persEnc: t.persEnc || \"utf8\",\n        entropy: t.entropy || Ga(this.hash.hmacStrength),\n        entropyEnc: t.entropy && t.entropyEnc || \"utf8\",\n        nonce: this.n.toArray()\n    }), i = this.n.byteLength(), n = this.n.sub(new K(2));;){\n        var o = new K(r.generate(i));\n        if (!(o.cmp(n) > 0)) return o.iaddn(1), this.keyFromPrivate(o);\n    }\n}, $t.prototype._truncateToN = function(t, r) {\n    var i = t.byteLength() * 8 - this.n.bitLength();\n    return i > 0 && (t = t.ushrn(i)), !r && t.cmp(this.n) >= 0 ? t.sub(this.n) : t;\n}, $t.prototype.sign = function(t, r, i, n) {\n    typeof i == \"object\" && (n = i, i = null), n || (n = {}), r = this.keyFromPrivate(r, i), t = this._truncateToN(new K(t, 16));\n    for(var o = this.n.byteLength(), h = r.getPrivate().toArray(\"be\", o), p = t.toArray(\"be\", o), A = new Of({\n        hash: this.hash,\n        entropy: h,\n        nonce: p,\n        pers: n.pers,\n        persEnc: n.persEnc || \"utf8\"\n    }), m = this.n.sub(new K(1)), w = 0;; w++){\n        var y = n.k ? n.k(w) : new K(A.generate(this.n.byteLength()));\n        if (y = this._truncateToN(y, !0), !(y.cmpn(1) <= 0 || y.cmp(m) >= 0)) {\n            var S = this.g.mul(y);\n            if (!S.isInfinity()) {\n                var I = S.getX(), N = I.umod(this.n);\n                if (N.cmpn(0) !== 0) {\n                    var C = y.invm(this.n).mul(N.mul(r.getPrivate()).iadd(t));\n                    if (C = C.umod(this.n), C.cmpn(0) !== 0) {\n                        var F = (S.getY().isOdd() ? 1 : 0) | (I.cmp(N) !== 0 ? 2 : 0);\n                        return n.canonical && C.cmp(this.nh) > 0 && (C = this.n.sub(C), F ^= 1), new zr({\n                            r: N,\n                            s: C,\n                            recoveryParam: F\n                        });\n                    }\n                }\n            }\n        }\n    }\n}, $t.prototype.verify = function(t, r, i, n) {\n    t = this._truncateToN(new K(t, 16)), i = this.keyFromPublic(i, n), r = new zr(r, \"hex\");\n    var o = r.r, h = r.s;\n    if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0 || h.cmpn(1) < 0 || h.cmp(this.n) >= 0) return !1;\n    var p = h.invm(this.n), A = p.mul(t).umod(this.n), m = p.mul(o).umod(this.n), w;\n    return this.curve._maxwellTrick ? (w = this.g.jmulAdd(A, i.getPublic(), m), w.isInfinity() ? !1 : w.eqXToP(o)) : (w = this.g.mulAdd(A, i.getPublic(), m), w.isInfinity() ? !1 : w.getX().umod(this.n).cmp(o) === 0);\n}, $t.prototype.recoverPubKey = function(e, t, r, i) {\n    Df((3 & r) === r, \"The recovery param is more than two bits\"), t = new zr(t, i);\n    var n = this.n, o = new K(e), h = t.r, p = t.s, A = r & 1, m = r >> 1;\n    if (h.cmp(this.curve.p.umod(this.curve.n)) >= 0 && m) throw new Error(\"Unable to find sencond key candinate\");\n    m ? h = this.curve.pointFromX(h.add(this.curve.n), A) : h = this.curve.pointFromX(h, A);\n    var w = t.r.invm(n), y = n.sub(o).mul(w).umod(n), S = p.mul(w).umod(n);\n    return this.g.mulAdd(y, h, S);\n}, $t.prototype.getKeyRecoveryParam = function(e, t, r, i) {\n    if (t = new zr(t, i), t.recoveryParam !== null) return t.recoveryParam;\n    for(var n = 0; n < 4; n++){\n        var o;\n        try {\n            o = this.recoverPubKey(e, t, n);\n        } catch  {\n            continue;\n        }\n        if (o.eq(r)) return n;\n    }\n    throw new Error(\"Unable to find valid recovery factor\");\n};\nvar Va = cr(function(e, t) {\n    var r = t;\n    r.version = \"6.5.4\", r.utils = Jt, r.rand = function() {\n        throw new Error(\"unsupported\");\n    }, r.curve = qr, r.curves = Kr, r.ec = Ya, r.eddsa = null;\n}), Wa = Va.ec;\nconst Xa = \"signing-key/5.7.0\", qi = new L(Xa);\nlet Ki = null;\nfunction ve() {\n    return Ki || (Ki = new Wa(\"secp256k1\")), Ki;\n}\nclass Za {\n    constructor(t){\n        br(this, \"curve\", \"secp256k1\"), br(this, \"privateKey\", Kt(t)), Os(this.privateKey) !== 32 && qi.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n        const r = ve().keyFromPrivate(Ot(this.privateKey));\n        br(this, \"publicKey\", \"0x\" + r.getPublic(!1, \"hex\")), br(this, \"compressedPublicKey\", \"0x\" + r.getPublic(!0, \"hex\")), br(this, \"_isSigningKey\", !0);\n    }\n    _addPoint(t) {\n        const r = ve().keyFromPublic(Ot(this.publicKey)), i = ve().keyFromPublic(Ot(t));\n        return \"0x\" + r.pub.add(i.pub).encodeCompressed(\"hex\");\n    }\n    signDigest(t) {\n        const r = ve().keyFromPrivate(Ot(this.privateKey)), i = Ot(t);\n        i.length !== 32 && qi.throwArgumentError(\"bad digest length\", \"digest\", t);\n        const n = r.sign(i, {\n            canonical: !0\n        });\n        return Ln({\n            recoveryParam: n.recoveryParam,\n            r: oe(\"0x\" + n.r.toString(16), 32),\n            s: oe(\"0x\" + n.s.toString(16), 32)\n        });\n    }\n    computeSharedSecret(t) {\n        const r = ve().keyFromPrivate(Ot(this.privateKey)), i = ve().keyFromPublic(Ot(Ff(t)));\n        return oe(\"0x\" + r.derive(i.getPublic()).toString(16), 32);\n    }\n    static isSigningKey(t) {\n        return !!(t && t._isSigningKey);\n    }\n}\nfunction $a(e, t) {\n    const r = Ln(t), i = {\n        r: Ot(r.r),\n        s: Ot(r.s)\n    };\n    return \"0x\" + ve().recoverPubKey(Ot(e), i, r.recoveryParam).encode(\"hex\", !1);\n}\nfunction Ff(e, t) {\n    const r = Ot(e);\n    if (r.length === 32) {\n        const i = new Za(r);\n        return t ? \"0x\" + ve().keyFromPrivate(r).getPublic(!0, \"hex\") : i.publicKey;\n    } else {\n        if (r.length === 33) return t ? Kt(r) : \"0x\" + ve().keyFromPublic(r).getPublic(!1, \"hex\");\n        if (r.length === 65) return t ? \"0x\" + ve().keyFromPublic(r).getPublic(!0, \"hex\") : Kt(r);\n    }\n    return qi.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}\nconst tu = \"transactions/5.7.0\";\nnew L(tu);\nvar Tf;\n(function(e) {\n    e[e.legacy = 0] = \"legacy\", e[e.eip2930 = 1] = \"eip2930\", e[e.eip1559 = 2] = \"eip1559\";\n})(Tf || (Tf = {}));\nfunction eu(e) {\n    const t = Ff(e);\n    return h0(zn(yi(zn(t, 1)), 12));\n}\nfunction ru(e, t) {\n    return eu($a(Ot(e), t));\n}\nconst iu = \"https://rpc.walletconnect.com/v1\";\nasync function Uf(e, t, r, i, n, o) {\n    switch(r.t){\n        case \"eip191\":\n            return kf(e, t, r.s);\n        case \"eip1271\":\n            return await qf(e, t, r.s, i, n, o);\n        default:\n            throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${r.t}`);\n    }\n}\nfunction kf(e, t, r) {\n    return ru(of(t), r).toLowerCase() === e.toLowerCase();\n}\nasync function qf(e, t, r, i, n, o) {\n    try {\n        const h = \"0x1626ba7e\", p = \"0000000000000000000000000000000000000000000000000000000000000040\", A = \"0000000000000000000000000000000000000000000000000000000000000041\", m = r.substring(2), w = of(t).substring(2), y = h + w + p + A + m, S = await fetch(`${o || iu}/?chainId=${i}&projectId=${n}`, {\n            method: \"POST\",\n            body: JSON.stringify({\n                id: nu(),\n                jsonrpc: \"2.0\",\n                method: \"eth_call\",\n                params: [\n                    {\n                        to: e,\n                        data: y\n                    },\n                    \"latest\"\n                ]\n            })\n        }), { result: I } = await S.json();\n        return I ? I.slice(0, h.length).toLowerCase() === h.toLowerCase() : !1;\n    } catch (h) {\n        return console.error(\"isValidEip1271Signature: \", h), !1;\n    }\n}\nfunction nu() {\n    return Date.now() + Math.floor(Math.random() * 1e3);\n}\nvar fu = Object.defineProperty, ou = Object.defineProperties, su = Object.getOwnPropertyDescriptors, Kf = Object.getOwnPropertySymbols, au = Object.prototype.hasOwnProperty, uu = Object.prototype.propertyIsEnumerable, Hf = (e, t, r)=>t in e ? fu(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[t] = r, Hi = (e, t)=>{\n    for(var r in t || (t = {}))au.call(t, r) && Hf(e, r, t[r]);\n    if (Kf) for (var r of Kf(t))uu.call(t, r) && Hf(e, r, t[r]);\n    return e;\n}, zf = (e, t)=>ou(e, su(t));\nconst hu = \"did:pkh:\", Lr = (e)=>e?.split(\":\"), zi = (e)=>{\n    const t = e && Lr(e);\n    if (t) return e.includes(hu) ? t[3] : t[1];\n}, cu = (e)=>{\n    const t = e && Lr(e);\n    if (t) return t[2] + \":\" + t[3];\n}, Li = (e)=>{\n    const t = e && Lr(e);\n    if (t) return t.pop();\n};\nasync function lu(e) {\n    const { cacao: t, projectId: r } = e, { s: i, p: n } = t, o = Lf(n, n.iss), h = Li(n.iss);\n    return await Uf(h, o, i, zi(n.iss), r);\n}\nconst Lf = (e, t)=>{\n    const r = `${e.domain} wants you to sign in with your Ethereum account:`, i = Li(t);\n    if (!e.aud && !e.uri) throw new Error(\"Either `aud` or `uri` is required to construct the message\");\n    let n = e.statement || void 0;\n    const o = `URI: ${e.aud || e.uri}`, h = `Version: ${e.version}`, p = `Chain ID: ${zi(t)}`, A = `Nonce: ${e.nonce}`, m = `Issued At: ${e.iat}`, w = e.exp ? `Expiration Time: ${e.exp}` : void 0, y = e.nbf ? `Not Before: ${e.nbf}` : void 0, S = e.requestId ? `Request ID: ${e.requestId}` : void 0, I = e.resources ? `Resources:${e.resources.map((C)=>`\n- ${C}`).join(\"\")}` : void 0, N = Qr(e.resources);\n    if (N) {\n        const C = Oe(N);\n        n = Ji(n, C);\n    }\n    return [\n        r,\n        i,\n        \"\",\n        n,\n        \"\",\n        o,\n        h,\n        p,\n        A,\n        m,\n        w,\n        y,\n        S,\n        I\n    ].filter((C)=>C != null).join(`\n`);\n};\nfunction du(e, t, r) {\n    return r.includes(\"did:pkh:\") || (r = `did:pkh:${r}`), {\n        h: {\n            t: \"caip122\"\n        },\n        p: {\n            iss: r,\n            domain: e.domain,\n            aud: e.aud,\n            version: e.version,\n            nonce: e.nonce,\n            iat: e.iat,\n            statement: e.statement,\n            requestId: e.requestId,\n            resources: e.resources,\n            nbf: e.nbf,\n            exp: e.exp\n        },\n        s: t\n    };\n}\nfunction pu(e) {\n    var t;\n    const { authPayload: r, chains: i, methods: n } = e, o = r.statement || \"\";\n    if (!(i != null && i.length)) return r;\n    const h = r.chains, p = mi(h, i);\n    if (!(p != null && p.length)) throw new Error(\"No supported chains\");\n    const A = jf(r.resources);\n    if (!A) return r;\n    me(A);\n    const m = Qf(A, \"eip155\");\n    let w = r?.resources || [];\n    if (m != null && m.length) {\n        const y = Jf(m), S = mi(y, n);\n        if (!(S != null && S.length)) throw new Error(`Supported methods don't satisfy the requested: ${JSON.stringify(y)}, supported: ${JSON.stringify(n)}`);\n        const I = ji(\"request\", S, {\n            chains: p\n        }), N = Wf(A, \"eip155\", I);\n        w = ((t = r?.resources) == null ? void 0 : t.slice(0, -1)) || [], w.push(jr(N));\n    }\n    return zf(Hi({}, r), {\n        statement: Zf(o, Qr(w)),\n        chains: p,\n        resources: r != null && r.resources || w.length > 0 ? w : void 0\n    });\n}\nfunction jf(e) {\n    const t = Qr(e);\n    if (t && Qi(t)) return Oe(t);\n}\nfunction vu(e, t) {\n    var r;\n    return (r = e?.att) == null ? void 0 : r.hasOwnProperty(t);\n}\nfunction Qf(e, t) {\n    var r, i;\n    return (r = e?.att) != null && r[t] ? Object.keys((i = e?.att) == null ? void 0 : i[t]) : [];\n}\nfunction mu(e) {\n    return e?.map((t)=>Object.keys(t)) || [];\n}\nfunction Jf(e) {\n    return e?.map((t)=>{\n        var r;\n        return (r = t.split(\"/\")) == null ? void 0 : r[1];\n    }) || [];\n}\nfunction Gf(e) {\n    return Buffer.from(JSON.stringify(e)).toString(\"base64\");\n}\nfunction Yf(e) {\n    return JSON.parse(Buffer.from(e, \"base64\").toString(\"utf-8\"));\n}\nfunction me(e) {\n    if (!e) throw new Error(\"No recap provided, value is undefined\");\n    if (!e.att) throw new Error(\"No `att` property found\");\n    const t = Object.keys(e.att);\n    if (!(t != null && t.length)) throw new Error(\"No resources found in `att` property\");\n    t.forEach((r)=>{\n        const i = e.att[r];\n        if (Array.isArray(i)) throw new Error(`Resource must be an object: ${r}`);\n        if (typeof i != \"object\") throw new Error(`Resource must be an object: ${r}`);\n        if (!Object.keys(i).length) throw new Error(`Resource object is empty: ${r}`);\n        Object.keys(i).forEach((n)=>{\n            const o = i[n];\n            if (!Array.isArray(o)) throw new Error(`Ability limits ${n} must be an array of objects, found: ${o}`);\n            if (!o.length) throw new Error(`Value of ${n} is empty array, must be an array with objects`);\n            o.forEach((h)=>{\n                if (typeof h != \"object\") throw new Error(`Ability limits (${n}) must be an array of objects, found: ${h}`);\n            });\n        });\n    });\n}\nfunction Vf(e, t, r, i = {}) {\n    return r?.sort((n, o)=>n.localeCompare(o)), {\n        att: {\n            [e]: ji(t, r, i)\n        }\n    };\n}\nfunction Wf(e, t, r) {\n    var i;\n    return e.att[t] = Hi({}, r), ((i = Object.keys(e.att)) == null ? void 0 : i.sort((n, o)=>n.localeCompare(o))).reduce((n, o)=>(n.att[o] = e.att[o], n), {\n        att: {}\n    });\n}\nfunction ji(e, t, r = {}) {\n    t = t?.sort((n, o)=>n.localeCompare(o));\n    const i = t.map((n)=>({\n            [`${e}/${n}`]: [\n                r\n            ]\n        }));\n    return Object.assign({}, ...i);\n}\nfunction jr(e) {\n    return me(e), `urn:recap:${Gf(e).replace(/=/g, \"\")}`;\n}\nfunction Oe(e) {\n    const t = Yf(e.replace(\"urn:recap:\", \"\"));\n    return me(t), t;\n}\nfunction gu(e, t, r) {\n    const i = Vf(e, t, r);\n    return jr(i);\n}\nfunction Qi(e) {\n    return e && e.includes(\"urn:recap:\");\n}\nfunction Au(e, t) {\n    const r = Oe(e), i = Oe(t), n = Xf(r, i);\n    return jr(n);\n}\nfunction Xf(e, t) {\n    me(e), me(t);\n    const r = Object.keys(e.att).concat(Object.keys(t.att)).sort((n, o)=>n.localeCompare(o)), i = {\n        att: {}\n    };\n    return r.forEach((n)=>{\n        var o, h;\n        Object.keys(((o = e.att) == null ? void 0 : o[n]) || {}).concat(Object.keys(((h = t.att) == null ? void 0 : h[n]) || {})).sort((p, A)=>p.localeCompare(A)).forEach((p)=>{\n            var A, m;\n            i.att[n] = zf(Hi({}, i.att[n]), {\n                [p]: ((A = e.att[n]) == null ? void 0 : A[p]) || ((m = t.att[n]) == null ? void 0 : m[p])\n            });\n        });\n    }), i;\n}\nfunction Ji(e = \"\", t) {\n    me(t);\n    const r = \"I further authorize the stated URI to perform the following actions on my behalf: \";\n    if (e.includes(r)) return e;\n    const i = [];\n    let n = 0;\n    Object.keys(t.att).forEach((p)=>{\n        const A = Object.keys(t.att[p]).map((y)=>({\n                ability: y.split(\"/\")[0],\n                action: y.split(\"/\")[1]\n            }));\n        A.sort((y, S)=>y.action.localeCompare(S.action));\n        const m = {};\n        A.forEach((y)=>{\n            m[y.ability] || (m[y.ability] = []), m[y.ability].push(y.action);\n        });\n        const w = Object.keys(m).map((y)=>(n++, `(${n}) '${y}': '${m[y].join(\"', '\")}' for '${p}'.`));\n        i.push(w.join(\", \").replace(\".,\", \".\"));\n    });\n    const o = i.join(\" \"), h = `${r}${o}`;\n    return `${e ? e + \" \" : \"\"}${h}`;\n}\nfunction bu(e) {\n    var t;\n    const r = Oe(e);\n    me(r);\n    const i = (t = r.att) == null ? void 0 : t.eip155;\n    return i ? Object.keys(i).map((n)=>n.split(\"/\")[1]) : [];\n}\nfunction yu(e) {\n    const t = Oe(e);\n    me(t);\n    const r = [];\n    return Object.values(t.att).forEach((i)=>{\n        Object.values(i).forEach((n)=>{\n            var o;\n            (o = n?.[0]) != null && o.chains && r.push(n[0].chains);\n        });\n    }), [\n        ...new Set(r.flat())\n    ];\n}\nfunction Zf(e, t) {\n    if (!t) return e;\n    const r = Oe(t);\n    return me(r), Ji(e, r);\n}\nfunction Qr(e) {\n    if (!e) return;\n    const t = e?.[e.length - 1];\n    return Qi(t) ? t : void 0;\n}\nvar wu = Object.defineProperty, xu = Object.defineProperties, Mu = Object.getOwnPropertyDescriptors, $f = Object.getOwnPropertySymbols, Eu = Object.prototype.hasOwnProperty, Su = Object.prototype.propertyIsEnumerable, to = (e, t, r)=>t in e ? wu(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[t] = r, Nu = (e, t)=>{\n    for(var r in t || (t = {}))Eu.call(t, r) && to(e, r, t[r]);\n    if ($f) for (var r of $f(t))Su.call(t, r) && to(e, r, t[r]);\n    return e;\n}, Iu = (e, t)=>xu(e, Mu(t));\nconst Gi = \"base10\", zt = \"base16\", Jr = \"base64pad\", Gr = \"utf8\", Yi = 0, lr = 1, _u = 0, eo = 1, Vi = 12, Wi = 32;\nfunction Bu() {\n    const e = _stablelib_x25519__WEBPACK_IMPORTED_MODULE_8__.generateKeyPair();\n    return {\n        privateKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(e.secretKey, zt),\n        publicKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(e.publicKey, zt)\n    };\n}\nfunction Cu() {\n    const e = (0,_stablelib_random__WEBPACK_IMPORTED_MODULE_6__.randomBytes)(Wi);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(e, zt);\n}\nfunction Ru(e, t) {\n    const r = _stablelib_x25519__WEBPACK_IMPORTED_MODULE_8__.sharedKey((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e, zt), (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(t, zt), !0), i = new _stablelib_hkdf__WEBPACK_IMPORTED_MODULE_5__.HKDF(_stablelib_sha256__WEBPACK_IMPORTED_MODULE_7__.SHA256, r).expand(Wi);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(i, zt);\n}\nfunction Ou(e) {\n    const t = (0,_stablelib_sha256__WEBPACK_IMPORTED_MODULE_7__.hash)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e, zt));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(t, zt);\n}\nfunction Pu(e) {\n    const t = (0,_stablelib_sha256__WEBPACK_IMPORTED_MODULE_7__.hash)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e, Gr));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(t, zt);\n}\nfunction ro(e) {\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(`${e}`, Gi);\n}\nfunction Mr(e) {\n    return Number((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(e, Gi));\n}\nfunction Du(e) {\n    const t = ro(typeof e.type < \"u\" ? e.type : Yi);\n    if (Mr(t) === lr && typeof e.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n    const r = typeof e.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e.senderPublicKey, zt) : void 0, i = typeof e.iv < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e.iv, zt) : (0,_stablelib_random__WEBPACK_IMPORTED_MODULE_6__.randomBytes)(Vi), n = new _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_4__.ChaCha20Poly1305((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e.symKey, zt)).seal(i, (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e.message, Gr));\n    return io({\n        type: t,\n        sealed: n,\n        iv: i,\n        senderPublicKey: r\n    });\n}\nfunction Fu(e) {\n    const t = new _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_4__.ChaCha20Poly1305((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e.symKey, zt)), { sealed: r, iv: i } = Xi(e.encoded), n = t.open(i, r);\n    if (n === null) throw new Error(\"Failed to decrypt\");\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(n, Gr);\n}\nfunction io(e) {\n    if (Mr(e.type) === lr) {\n        if (typeof e.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n        return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.concat)([\n            e.type,\n            e.senderPublicKey,\n            e.iv,\n            e.sealed\n        ]), Jr);\n    }\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.concat)([\n        e.type,\n        e.iv,\n        e.sealed\n    ]), Jr);\n}\nfunction Xi(e) {\n    const t = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e, Jr), r = t.slice(_u, eo), i = eo;\n    if (Mr(r) === lr) {\n        const p = i + Wi, A = p + Vi, m = t.slice(i, p), w = t.slice(p, A), y = t.slice(A);\n        return {\n            type: r,\n            sealed: y,\n            iv: w,\n            senderPublicKey: m\n        };\n    }\n    const n = i + Vi, o = t.slice(i, n), h = t.slice(n);\n    return {\n        type: r,\n        sealed: h,\n        iv: o\n    };\n}\nfunction Tu(e, t) {\n    const r = Xi(e);\n    return no({\n        type: Mr(r.type),\n        senderPublicKey: typeof r.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(r.senderPublicKey, zt) : void 0,\n        receiverPublicKey: t?.receiverPublicKey\n    });\n}\nfunction no(e) {\n    const t = e?.type || Yi;\n    if (t === lr) {\n        if (typeof e?.senderPublicKey > \"u\") throw new Error(\"missing sender public key\");\n        if (typeof e?.receiverPublicKey > \"u\") throw new Error(\"missing receiver public key\");\n    }\n    return {\n        type: t,\n        senderPublicKey: e?.senderPublicKey,\n        receiverPublicKey: e?.receiverPublicKey\n    };\n}\nfunction Uu(e) {\n    return e.type === lr && typeof e.senderPublicKey == \"string\" && typeof e.receiverPublicKey == \"string\";\n}\nfunction fo(e) {\n    return new elliptic__WEBPACK_IMPORTED_MODULE_10__.ec(\"p256\").keyFromPublic({\n        x: Buffer.from(e.x, \"base64\").toString(\"hex\"),\n        y: Buffer.from(e.y, \"base64\").toString(\"hex\")\n    }, \"hex\");\n}\nfunction ku(e) {\n    let t = e.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const r = t.length % 4;\n    return r > 0 && (t += \"=\".repeat(4 - r)), t;\n}\nfunction qu(e) {\n    return Buffer.from(ku(e), \"base64\");\n}\nfunction Ku(e, t) {\n    const [r, i, n] = e.split(\".\"), o = qu(n);\n    if (o.length !== 64) throw new Error(\"Invalid signature length\");\n    const h = o.slice(0, 32).toString(\"hex\"), p = o.slice(32, 64).toString(\"hex\"), A = `${r}.${i}`, m = new _stablelib_sha256__WEBPACK_IMPORTED_MODULE_7__.SHA256().update(Buffer.from(A)).digest(), w = fo(t), y = Buffer.from(m).toString(\"hex\"), S = w.verify(y, {\n        r: h,\n        s: p\n    });\n    if (!S) throw new Error(\"Invalid signature\");\n    const I = (0,_walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_11__.decodeJWT)(e);\n    return Iu(Nu({}, I.payload), {\n        isVerified: S\n    });\n}\nconst oo = \"irn\";\nfunction Hu(e) {\n    return e?.relay || {\n        protocol: oo\n    };\n}\nfunction zu(e) {\n    const t = _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_12__.RELAY_JSONRPC[e];\n    if (typeof t > \"u\") throw new Error(`Relay Protocol not supported: ${e}`);\n    return t;\n}\nvar Lu = Object.defineProperty, ju = Object.defineProperties, Qu = Object.getOwnPropertyDescriptors, so = Object.getOwnPropertySymbols, Ju = Object.prototype.hasOwnProperty, Gu = Object.prototype.propertyIsEnumerable, ao = (e, t, r)=>t in e ? Lu(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[t] = r, uo = (e, t)=>{\n    for(var r in t || (t = {}))Ju.call(t, r) && ao(e, r, t[r]);\n    if (so) for (var r of so(t))Gu.call(t, r) && ao(e, r, t[r]);\n    return e;\n}, Yu = (e, t)=>ju(e, Qu(t));\nfunction ho(e, t = \"-\") {\n    const r = {}, i = \"relay\" + t;\n    return Object.keys(e).forEach((n)=>{\n        if (n.startsWith(i)) {\n            const o = n.replace(i, \"\"), h = e[n];\n            r[o] = h;\n        }\n    }), r;\n}\nfunction Vu(e) {\n    e = e.includes(\"wc://\") ? e.replace(\"wc://\", \"\") : e, e = e.includes(\"wc:\") ? e.replace(\"wc:\", \"\") : e;\n    const t = e.indexOf(\":\"), r = e.indexOf(\"?\") !== -1 ? e.indexOf(\"?\") : void 0, i = e.substring(0, t), n = e.substring(t + 1, r).split(\"@\"), o = typeof r < \"u\" ? e.substring(r) : \"\", h = query_string__WEBPACK_IMPORTED_MODULE_3__.parse(o), p = typeof h.methods == \"string\" ? h.methods.split(\",\") : void 0;\n    return {\n        protocol: i,\n        topic: co(n[0]),\n        version: parseInt(n[1], 10),\n        symKey: h.symKey,\n        relay: ho(h),\n        methods: p,\n        expiryTimestamp: h.expiryTimestamp ? parseInt(h.expiryTimestamp, 10) : void 0\n    };\n}\nfunction co(e) {\n    return e.startsWith(\"//\") ? e.substring(2) : e;\n}\nfunction lo(e, t = \"-\") {\n    const r = \"relay\", i = {};\n    return Object.keys(e).forEach((n)=>{\n        const o = r + t + n;\n        e[n] && (i[o] = e[n]);\n    }), i;\n}\nfunction Wu(e) {\n    return `${e.protocol}:${e.topic}@${e.version}?` + query_string__WEBPACK_IMPORTED_MODULE_3__.stringify(uo(Yu(uo({\n        symKey: e.symKey\n    }, lo(e.relay)), {\n        expiryTimestamp: e.expiryTimestamp\n    }), e.methods ? {\n        methods: e.methods.join(\",\")\n    } : {}));\n}\nvar Xu = Object.defineProperty, Zu = Object.defineProperties, $u = Object.getOwnPropertyDescriptors, po = Object.getOwnPropertySymbols, th = Object.prototype.hasOwnProperty, eh = Object.prototype.propertyIsEnumerable, vo = (e, t, r)=>t in e ? Xu(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[t] = r, rh = (e, t)=>{\n    for(var r in t || (t = {}))th.call(t, r) && vo(e, r, t[r]);\n    if (po) for (var r of po(t))eh.call(t, r) && vo(e, r, t[r]);\n    return e;\n}, ih = (e, t)=>Zu(e, $u(t));\nfunction $e(e) {\n    const t = [];\n    return e.forEach((r)=>{\n        const [i, n] = r.split(\":\");\n        t.push(`${i}:${n}`);\n    }), t;\n}\nfunction mo(e) {\n    const t = [];\n    return Object.values(e).forEach((r)=>{\n        t.push(...$e(r.accounts));\n    }), t;\n}\nfunction go(e, t) {\n    const r = [];\n    return Object.values(e).forEach((i)=>{\n        $e(i.accounts).includes(t) && r.push(...i.methods);\n    }), r;\n}\nfunction Ao(e, t) {\n    const r = [];\n    return Object.values(e).forEach((i)=>{\n        $e(i.accounts).includes(t) && r.push(...i.events);\n    }), r;\n}\nfunction nh(e, t) {\n    const r = Bo(e, t);\n    if (r) throw new Error(r.message);\n    const i = {};\n    for (const [n, o] of Object.entries(e))i[n] = {\n        methods: o.methods,\n        events: o.events,\n        chains: o.accounts.map((h)=>`${h.split(\":\")[0]}:${h.split(\":\")[1]}`)\n    };\n    return i;\n}\nfunction fh(e) {\n    const { proposal: { requiredNamespaces: t, optionalNamespaces: r = {} }, supportedNamespaces: i } = e, n = $i(t), o = $i(r), h = {};\n    Object.keys(i).forEach((m)=>{\n        const w = i[m].chains, y = i[m].methods, S = i[m].events, I = i[m].accounts;\n        w.forEach((N)=>{\n            if (!I.some((C)=>C.includes(N))) throw new Error(`No accounts provided for chain ${N} in namespace ${m}`);\n        }), h[m] = {\n            chains: w,\n            methods: y,\n            events: S,\n            accounts: I\n        };\n    });\n    const p = Ro(t, h, \"approve()\");\n    if (p) throw new Error(p.message);\n    const A = {};\n    return !Object.keys(t).length && !Object.keys(r).length ? h : (Object.keys(n).forEach((m)=>{\n        const w = i[m].chains.filter((N)=>{\n            var C, F;\n            return (F = (C = n[m]) == null ? void 0 : C.chains) == null ? void 0 : F.includes(N);\n        }), y = i[m].methods.filter((N)=>{\n            var C, F;\n            return (F = (C = n[m]) == null ? void 0 : C.methods) == null ? void 0 : F.includes(N);\n        }), S = i[m].events.filter((N)=>{\n            var C, F;\n            return (F = (C = n[m]) == null ? void 0 : C.events) == null ? void 0 : F.includes(N);\n        }), I = w.map((N)=>i[m].accounts.filter((C)=>C.includes(`${N}:`))).flat();\n        A[m] = {\n            chains: w,\n            methods: y,\n            events: S,\n            accounts: I\n        };\n    }), Object.keys(o).forEach((m)=>{\n        var w, y, S, I, N, C;\n        if (!i[m]) return;\n        const F = (y = (w = o[m]) == null ? void 0 : w.chains) == null ? void 0 : y.filter((G)=>i[m].chains.includes(G)), U = i[m].methods.filter((G)=>{\n            var H, z;\n            return (z = (H = o[m]) == null ? void 0 : H.methods) == null ? void 0 : z.includes(G);\n        }), J = i[m].events.filter((G)=>{\n            var H, z;\n            return (z = (H = o[m]) == null ? void 0 : H.events) == null ? void 0 : z.includes(G);\n        }), Bt = F?.map((G)=>i[m].accounts.filter((H)=>H.includes(`${G}:`))).flat();\n        A[m] = {\n            chains: ge((S = A[m]) == null ? void 0 : S.chains, F),\n            methods: ge((I = A[m]) == null ? void 0 : I.methods, U),\n            events: ge((N = A[m]) == null ? void 0 : N.events, J),\n            accounts: ge((C = A[m]) == null ? void 0 : C.accounts, Bt)\n        };\n    }), A);\n}\nfunction Zi(e) {\n    return e.includes(\":\");\n}\nfunction bo(e) {\n    return Zi(e) ? e.split(\":\")[0] : e;\n}\nfunction $i(e) {\n    var t, r, i;\n    const n = {};\n    if (!Yr(e)) return n;\n    for (const [o, h] of Object.entries(e)){\n        const p = Zi(o) ? [\n            o\n        ] : h.chains, A = h.methods || [], m = h.events || [], w = bo(o);\n        n[w] = ih(rh({}, n[w]), {\n            chains: ge(p, (t = n[w]) == null ? void 0 : t.chains),\n            methods: ge(A, (r = n[w]) == null ? void 0 : r.methods),\n            events: ge(m, (i = n[w]) == null ? void 0 : i.events)\n        });\n    }\n    return n;\n}\nfunction yo(e) {\n    const t = {};\n    return e?.forEach((r)=>{\n        const [i, n] = r.split(\":\");\n        t[i] || (t[i] = {\n            accounts: [],\n            chains: [],\n            events: []\n        }), t[i].accounts.push(r), t[i].chains.push(`${i}:${n}`);\n    }), t;\n}\nfunction oh(e, t) {\n    t = t.map((i)=>i.replace(\"did:pkh:\", \"\"));\n    const r = yo(t);\n    for (const [i, n] of Object.entries(r))n.methods ? n.methods = ge(n.methods, e) : n.methods = e, n.events = [\n        \"chainChanged\",\n        \"accountsChanged\"\n    ];\n    return r;\n}\nconst wo = {\n    INVALID_METHOD: {\n        message: \"Invalid method.\",\n        code: 1001\n    },\n    INVALID_EVENT: {\n        message: \"Invalid event.\",\n        code: 1002\n    },\n    INVALID_UPDATE_REQUEST: {\n        message: \"Invalid update request.\",\n        code: 1003\n    },\n    INVALID_EXTEND_REQUEST: {\n        message: \"Invalid extend request.\",\n        code: 1004\n    },\n    INVALID_SESSION_SETTLE_REQUEST: {\n        message: \"Invalid session settle request.\",\n        code: 1005\n    },\n    UNAUTHORIZED_METHOD: {\n        message: \"Unauthorized method.\",\n        code: 3001\n    },\n    UNAUTHORIZED_EVENT: {\n        message: \"Unauthorized event.\",\n        code: 3002\n    },\n    UNAUTHORIZED_UPDATE_REQUEST: {\n        message: \"Unauthorized update request.\",\n        code: 3003\n    },\n    UNAUTHORIZED_EXTEND_REQUEST: {\n        message: \"Unauthorized extend request.\",\n        code: 3004\n    },\n    USER_REJECTED: {\n        message: \"User rejected.\",\n        code: 5e3\n    },\n    USER_REJECTED_CHAINS: {\n        message: \"User rejected chains.\",\n        code: 5001\n    },\n    USER_REJECTED_METHODS: {\n        message: \"User rejected methods.\",\n        code: 5002\n    },\n    USER_REJECTED_EVENTS: {\n        message: \"User rejected events.\",\n        code: 5003\n    },\n    UNSUPPORTED_CHAINS: {\n        message: \"Unsupported chains.\",\n        code: 5100\n    },\n    UNSUPPORTED_METHODS: {\n        message: \"Unsupported methods.\",\n        code: 5101\n    },\n    UNSUPPORTED_EVENTS: {\n        message: \"Unsupported events.\",\n        code: 5102\n    },\n    UNSUPPORTED_ACCOUNTS: {\n        message: \"Unsupported accounts.\",\n        code: 5103\n    },\n    UNSUPPORTED_NAMESPACE_KEY: {\n        message: \"Unsupported namespace key.\",\n        code: 5104\n    },\n    USER_DISCONNECTED: {\n        message: \"User disconnected.\",\n        code: 6e3\n    },\n    SESSION_SETTLEMENT_FAILED: {\n        message: \"Session settlement failed.\",\n        code: 7e3\n    },\n    WC_METHOD_UNSUPPORTED: {\n        message: \"Unsupported wc_ method.\",\n        code: 10001\n    }\n}, xo = {\n    NOT_INITIALIZED: {\n        message: \"Not initialized.\",\n        code: 1\n    },\n    NO_MATCHING_KEY: {\n        message: \"No matching key.\",\n        code: 2\n    },\n    RESTORE_WILL_OVERRIDE: {\n        message: \"Restore will override.\",\n        code: 3\n    },\n    RESUBSCRIBED: {\n        message: \"Resubscribed.\",\n        code: 4\n    },\n    MISSING_OR_INVALID: {\n        message: \"Missing or invalid.\",\n        code: 5\n    },\n    EXPIRED: {\n        message: \"Expired.\",\n        code: 6\n    },\n    UNKNOWN_TYPE: {\n        message: \"Unknown type.\",\n        code: 7\n    },\n    MISMATCHED_TOPIC: {\n        message: \"Mismatched topic.\",\n        code: 8\n    },\n    NON_CONFORMING_NAMESPACES: {\n        message: \"Non conforming namespaces.\",\n        code: 9\n    }\n};\nfunction xe(e, t) {\n    const { message: r, code: i } = xo[e];\n    return {\n        message: t ? `${r} ${t}` : r,\n        code: i\n    };\n}\nfunction tr(e, t) {\n    const { message: r, code: i } = wo[e];\n    return {\n        message: t ? `${r} ${t}` : r,\n        code: i\n    };\n}\nfunction Er(e, t) {\n    return Array.isArray(e) ? typeof t < \"u\" && e.length ? e.every(t) : !0 : !1;\n}\nfunction Yr(e) {\n    return Object.getPrototypeOf(e) === Object.prototype && Object.keys(e).length;\n}\nfunction Pe(e) {\n    return typeof e > \"u\";\n}\nfunction Gt(e, t) {\n    return t && Pe(e) ? !0 : typeof e == \"string\" && !!e.trim().length;\n}\nfunction Vr(e, t) {\n    return t && Pe(e) ? !0 : typeof e == \"number\" && !isNaN(e);\n}\nfunction sh(e, t) {\n    const { requiredNamespaces: r } = t, i = Object.keys(e.namespaces), n = Object.keys(r);\n    let o = !0;\n    return _e(n, i) ? (i.forEach((h)=>{\n        const { accounts: p, methods: A, events: m } = e.namespaces[h], w = $e(p), y = r[h];\n        (!_e(_r(h, y), w) || !_e(y.methods, A) || !_e(y.events, m)) && (o = !1);\n    }), o) : !1;\n}\nfunction Sr(e) {\n    return Gt(e, !1) && e.includes(\":\") ? e.split(\":\").length === 2 : !1;\n}\nfunction Mo(e) {\n    if (Gt(e, !1) && e.includes(\":\")) {\n        const t = e.split(\":\");\n        if (t.length === 3) {\n            const r = t[0] + \":\" + t[1];\n            return !!t[2] && Sr(r);\n        }\n    }\n    return !1;\n}\nfunction ah(e) {\n    if (Gt(e, !1)) try {\n        return typeof new URL(e) < \"u\";\n    } catch  {\n        return !1;\n    }\n    return !1;\n}\nfunction uh(e) {\n    var t;\n    return (t = e?.proposer) == null ? void 0 : t.publicKey;\n}\nfunction hh(e) {\n    return e?.topic;\n}\nfunction ch(e, t) {\n    let r = null;\n    return Gt(e?.publicKey, !1) || (r = xe(\"MISSING_OR_INVALID\", `${t} controller public key should be a string`)), r;\n}\nfunction tn(e) {\n    let t = !0;\n    return Er(e) ? e.length && (t = e.every((r)=>Gt(r, !1))) : t = !1, t;\n}\nfunction Eo(e, t, r) {\n    let i = null;\n    return Er(t) && t.length ? t.forEach((n)=>{\n        i || Sr(n) || (i = tr(\"UNSUPPORTED_CHAINS\", `${r}, chain ${n} should be a string and conform to \"namespace:chainId\" format`));\n    }) : Sr(e) || (i = tr(\"UNSUPPORTED_CHAINS\", `${r}, chains must be defined as \"namespace:chainId\" e.g. \"eip155:1\": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: [\"eip155:1\", \"eip155:5\"] }`)), i;\n}\nfunction So(e, t, r) {\n    let i = null;\n    return Object.entries(e).forEach(([n, o])=>{\n        if (i) return;\n        const h = Eo(n, _r(n, o), `${t} ${r}`);\n        h && (i = h);\n    }), i;\n}\nfunction No(e, t) {\n    let r = null;\n    return Er(e) ? e.forEach((i)=>{\n        r || Mo(i) || (r = tr(\"UNSUPPORTED_ACCOUNTS\", `${t}, account ${i} should be a string and conform to \"namespace:chainId:address\" format`));\n    }) : r = tr(\"UNSUPPORTED_ACCOUNTS\", `${t}, accounts should be an array of strings conforming to \"namespace:chainId:address\" format`), r;\n}\nfunction Io(e, t) {\n    let r = null;\n    return Object.values(e).forEach((i)=>{\n        if (r) return;\n        const n = No(i?.accounts, `${t} namespace`);\n        n && (r = n);\n    }), r;\n}\nfunction _o(e, t) {\n    let r = null;\n    return tn(e?.methods) ? tn(e?.events) || (r = tr(\"UNSUPPORTED_EVENTS\", `${t}, events should be an array of strings or empty array for no events`)) : r = tr(\"UNSUPPORTED_METHODS\", `${t}, methods should be an array of strings or empty array for no methods`), r;\n}\nfunction en(e, t) {\n    let r = null;\n    return Object.values(e).forEach((i)=>{\n        if (r) return;\n        const n = _o(i, `${t}, namespace`);\n        n && (r = n);\n    }), r;\n}\nfunction lh(e, t, r) {\n    let i = null;\n    if (e && Yr(e)) {\n        const n = en(e, t);\n        n && (i = n);\n        const o = So(e, t, r);\n        o && (i = o);\n    } else i = xe(\"MISSING_OR_INVALID\", `${t}, ${r} should be an object with data`);\n    return i;\n}\nfunction Bo(e, t) {\n    let r = null;\n    if (e && Yr(e)) {\n        const i = en(e, t);\n        i && (r = i);\n        const n = Io(e, t);\n        n && (r = n);\n    } else r = xe(\"MISSING_OR_INVALID\", `${t}, namespaces should be an object with data`);\n    return r;\n}\nfunction Co(e) {\n    return Gt(e.protocol, !0);\n}\nfunction dh(e, t) {\n    let r = !1;\n    return t && !e ? r = !0 : e && Er(e) && e.length && e.forEach((i)=>{\n        r = Co(i);\n    }), r;\n}\nfunction ph(e) {\n    return typeof e == \"number\";\n}\nfunction vh(e) {\n    return typeof e < \"u\" && typeof e !== null;\n}\nfunction mh(e) {\n    return !(!e || typeof e != \"object\" || !e.code || !Vr(e.code, !1) || !e.message || !Gt(e.message, !1));\n}\nfunction gh(e) {\n    return !(Pe(e) || !Gt(e.method, !1));\n}\nfunction Ah(e) {\n    return !(Pe(e) || Pe(e.result) && Pe(e.error) || !Vr(e.id, !1) || !Gt(e.jsonrpc, !1));\n}\nfunction bh(e) {\n    return !(Pe(e) || !Gt(e.name, !1));\n}\nfunction yh(e, t) {\n    return !(!Sr(t) || !mo(e).includes(t));\n}\nfunction wh(e, t, r) {\n    return Gt(r, !1) ? go(e, t).includes(r) : !1;\n}\nfunction xh(e, t, r) {\n    return Gt(r, !1) ? Ao(e, t).includes(r) : !1;\n}\nfunction Ro(e, t, r) {\n    let i = null;\n    const n = Mh(e), o = Eh(t), h = Object.keys(n), p = Object.keys(o), A = Oo(Object.keys(e)), m = Oo(Object.keys(t)), w = A.filter((y)=>!m.includes(y));\n    return w.length && (i = xe(\"NON_CONFORMING_NAMESPACES\", `${r} namespaces keys don't satisfy requiredNamespaces.\n      Required: ${w.toString()}\n      Received: ${Object.keys(t).toString()}`)), _e(h, p) || (i = xe(\"NON_CONFORMING_NAMESPACES\", `${r} namespaces chains don't satisfy required namespaces.\n      Required: ${h.toString()}\n      Approved: ${p.toString()}`)), Object.keys(t).forEach((y)=>{\n        if (!y.includes(\":\") || i) return;\n        const S = $e(t[y].accounts);\n        S.includes(y) || (i = xe(\"NON_CONFORMING_NAMESPACES\", `${r} namespaces accounts don't satisfy namespace accounts for ${y}\n        Required: ${y}\n        Approved: ${S.toString()}`));\n    }), h.forEach((y)=>{\n        i || (_e(n[y].methods, o[y].methods) ? _e(n[y].events, o[y].events) || (i = xe(\"NON_CONFORMING_NAMESPACES\", `${r} namespaces events don't satisfy namespace events for ${y}`)) : i = xe(\"NON_CONFORMING_NAMESPACES\", `${r} namespaces methods don't satisfy namespace methods for ${y}`));\n    }), i;\n}\nfunction Mh(e) {\n    const t = {};\n    return Object.keys(e).forEach((r)=>{\n        var i;\n        r.includes(\":\") ? t[r] = e[r] : (i = e[r].chains) == null || i.forEach((n)=>{\n            t[n] = {\n                methods: e[r].methods,\n                events: e[r].events\n            };\n        });\n    }), t;\n}\nfunction Oo(e) {\n    return [\n        ...new Set(e.map((t)=>t.includes(\":\") ? t.split(\":\")[0] : t))\n    ];\n}\nfunction Eh(e) {\n    const t = {};\n    return Object.keys(e).forEach((r)=>{\n        if (r.includes(\":\")) t[r] = e[r];\n        else {\n            const i = $e(e[r].accounts);\n            i?.forEach((n)=>{\n                t[n] = {\n                    accounts: e[r].accounts.filter((o)=>o.includes(`${n}:`)),\n                    methods: e[r].methods,\n                    events: e[r].events\n                };\n            });\n        }\n    }), t;\n}\nfunction Sh(e, t) {\n    return Vr(e, !1) && e <= t.max && e >= t.min;\n}\nfunction Nh() {\n    const e = We();\n    return new Promise((t)=>{\n        switch(e){\n            case qt.browser:\n                t(Po());\n                break;\n            case qt.reactNative:\n                t(Do());\n                break;\n            case qt.node:\n                t(Fo());\n                break;\n            default:\n                t(!0);\n        }\n    });\n}\nfunction Po() {\n    return pr() && navigator?.onLine;\n}\nasync function Do() {\n    if (er() && typeof global < \"u\" && global != null && global.NetInfo) {\n        const e = await (global == null ? void 0 : global.NetInfo.fetch());\n        return e?.isConnected;\n    }\n    return !0;\n}\nfunction Fo() {\n    return !0;\n}\nfunction Ih(e) {\n    switch(We()){\n        case qt.browser:\n            To(e);\n            break;\n        case qt.reactNative:\n            Uo(e);\n            break;\n        case qt.node:\n            break;\n    }\n}\nfunction To(e) {\n    !er() && pr() && (window.addEventListener(\"online\", ()=>e(!0)), window.addEventListener(\"offline\", ()=>e(!1)));\n}\nfunction Uo(e) {\n    er() && typeof global < \"u\" && global != null && global.NetInfo && global?.NetInfo.addEventListener((t)=>e(t?.isConnected));\n}\nconst rn = {};\nclass _h {\n    static get(t) {\n        return rn[t];\n    }\n    static set(t, r) {\n        rn[t] = r;\n    }\n    static delete(t) {\n        delete rn[t];\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/window-getters/dist/cjs/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;\nfunction getFromWindow(name) {\n    let res = undefined;\n    if (false) {}\n    return res;\n}\nexports.getFromWindow = getFromWindow;\nfunction getFromWindowOrThrow(name) {\n    const res = getFromWindow(name);\n    if (!res) {\n        throw new Error(`${name} is not defined in Window`);\n    }\n    return res;\n}\nexports.getFromWindowOrThrow = getFromWindowOrThrow;\nfunction getDocumentOrThrow() {\n    return getFromWindowOrThrow(\"document\");\n}\nexports.getDocumentOrThrow = getDocumentOrThrow;\nfunction getDocument() {\n    return getFromWindow(\"document\");\n}\nexports.getDocument = getDocument;\nfunction getNavigatorOrThrow() {\n    return getFromWindowOrThrow(\"navigator\");\n}\nexports.getNavigatorOrThrow = getNavigatorOrThrow;\nfunction getNavigator() {\n    return getFromWindow(\"navigator\");\n}\nexports.getNavigator = getNavigator;\nfunction getLocationOrThrow() {\n    return getFromWindowOrThrow(\"location\");\n}\nexports.getLocationOrThrow = getLocationOrThrow;\nfunction getLocation() {\n    return getFromWindow(\"location\");\n}\nexports.getLocation = getLocation;\nfunction getCryptoOrThrow() {\n    return getFromWindowOrThrow(\"crypto\");\n}\nexports.getCryptoOrThrow = getCryptoOrThrow;\nfunction getCrypto() {\n    return getFromWindow(\"crypto\");\n}\nexports.getCrypto = getCrypto;\nfunction getLocalStorageOrThrow() {\n    return getFromWindowOrThrow(\"localStorage\");\n}\nexports.getLocalStorageOrThrow = getLocalStorageOrThrow;\nfunction getLocalStorage() {\n    return getFromWindow(\"localStorage\");\n}\nexports.getLocalStorage = getLocalStorage; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2luZG93LWdldHRlcnMvZGlzdC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHQSw4QkFBOEIsR0FBR0EsaUJBQWlCLEdBQUdBLHdCQUF3QixHQUFHQSxtQkFBbUIsR0FBR0EsMEJBQTBCLEdBQUdBLG9CQUFvQixHQUFHQSwyQkFBMkIsR0FBR0EsbUJBQW1CLEdBQUdBLDBCQUEwQixHQUFHQSw0QkFBNEIsR0FBR0EscUJBQXFCLEdBQUcsS0FBSztBQUNqVSxTQUFTYSxjQUFjQyxJQUFJO0lBQ3ZCLElBQUlDLE1BQU1DO0lBQ1YsSUFBSSxLQUFvRSxFQUFFLEVBRXpFO0lBQ0QsT0FBT0Q7QUFDWDtBQUNBZixxQkFBcUIsR0FBR2E7QUFDeEIsU0FBU0QscUJBQXFCRSxJQUFJO0lBQzlCLE1BQU1DLE1BQU1GLGNBQWNDO0lBQzFCLElBQUksQ0FBQ0MsS0FBSztRQUNOLE1BQU0sSUFBSUcsTUFBTSxDQUFDLEVBQUVKLEtBQUsseUJBQXlCLENBQUM7SUFDdEQ7SUFDQSxPQUFPQztBQUNYO0FBQ0FmLDRCQUE0QixHQUFHWTtBQUMvQixTQUFTRDtJQUNMLE9BQU9DLHFCQUFxQjtBQUNoQztBQUNBWiwwQkFBMEIsR0FBR1c7QUFDN0IsU0FBU0Q7SUFDTCxPQUFPRyxjQUFjO0FBQ3pCO0FBQ0FiLG1CQUFtQixHQUFHVTtBQUN0QixTQUFTRDtJQUNMLE9BQU9HLHFCQUFxQjtBQUNoQztBQUNBWiwyQkFBMkIsR0FBR1M7QUFDOUIsU0FBU0Q7SUFDTCxPQUFPSyxjQUFjO0FBQ3pCO0FBQ0FiLG9CQUFvQixHQUFHUTtBQUN2QixTQUFTRDtJQUNMLE9BQU9LLHFCQUFxQjtBQUNoQztBQUNBWiwwQkFBMEIsR0FBR087QUFDN0IsU0FBU0Q7SUFDTCxPQUFPTyxjQUFjO0FBQ3pCO0FBQ0FiLG1CQUFtQixHQUFHTTtBQUN0QixTQUFTRDtJQUNMLE9BQU9PLHFCQUFxQjtBQUNoQztBQUNBWix3QkFBd0IsR0FBR0s7QUFDM0IsU0FBU0Q7SUFDTCxPQUFPUyxjQUFjO0FBQ3pCO0FBQ0FiLGlCQUFpQixHQUFHSTtBQUNwQixTQUFTRDtJQUNMLE9BQU9TLHFCQUFxQjtBQUNoQztBQUNBWiw4QkFBOEIsR0FBR0c7QUFDakMsU0FBU0Q7SUFDTCxPQUFPVyxjQUFjO0FBQ3pCO0FBQ0FiLHVCQUF1QixHQUFHRSxpQkFDMUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dpbmRvdy1nZXR0ZXJzL2Rpc3QvY2pzL2luZGV4LmpzPzdiMjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldExvY2FsU3RvcmFnZSA9IGV4cG9ydHMuZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdyA9IGV4cG9ydHMuZ2V0Q3J5cHRvID0gZXhwb3J0cy5nZXRDcnlwdG9PclRocm93ID0gZXhwb3J0cy5nZXRMb2NhdGlvbiA9IGV4cG9ydHMuZ2V0TG9jYXRpb25PclRocm93ID0gZXhwb3J0cy5nZXROYXZpZ2F0b3IgPSBleHBvcnRzLmdldE5hdmlnYXRvck9yVGhyb3cgPSBleHBvcnRzLmdldERvY3VtZW50ID0gZXhwb3J0cy5nZXREb2N1bWVudE9yVGhyb3cgPSBleHBvcnRzLmdldEZyb21XaW5kb3dPclRocm93ID0gZXhwb3J0cy5nZXRGcm9tV2luZG93ID0gdm9pZCAwO1xuZnVuY3Rpb24gZ2V0RnJvbVdpbmRvdyhuYW1lKSB7XG4gICAgbGV0IHJlcyA9IHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93W25hbWVdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJlcyA9IHdpbmRvd1tuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZ2V0RnJvbVdpbmRvdyA9IGdldEZyb21XaW5kb3c7XG5mdW5jdGlvbiBnZXRGcm9tV2luZG93T3JUaHJvdyhuYW1lKSB7XG4gICAgY29uc3QgcmVzID0gZ2V0RnJvbVdpbmRvdyhuYW1lKTtcbiAgICBpZiAoIXJlcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX0gaXMgbm90IGRlZmluZWQgaW4gV2luZG93YCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmdldEZyb21XaW5kb3dPclRocm93ID0gZ2V0RnJvbVdpbmRvd09yVGhyb3c7XG5mdW5jdGlvbiBnZXREb2N1bWVudE9yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwiZG9jdW1lbnRcIik7XG59XG5leHBvcnRzLmdldERvY3VtZW50T3JUaHJvdyA9IGdldERvY3VtZW50T3JUaHJvdztcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwiZG9jdW1lbnRcIik7XG59XG5leHBvcnRzLmdldERvY3VtZW50ID0gZ2V0RG9jdW1lbnQ7XG5mdW5jdGlvbiBnZXROYXZpZ2F0b3JPclRocm93KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93T3JUaHJvdyhcIm5hdmlnYXRvclwiKTtcbn1cbmV4cG9ydHMuZ2V0TmF2aWdhdG9yT3JUaHJvdyA9IGdldE5hdmlnYXRvck9yVGhyb3c7XG5mdW5jdGlvbiBnZXROYXZpZ2F0b3IoKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJuYXZpZ2F0b3JcIik7XG59XG5leHBvcnRzLmdldE5hdmlnYXRvciA9IGdldE5hdmlnYXRvcjtcbmZ1bmN0aW9uIGdldExvY2F0aW9uT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJsb2NhdGlvblwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYXRpb25PclRocm93ID0gZ2V0TG9jYXRpb25PclRocm93O1xuZnVuY3Rpb24gZ2V0TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJsb2NhdGlvblwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYXRpb24gPSBnZXRMb2NhdGlvbjtcbmZ1bmN0aW9uIGdldENyeXB0b09yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwiY3J5cHRvXCIpO1xufVxuZXhwb3J0cy5nZXRDcnlwdG9PclRocm93ID0gZ2V0Q3J5cHRvT3JUaHJvdztcbmZ1bmN0aW9uIGdldENyeXB0bygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvdyhcImNyeXB0b1wiKTtcbn1cbmV4cG9ydHMuZ2V0Q3J5cHRvID0gZ2V0Q3J5cHRvO1xuZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJsb2NhbFN0b3JhZ2VcIik7XG59XG5leHBvcnRzLmdldExvY2FsU3RvcmFnZU9yVGhyb3cgPSBnZXRMb2NhbFN0b3JhZ2VPclRocm93O1xuZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlKCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwibG9jYWxTdG9yYWdlXCIpO1xufVxuZXhwb3J0cy5nZXRMb2NhbFN0b3JhZ2UgPSBnZXRMb2NhbFN0b3JhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRMb2NhbFN0b3JhZ2UiLCJnZXRMb2NhbFN0b3JhZ2VPclRocm93IiwiZ2V0Q3J5cHRvIiwiZ2V0Q3J5cHRvT3JUaHJvdyIsImdldExvY2F0aW9uIiwiZ2V0TG9jYXRpb25PclRocm93IiwiZ2V0TmF2aWdhdG9yIiwiZ2V0TmF2aWdhdG9yT3JUaHJvdyIsImdldERvY3VtZW50IiwiZ2V0RG9jdW1lbnRPclRocm93IiwiZ2V0RnJvbVdpbmRvd09yVGhyb3ciLCJnZXRGcm9tV2luZG93IiwibmFtZSIsInJlcyIsInVuZGVmaW5lZCIsIndpbmRvdyIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/window-metadata/dist/cjs/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/window-metadata/dist/cjs/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getWindowMetadata = void 0;\nconst window_getters_1 = __webpack_require__(/*! @walletconnect/window-getters */ \"(ssr)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\nfunction getWindowMetadata() {\n    let doc;\n    let loc;\n    try {\n        doc = window_getters_1.getDocumentOrThrow();\n        loc = window_getters_1.getLocationOrThrow();\n    } catch (e) {\n        return null;\n    }\n    function getIcons() {\n        const links = doc.getElementsByTagName(\"link\");\n        const icons = [];\n        for(let i = 0; i < links.length; i++){\n            const link = links[i];\n            const rel = link.getAttribute(\"rel\");\n            if (rel) {\n                if (rel.toLowerCase().indexOf(\"icon\") > -1) {\n                    const href = link.getAttribute(\"href\");\n                    if (href) {\n                        if (href.toLowerCase().indexOf(\"https:\") === -1 && href.toLowerCase().indexOf(\"http:\") === -1 && href.indexOf(\"//\") !== 0) {\n                            let absoluteHref = loc.protocol + \"//\" + loc.host;\n                            if (href.indexOf(\"/\") === 0) {\n                                absoluteHref += href;\n                            } else {\n                                const path = loc.pathname.split(\"/\");\n                                path.pop();\n                                const finalPath = path.join(\"/\");\n                                absoluteHref += finalPath + \"/\" + href;\n                            }\n                            icons.push(absoluteHref);\n                        } else if (href.indexOf(\"//\") === 0) {\n                            const absoluteUrl = loc.protocol + href;\n                            icons.push(absoluteUrl);\n                        } else {\n                            icons.push(href);\n                        }\n                    }\n                }\n            }\n        }\n        return icons;\n    }\n    function getWindowMetadataOfAny(...args) {\n        const metaTags = doc.getElementsByTagName(\"meta\");\n        for(let i = 0; i < metaTags.length; i++){\n            const tag = metaTags[i];\n            const attributes = [\n                \"itemprop\",\n                \"property\",\n                \"name\"\n            ].map((target)=>tag.getAttribute(target)).filter((attr)=>{\n                if (attr) {\n                    return args.includes(attr);\n                }\n                return false;\n            });\n            if (attributes.length && attributes) {\n                const content = tag.getAttribute(\"content\");\n                if (content) {\n                    return content;\n                }\n            }\n        }\n        return \"\";\n    }\n    function getName() {\n        let name = getWindowMetadataOfAny(\"name\", \"og:site_name\", \"og:title\", \"twitter:title\");\n        if (!name) {\n            name = doc.title;\n        }\n        return name;\n    }\n    function getDescription() {\n        const description = getWindowMetadataOfAny(\"description\", \"og:description\", \"twitter:description\", \"keywords\");\n        return description;\n    }\n    const name = getName();\n    const description = getDescription();\n    const url = loc.origin;\n    const icons = getIcons();\n    const meta = {\n        description,\n        url,\n        icons,\n        name\n    };\n    return meta;\n}\nexports.getWindowMetadata = getWindowMetadata; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/window-metadata/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/modal-core/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@walletconnect/modal-core/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConfigCtrl: () => (/* binding */ y),\n/* harmony export */   CoreUtil: () => (/* binding */ a),\n/* harmony export */   EventsCtrl: () => (/* binding */ R),\n/* harmony export */   ExplorerCtrl: () => (/* binding */ te),\n/* harmony export */   ModalCtrl: () => (/* binding */ se),\n/* harmony export */   OptionsCtrl: () => (/* binding */ p),\n/* harmony export */   RouterCtrl: () => (/* binding */ T),\n/* harmony export */   ThemeCtrl: () => (/* binding */ ne),\n/* harmony export */   ToastCtrl: () => (/* binding */ oe)\n/* harmony export */ });\n/* harmony import */ var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! valtio/vanilla */ \"(ssr)/./node_modules/valtio/esm/vanilla.mjs\");\n\nconst o = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    history: [\n        \"ConnectWallet\"\n    ],\n    view: \"ConnectWallet\",\n    data: void 0\n}), T = {\n    state: o,\n    subscribe (e) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(o, ()=>e(o));\n    },\n    push (e, t) {\n        e !== o.view && (o.view = e, t && (o.data = t), o.history.push(e));\n    },\n    reset (e) {\n        o.view = e, o.history = [\n            e\n        ];\n    },\n    replace (e) {\n        o.history.length > 1 && (o.history[o.history.length - 1] = e, o.view = e);\n    },\n    goBack () {\n        if (o.history.length > 1) {\n            o.history.pop();\n            const [e] = o.history.slice(-1);\n            o.view = e;\n        }\n    },\n    setData (e) {\n        o.data = e;\n    }\n}, a = {\n    WALLETCONNECT_DEEPLINK_CHOICE: \"WALLETCONNECT_DEEPLINK_CHOICE\",\n    WCM_VERSION: \"WCM_VERSION\",\n    RECOMMENDED_WALLET_AMOUNT: 9,\n    isMobile () {\n        return  false ? 0 : !1;\n    },\n    isAndroid () {\n        return a.isMobile() && navigator.userAgent.toLowerCase().includes(\"android\");\n    },\n    isIos () {\n        const e = navigator.userAgent.toLowerCase();\n        return a.isMobile() && (e.includes(\"iphone\") || e.includes(\"ipad\"));\n    },\n    isHttpUrl (e) {\n        return e.startsWith(\"http://\") || e.startsWith(\"https://\");\n    },\n    isArray (e) {\n        return Array.isArray(e) && e.length > 0;\n    },\n    formatNativeUrl (e, t, s) {\n        if (a.isHttpUrl(e)) return this.formatUniversalUrl(e, t, s);\n        let n = e;\n        n.includes(\"://\") || (n = e.replaceAll(\"/\", \"\").replaceAll(\":\", \"\"), n = `${n}://`), n.endsWith(\"/\") || (n = `${n}/`), this.setWalletConnectDeepLink(n, s);\n        const i = encodeURIComponent(t);\n        return `${n}wc?uri=${i}`;\n    },\n    formatUniversalUrl (e, t, s) {\n        if (!a.isHttpUrl(e)) return this.formatNativeUrl(e, t, s);\n        let n = e;\n        n.endsWith(\"/\") || (n = `${n}/`), this.setWalletConnectDeepLink(n, s);\n        const i = encodeURIComponent(t);\n        return `${n}wc?uri=${i}`;\n    },\n    async wait (e) {\n        return new Promise((t)=>{\n            setTimeout(t, e);\n        });\n    },\n    openHref (e, t) {\n        window.open(e, t, \"noreferrer noopener\");\n    },\n    setWalletConnectDeepLink (e, t) {\n        try {\n            localStorage.setItem(a.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({\n                href: e,\n                name: t\n            }));\n        } catch  {\n            console.info(\"Unable to set WalletConnect deep link\");\n        }\n    },\n    setWalletConnectAndroidDeepLink (e) {\n        try {\n            const [t] = e.split(\"?\");\n            localStorage.setItem(a.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({\n                href: t,\n                name: \"Android\"\n            }));\n        } catch  {\n            console.info(\"Unable to set WalletConnect android deep link\");\n        }\n    },\n    removeWalletConnectDeepLink () {\n        try {\n            localStorage.removeItem(a.WALLETCONNECT_DEEPLINK_CHOICE);\n        } catch  {\n            console.info(\"Unable to remove WalletConnect deep link\");\n        }\n    },\n    setModalVersionInStorage () {\n        try {\n            typeof localStorage < \"u\" && localStorage.setItem(a.WCM_VERSION, \"2.6.2\");\n        } catch  {\n            console.info(\"Unable to set Web3Modal version in storage\");\n        }\n    },\n    getWalletRouterData () {\n        var e;\n        const t = (e = T.state.data) == null ? void 0 : e.Wallet;\n        if (!t) throw new Error('Missing \"Wallet\" view data');\n        return t;\n    }\n}, _ = typeof location < \"u\" && (location.hostname.includes(\"localhost\") || location.protocol.includes(\"https\")), r = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    enabled: _,\n    userSessionId: \"\",\n    events: [],\n    connectedWalletId: void 0\n}), R = {\n    state: r,\n    subscribe (e) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(r.events, ()=>e((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(r.events[r.events.length - 1])));\n    },\n    initialize () {\n        r.enabled && typeof (crypto == null ? void 0 : crypto.randomUUID) < \"u\" && (r.userSessionId = crypto.randomUUID());\n    },\n    setConnectedWalletId (e) {\n        r.connectedWalletId = e;\n    },\n    click (e) {\n        if (r.enabled) {\n            const t = {\n                type: \"CLICK\",\n                name: e.name,\n                userSessionId: r.userSessionId,\n                timestamp: Date.now(),\n                data: e\n            };\n            r.events.push(t);\n        }\n    },\n    track (e) {\n        if (r.enabled) {\n            const t = {\n                type: \"TRACK\",\n                name: e.name,\n                userSessionId: r.userSessionId,\n                timestamp: Date.now(),\n                data: e\n            };\n            r.events.push(t);\n        }\n    },\n    view (e) {\n        if (r.enabled) {\n            const t = {\n                type: \"VIEW\",\n                name: e.name,\n                userSessionId: r.userSessionId,\n                timestamp: Date.now(),\n                data: e\n            };\n            r.events.push(t);\n        }\n    }\n}, c = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    chains: void 0,\n    walletConnectUri: void 0,\n    isAuth: !1,\n    isCustomDesktop: !1,\n    isCustomMobile: !1,\n    isDataLoaded: !1,\n    isUiLoaded: !1\n}), p = {\n    state: c,\n    subscribe (e) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(c, ()=>e(c));\n    },\n    setChains (e) {\n        c.chains = e;\n    },\n    setWalletConnectUri (e) {\n        c.walletConnectUri = e;\n    },\n    setIsCustomDesktop (e) {\n        c.isCustomDesktop = e;\n    },\n    setIsCustomMobile (e) {\n        c.isCustomMobile = e;\n    },\n    setIsDataLoaded (e) {\n        c.isDataLoaded = e;\n    },\n    setIsUiLoaded (e) {\n        c.isUiLoaded = e;\n    },\n    setIsAuth (e) {\n        c.isAuth = e;\n    }\n}, W = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    projectId: \"\",\n    mobileWallets: void 0,\n    desktopWallets: void 0,\n    walletImages: void 0,\n    chains: void 0,\n    enableAuthMode: !1,\n    enableExplorer: !0,\n    explorerExcludedWalletIds: void 0,\n    explorerRecommendedWalletIds: void 0,\n    termsOfServiceUrl: void 0,\n    privacyPolicyUrl: void 0\n}), y = {\n    state: W,\n    subscribe (e) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(W, ()=>e(W));\n    },\n    setConfig (e) {\n        var t, s;\n        R.initialize(), p.setChains(e.chains), p.setIsAuth(Boolean(e.enableAuthMode)), p.setIsCustomMobile(Boolean((t = e.mobileWallets) == null ? void 0 : t.length)), p.setIsCustomDesktop(Boolean((s = e.desktopWallets) == null ? void 0 : s.length)), a.setModalVersionInStorage(), Object.assign(W, e);\n    }\n};\nvar V = Object.defineProperty, D = Object.getOwnPropertySymbols, H = Object.prototype.hasOwnProperty, B = Object.prototype.propertyIsEnumerable, M = (e, t, s)=>t in e ? V(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: s\n    }) : e[t] = s, K = (e, t)=>{\n    for(var s in t || (t = {}))H.call(t, s) && M(e, s, t[s]);\n    if (D) for (var s of D(t))B.call(t, s) && M(e, s, t[s]);\n    return e;\n};\nconst L = \"https://explorer-api.walletconnect.com\", E = \"wcm\", O = \"js-2.6.2\";\nasync function w(e, t) {\n    const s = K({\n        sdkType: E,\n        sdkVersion: O\n    }, t), n = new URL(e, L);\n    return n.searchParams.append(\"projectId\", y.state.projectId), Object.entries(s).forEach(([i, l])=>{\n        l && n.searchParams.append(i, String(l));\n    }), (await fetch(n)).json();\n}\nconst m = {\n    async getDesktopListings (e) {\n        return w(\"/w3m/v1/getDesktopListings\", e);\n    },\n    async getMobileListings (e) {\n        return w(\"/w3m/v1/getMobileListings\", e);\n    },\n    async getInjectedListings (e) {\n        return w(\"/w3m/v1/getInjectedListings\", e);\n    },\n    async getAllListings (e) {\n        return w(\"/w3m/v1/getAllListings\", e);\n    },\n    getWalletImageUrl (e) {\n        return `${L}/w3m/v1/getWalletImage/${e}?projectId=${y.state.projectId}&sdkType=${E}&sdkVersion=${O}`;\n    },\n    getAssetImageUrl (e) {\n        return `${L}/w3m/v1/getAssetImage/${e}?projectId=${y.state.projectId}&sdkType=${E}&sdkVersion=${O}`;\n    }\n};\nvar z = Object.defineProperty, j = Object.getOwnPropertySymbols, J = Object.prototype.hasOwnProperty, q = Object.prototype.propertyIsEnumerable, k = (e, t, s)=>t in e ? z(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: s\n    }) : e[t] = s, F = (e, t)=>{\n    for(var s in t || (t = {}))J.call(t, s) && k(e, s, t[s]);\n    if (j) for (var s of j(t))q.call(t, s) && k(e, s, t[s]);\n    return e;\n};\nconst N = a.isMobile(), d = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    wallets: {\n        listings: [],\n        total: 0,\n        page: 1\n    },\n    search: {\n        listings: [],\n        total: 0,\n        page: 1\n    },\n    recomendedWallets: []\n}), te = {\n    state: d,\n    async getRecomendedWallets () {\n        const { explorerRecommendedWalletIds: e, explorerExcludedWalletIds: t } = y.state;\n        if (e === \"NONE\" || t === \"ALL\" && !e) return d.recomendedWallets;\n        if (a.isArray(e)) {\n            const s = {\n                recommendedIds: e.join(\",\")\n            }, { listings: n } = await m.getAllListings(s), i = Object.values(n);\n            i.sort((l, v)=>{\n                const b = e.indexOf(l.id), f = e.indexOf(v.id);\n                return b - f;\n            }), d.recomendedWallets = i;\n        } else {\n            const { chains: s, isAuth: n } = p.state, i = s?.join(\",\"), l = a.isArray(t), v = {\n                page: 1,\n                sdks: n ? \"auth_v1\" : void 0,\n                entries: a.RECOMMENDED_WALLET_AMOUNT,\n                chains: i,\n                version: 2,\n                excludedIds: l ? t.join(\",\") : void 0\n            }, { listings: b } = N ? await m.getMobileListings(v) : await m.getDesktopListings(v);\n            d.recomendedWallets = Object.values(b);\n        }\n        return d.recomendedWallets;\n    },\n    async getWallets (e) {\n        const t = F({}, e), { explorerRecommendedWalletIds: s, explorerExcludedWalletIds: n } = y.state, { recomendedWallets: i } = d;\n        if (n === \"ALL\") return d.wallets;\n        i.length ? t.excludedIds = i.map((x)=>x.id).join(\",\") : a.isArray(s) && (t.excludedIds = s.join(\",\")), a.isArray(n) && (t.excludedIds = [\n            t.excludedIds,\n            n\n        ].filter(Boolean).join(\",\")), p.state.isAuth && (t.sdks = \"auth_v1\");\n        const { page: l, search: v } = e, { listings: b, total: f } = N ? await m.getMobileListings(t) : await m.getDesktopListings(t), A = Object.values(b), U = v ? \"search\" : \"wallets\";\n        return d[U] = {\n            listings: [\n                ...d[U].listings,\n                ...A\n            ],\n            total: f,\n            page: l ?? 1\n        }, {\n            listings: A,\n            total: f\n        };\n    },\n    getWalletImageUrl (e) {\n        return m.getWalletImageUrl(e);\n    },\n    getAssetImageUrl (e) {\n        return m.getAssetImageUrl(e);\n    },\n    resetSearch () {\n        d.search = {\n            listings: [],\n            total: 0,\n            page: 1\n        };\n    }\n}, I = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    open: !1\n}), se = {\n    state: I,\n    subscribe (e) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(I, ()=>e(I));\n    },\n    async open (e) {\n        return new Promise((t)=>{\n            const { isUiLoaded: s, isDataLoaded: n } = p.state;\n            if (a.removeWalletConnectDeepLink(), p.setWalletConnectUri(e?.uri), p.setChains(e?.chains), T.reset(\"ConnectWallet\"), s && n) I.open = !0, t();\n            else {\n                const i = setInterval(()=>{\n                    const l = p.state;\n                    l.isUiLoaded && l.isDataLoaded && (clearInterval(i), I.open = !0, t());\n                }, 200);\n            }\n        });\n    },\n    close () {\n        I.open = !1;\n    }\n};\nvar G = Object.defineProperty, $ = Object.getOwnPropertySymbols, Q = Object.prototype.hasOwnProperty, X = Object.prototype.propertyIsEnumerable, S = (e, t, s)=>t in e ? G(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: s\n    }) : e[t] = s, Y = (e, t)=>{\n    for(var s in t || (t = {}))Q.call(t, s) && S(e, s, t[s]);\n    if ($) for (var s of $(t))X.call(t, s) && S(e, s, t[s]);\n    return e;\n};\nfunction Z() {\n    return typeof matchMedia < \"u\" && matchMedia(\"(prefers-color-scheme: dark)\").matches;\n}\nconst C = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    themeMode: Z() ? \"dark\" : \"light\"\n}), ne = {\n    state: C,\n    subscribe (e) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(C, ()=>e(C));\n    },\n    setThemeConfig (e) {\n        const { themeMode: t, themeVariables: s } = e;\n        t && (C.themeMode = t), s && (C.themeVariables = Y({}, s));\n    }\n}, g = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n    open: !1,\n    message: \"\",\n    variant: \"success\"\n}), oe = {\n    state: g,\n    subscribe (e) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(g, ()=>e(g));\n    },\n    openToast (e, t) {\n        g.open = !0, g.message = e, g.variant = t;\n    },\n    closeToast () {\n        g.open = !1;\n    }\n};\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/modal-core/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/modal/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@walletconnect/modal/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletConnectModal: () => (/* binding */ d)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/modal-core */ \"(ssr)/./node_modules/@walletconnect/modal-core/dist/index.js\");\n\nclass d {\n    constructor(e){\n        this.openModal = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ModalCtrl.open, this.closeModal = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ModalCtrl.close, this.subscribeModal = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ModalCtrl.subscribe, this.setTheme = _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ThemeCtrl.setThemeConfig, _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ThemeCtrl.setThemeConfig(e), _walletconnect_modal_core__WEBPACK_IMPORTED_MODULE_0__.ConfigCtrl.setConfig(e), this.initUi();\n    }\n    async initUi() {\n        if (false) {}\n    }\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvbW9kYWwvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzRztBQUFBLE1BQU1RO0lBQUVDLFlBQVlDLENBQUMsQ0FBQztRQUFDLElBQUksQ0FBQ0MsU0FBUyxHQUFDVixnRUFBQ0EsQ0FBQ1csSUFBSSxFQUFDLElBQUksQ0FBQ0MsVUFBVSxHQUFDWixnRUFBQ0EsQ0FBQ2EsS0FBSyxFQUFDLElBQUksQ0FBQ0MsY0FBYyxHQUFDZCxnRUFBQ0EsQ0FBQ2UsU0FBUyxFQUFDLElBQUksQ0FBQ0MsUUFBUSxHQUFDZCxnRUFBQ0EsQ0FBQ2UsY0FBYyxFQUFDZixnRUFBQ0EsQ0FBQ2UsY0FBYyxDQUFDUixJQUFHTCxpRUFBQ0EsQ0FBQ2MsU0FBUyxDQUFDVCxJQUFHLElBQUksQ0FBQ1UsTUFBTTtJQUFFO0lBQUMsTUFBTUEsU0FBUTtRQUFDLElBQUcsS0FBaUIsRUFBQyxFQUE0SjtJQUFBO0FBQUM7QUFBaUMsQ0FDN2YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L21vZGFsL2Rpc3QvaW5kZXguanM/ZGUxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7TW9kYWxDdHJsIGFzIHQsVGhlbWVDdHJsIGFzIG8sQ29uZmlnQ3RybCBhcyBpLE9wdGlvbnNDdHJsIGFzIG59ZnJvbVwiQHdhbGxldGNvbm5lY3QvbW9kYWwtY29yZVwiO2NsYXNzIGR7Y29uc3RydWN0b3IoZSl7dGhpcy5vcGVuTW9kYWw9dC5vcGVuLHRoaXMuY2xvc2VNb2RhbD10LmNsb3NlLHRoaXMuc3Vic2NyaWJlTW9kYWw9dC5zdWJzY3JpYmUsdGhpcy5zZXRUaGVtZT1vLnNldFRoZW1lQ29uZmlnLG8uc2V0VGhlbWVDb25maWcoZSksaS5zZXRDb25maWcoZSksdGhpcy5pbml0VWkoKX1hc3luYyBpbml0VWkoKXtpZih0eXBlb2Ygd2luZG93PFwidVwiKXthd2FpdCBpbXBvcnQoXCJAd2FsbGV0Y29ubmVjdC9tb2RhbC11aVwiKTtjb25zdCBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ3Y20tbW9kYWxcIik7ZG9jdW1lbnQuYm9keS5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJiZWZvcmVlbmRcIixlKSxuLnNldElzVWlMb2FkZWQoITApfX19ZXhwb3J0e2QgYXMgV2FsbGV0Q29ubmVjdE1vZGFsfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk1vZGFsQ3RybCIsInQiLCJUaGVtZUN0cmwiLCJvIiwiQ29uZmlnQ3RybCIsImkiLCJPcHRpb25zQ3RybCIsIm4iLCJkIiwiY29uc3RydWN0b3IiLCJlIiwib3Blbk1vZGFsIiwib3BlbiIsImNsb3NlTW9kYWwiLCJjbG9zZSIsInN1YnNjcmliZU1vZGFsIiwic3Vic2NyaWJlIiwic2V0VGhlbWUiLCJzZXRUaGVtZUNvbmZpZyIsInNldENvbmZpZyIsImluaXRVaSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImJvZHkiLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJzZXRJc1VpTG9hZGVkIiwiV2FsbGV0Q29ubmVjdE1vZGFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/modal/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/alloc.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/alloc.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   alloc: () => (/* binding */ alloc),\n/* harmony export */   allocUnsafe: () => (/* binding */ allocUnsafe)\n/* harmony export */ });\n/* harmony import */ var _util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/as-uint8array.js */ \"(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/as-uint8array.js\");\n\nfunction alloc(size = 0) {\n    if (globalThis.Buffer != null && globalThis.Buffer.alloc != null) {\n        return (0,_util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_0__.asUint8Array)(globalThis.Buffer.alloc(size));\n    }\n    return new Uint8Array(size);\n}\nfunction allocUnsafe(size = 0) {\n    if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {\n        return (0,_util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_0__.asUint8Array)(globalThis.Buffer.allocUnsafe(size));\n    }\n    return new Uint8Array(size);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy9hbGxvYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUQ7QUFDaEQsU0FBU0MsTUFBTUMsT0FBTyxDQUFDO0lBQzVCLElBQUlDLFdBQVdDLE1BQU0sSUFBSSxRQUFRRCxXQUFXQyxNQUFNLENBQUNILEtBQUssSUFBSSxNQUFNO1FBQ2hFLE9BQU9ELG9FQUFZQSxDQUFDRyxXQUFXQyxNQUFNLENBQUNILEtBQUssQ0FBQ0M7SUFDOUM7SUFDQSxPQUFPLElBQUlHLFdBQVdIO0FBQ3hCO0FBQ08sU0FBU0ksWUFBWUosT0FBTyxDQUFDO0lBQ2xDLElBQUlDLFdBQVdDLE1BQU0sSUFBSSxRQUFRRCxXQUFXQyxNQUFNLENBQUNFLFdBQVcsSUFBSSxNQUFNO1FBQ3RFLE9BQU9OLG9FQUFZQSxDQUFDRyxXQUFXQyxNQUFNLENBQUNFLFdBQVcsQ0FBQ0o7SUFDcEQ7SUFDQSxPQUFPLElBQUlHLFdBQVdIO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3JlbGF5LWF1dGgvbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL2VzbS9zcmMvYWxsb2MuanM/YmE0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc1VpbnQ4QXJyYXkgfSBmcm9tICcuL3V0aWwvYXMtdWludDhhcnJheS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gYWxsb2Moc2l6ZSA9IDApIHtcbiAgaWYgKGdsb2JhbFRoaXMuQnVmZmVyICE9IG51bGwgJiYgZ2xvYmFsVGhpcy5CdWZmZXIuYWxsb2MgIT0gbnVsbCkge1xuICAgIHJldHVybiBhc1VpbnQ4QXJyYXkoZ2xvYmFsVGhpcy5CdWZmZXIuYWxsb2Moc2l6ZSkpO1xuICB9XG4gIHJldHVybiBuZXcgVWludDhBcnJheShzaXplKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhbGxvY1Vuc2FmZShzaXplID0gMCkge1xuICBpZiAoZ2xvYmFsVGhpcy5CdWZmZXIgIT0gbnVsbCAmJiBnbG9iYWxUaGlzLkJ1ZmZlci5hbGxvY1Vuc2FmZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGFzVWludDhBcnJheShnbG9iYWxUaGlzLkJ1ZmZlci5hbGxvY1Vuc2FmZShzaXplKSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHNpemUpO1xufSJdLCJuYW1lcyI6WyJhc1VpbnQ4QXJyYXkiLCJhbGxvYyIsInNpemUiLCJnbG9iYWxUaGlzIiwiQnVmZmVyIiwiVWludDhBcnJheSIsImFsbG9jVW5zYWZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/alloc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/concat.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/concat.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concat: () => (/* binding */ concat)\n/* harmony export */ });\n/* harmony import */ var _alloc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alloc.js */ \"(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/alloc.js\");\n/* harmony import */ var _util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/as-uint8array.js */ \"(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/as-uint8array.js\");\n\n\nfunction concat(arrays, length) {\n    if (!length) {\n        length = arrays.reduce((acc, curr)=>acc + curr.length, 0);\n    }\n    const output = (0,_alloc_js__WEBPACK_IMPORTED_MODULE_0__.allocUnsafe)(length);\n    let offset = 0;\n    for (const arr of arrays){\n        output.set(arr, offset);\n        offset += arr.length;\n    }\n    return (0,_util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_1__.asUint8Array)(output);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy9jb25jYXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlDO0FBQ2M7QUFDaEQsU0FBU0UsT0FBT0MsTUFBTSxFQUFFQyxNQUFNO0lBQ25DLElBQUksQ0FBQ0EsUUFBUTtRQUNYQSxTQUFTRCxPQUFPRSxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsT0FBU0QsTUFBTUMsS0FBS0gsTUFBTSxFQUFFO0lBQzNEO0lBQ0EsTUFBTUksU0FBU1Isc0RBQVdBLENBQUNJO0lBQzNCLElBQUlLLFNBQVM7SUFDYixLQUFLLE1BQU1DLE9BQU9QLE9BQVE7UUFDeEJLLE9BQU9HLEdBQUcsQ0FBQ0QsS0FBS0Q7UUFDaEJBLFVBQVVDLElBQUlOLE1BQU07SUFDdEI7SUFDQSxPQUFPSCxvRUFBWUEsQ0FBQ087QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy9jb25jYXQuanM/MGYyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhbGxvY1Vuc2FmZSB9IGZyb20gJy4vYWxsb2MuanMnO1xuaW1wb3J0IHsgYXNVaW50OEFycmF5IH0gZnJvbSAnLi91dGlsL2FzLXVpbnQ4YXJyYXkuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdChhcnJheXMsIGxlbmd0aCkge1xuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IGFycmF5cy5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgY3Vyci5sZW5ndGgsIDApO1xuICB9XG4gIGNvbnN0IG91dHB1dCA9IGFsbG9jVW5zYWZlKGxlbmd0aCk7XG4gIGxldCBvZmZzZXQgPSAwO1xuICBmb3IgKGNvbnN0IGFyciBvZiBhcnJheXMpIHtcbiAgICBvdXRwdXQuc2V0KGFyciwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gYXJyLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gYXNVaW50OEFycmF5KG91dHB1dCk7XG59Il0sIm5hbWVzIjpbImFsbG9jVW5zYWZlIiwiYXNVaW50OEFycmF5IiwiY29uY2F0IiwiYXJyYXlzIiwibGVuZ3RoIiwicmVkdWNlIiwiYWNjIiwiY3VyciIsIm91dHB1dCIsIm9mZnNldCIsImFyciIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/concat.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/from-string.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/from-string.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromString: () => (/* binding */ fromString)\n/* harmony export */ });\n/* harmony import */ var _util_bases_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/bases.js */ \"(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/bases.js\");\n/* harmony import */ var _util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/as-uint8array.js */ \"(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/as-uint8array.js\");\n\n\nfunction fromString(string, encoding = \"utf8\") {\n    const base = _util_bases_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"][encoding];\n    if (!base) {\n        throw new Error(`Unsupported encoding \"${encoding}\"`);\n    }\n    if ((encoding === \"utf8\" || encoding === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n        return (0,_util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_1__.asUint8Array)(globalThis.Buffer.from(string, \"utf-8\"));\n    }\n    return base.decoder.decode(`${base.prefix}${string}`);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy9mcm9tLXN0cmluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0M7QUFDbUI7QUFDaEQsU0FBU0UsV0FBV0MsTUFBTSxFQUFFQyxXQUFXLE1BQU07SUFDbEQsTUFBTUMsT0FBT0wsc0RBQUssQ0FBQ0ksU0FBUztJQUM1QixJQUFJLENBQUNDLE1BQU07UUFDVCxNQUFNLElBQUlDLE1BQU0sQ0FBQyxzQkFBc0IsRUFBR0YsU0FBVSxDQUFDLENBQUM7SUFDeEQ7SUFDQSxJQUFJLENBQUNBLGFBQWEsVUFBVUEsYUFBYSxPQUFNLEtBQU1HLFdBQVdDLE1BQU0sSUFBSSxRQUFRRCxXQUFXQyxNQUFNLENBQUNDLElBQUksSUFBSSxNQUFNO1FBQ2hILE9BQU9SLG9FQUFZQSxDQUFDTSxXQUFXQyxNQUFNLENBQUNDLElBQUksQ0FBQ04sUUFBUTtJQUNyRDtJQUNBLE9BQU9FLEtBQUtLLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDLENBQUMsRUFBR04sS0FBS08sTUFBTSxDQUFFLEVBQUdULE9BQVEsQ0FBQztBQUMxRCIsInNvdXJjZXMiOlsid2VicGFjazovL0BzZS0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9yZWxheS1hdXRoL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL2Zyb20tc3RyaW5nLmpzPzI1YTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJhc2VzIGZyb20gJy4vdXRpbC9iYXNlcy5qcyc7XG5pbXBvcnQgeyBhc1VpbnQ4QXJyYXkgfSBmcm9tICcuL3V0aWwvYXMtdWludDhhcnJheS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZnJvbVN0cmluZyhzdHJpbmcsIGVuY29kaW5nID0gJ3V0ZjgnKSB7XG4gIGNvbnN0IGJhc2UgPSBiYXNlc1tlbmNvZGluZ107XG4gIGlmICghYmFzZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZW5jb2RpbmcgXCIkeyBlbmNvZGluZyB9XCJgKTtcbiAgfVxuICBpZiAoKGVuY29kaW5nID09PSAndXRmOCcgfHwgZW5jb2RpbmcgPT09ICd1dGYtOCcpICYmIGdsb2JhbFRoaXMuQnVmZmVyICE9IG51bGwgJiYgZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGFzVWludDhBcnJheShnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKHN0cmluZywgJ3V0Zi04JykpO1xuICB9XG4gIHJldHVybiBiYXNlLmRlY29kZXIuZGVjb2RlKGAkeyBiYXNlLnByZWZpeCB9JHsgc3RyaW5nIH1gKTtcbn0iXSwibmFtZXMiOlsiYmFzZXMiLCJhc1VpbnQ4QXJyYXkiLCJmcm9tU3RyaW5nIiwic3RyaW5nIiwiZW5jb2RpbmciLCJiYXNlIiwiRXJyb3IiLCJnbG9iYWxUaGlzIiwiQnVmZmVyIiwiZnJvbSIsImRlY29kZXIiLCJkZWNvZGUiLCJwcmVmaXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/from-string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/to-string.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/to-string.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toString: () => (/* binding */ toString)\n/* harmony export */ });\n/* harmony import */ var _util_bases_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/bases.js */ \"(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/bases.js\");\n\nfunction toString(array, encoding = \"utf8\") {\n    const base = _util_bases_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"][encoding];\n    if (!base) {\n        throw new Error(`Unsupported encoding \"${encoding}\"`);\n    }\n    if ((encoding === \"utf8\" || encoding === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n        return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString(\"utf8\");\n    }\n    return base.encoder.encode(array).substring(1);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy90by1zdHJpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0M7QUFDN0IsU0FBU0MsU0FBU0MsS0FBSyxFQUFFQyxXQUFXLE1BQU07SUFDL0MsTUFBTUMsT0FBT0osc0RBQUssQ0FBQ0csU0FBUztJQUM1QixJQUFJLENBQUNDLE1BQU07UUFDVCxNQUFNLElBQUlDLE1BQU0sQ0FBQyxzQkFBc0IsRUFBR0YsU0FBVSxDQUFDLENBQUM7SUFDeEQ7SUFDQSxJQUFJLENBQUNBLGFBQWEsVUFBVUEsYUFBYSxPQUFNLEtBQU1HLFdBQVdDLE1BQU0sSUFBSSxRQUFRRCxXQUFXQyxNQUFNLENBQUNDLElBQUksSUFBSSxNQUFNO1FBQ2hILE9BQU9GLFdBQVdDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTixNQUFNTyxNQUFNLEVBQUVQLE1BQU1RLFVBQVUsRUFBRVIsTUFBTVMsVUFBVSxFQUFFVixRQUFRLENBQUM7SUFDM0Y7SUFDQSxPQUFPRyxLQUFLUSxPQUFPLENBQUNDLE1BQU0sQ0FBQ1gsT0FBT1ksU0FBUyxDQUFDO0FBQzlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3JlbGF5LWF1dGgvbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL2VzbS9zcmMvdG8tc3RyaW5nLmpzPzY5ODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJhc2VzIGZyb20gJy4vdXRpbC9iYXNlcy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gdG9TdHJpbmcoYXJyYXksIGVuY29kaW5nID0gJ3V0ZjgnKSB7XG4gIGNvbnN0IGJhc2UgPSBiYXNlc1tlbmNvZGluZ107XG4gIGlmICghYmFzZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZW5jb2RpbmcgXCIkeyBlbmNvZGluZyB9XCJgKTtcbiAgfVxuICBpZiAoKGVuY29kaW5nID09PSAndXRmOCcgfHwgZW5jb2RpbmcgPT09ICd1dGYtOCcpICYmIGdsb2JhbFRoaXMuQnVmZmVyICE9IG51bGwgJiYgZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oYXJyYXkuYnVmZmVyLCBhcnJheS5ieXRlT2Zmc2V0LCBhcnJheS5ieXRlTGVuZ3RoKS50b1N0cmluZygndXRmOCcpO1xuICB9XG4gIHJldHVybiBiYXNlLmVuY29kZXIuZW5jb2RlKGFycmF5KS5zdWJzdHJpbmcoMSk7XG59Il0sIm5hbWVzIjpbImJhc2VzIiwidG9TdHJpbmciLCJhcnJheSIsImVuY29kaW5nIiwiYmFzZSIsIkVycm9yIiwiZ2xvYmFsVGhpcyIsIkJ1ZmZlciIsImZyb20iLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImVuY29kZXIiLCJlbmNvZGUiLCJzdWJzdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/to-string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/as-uint8array.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/as-uint8array.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asUint8Array: () => (/* binding */ asUint8Array)\n/* harmony export */ });\nfunction asUint8Array(buf) {\n    if (globalThis.Buffer != null) {\n        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    return buf;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy91dGlsL2FzLXVpbnQ4YXJyYXkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLGFBQWFDLEdBQUc7SUFDOUIsSUFBSUMsV0FBV0MsTUFBTSxJQUFJLE1BQU07UUFDN0IsT0FBTyxJQUFJQyxXQUFXSCxJQUFJSSxNQUFNLEVBQUVKLElBQUlLLFVBQVUsRUFBRUwsSUFBSU0sVUFBVTtJQUNsRTtJQUNBLE9BQU9OO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy91dGlsL2FzLXVpbnQ4YXJyYXkuanM/ODQzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gYXNVaW50OEFycmF5KGJ1Zikge1xuICBpZiAoZ2xvYmFsVGhpcy5CdWZmZXIgIT0gbnVsbCkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWYuYnVmZmVyLCBidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVMZW5ndGgpO1xuICB9XG4gIHJldHVybiBidWY7XG59Il0sIm5hbWVzIjpbImFzVWludDhBcnJheSIsImJ1ZiIsImdsb2JhbFRoaXMiLCJCdWZmZXIiLCJVaW50OEFycmF5IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/as-uint8array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/bases.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/bases.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var multiformats_basics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/basics */ \"(ssr)/./node_modules/multiformats/esm/src/basics.js\");\n/* harmony import */ var _alloc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../alloc.js */ \"(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/alloc.js\");\n\n\nfunction createCodec(name, prefix, encode, decode) {\n    return {\n        name,\n        prefix,\n        encoder: {\n            name,\n            prefix,\n            encode\n        },\n        decoder: {\n            decode\n        }\n    };\n}\nconst string = createCodec(\"utf8\", \"u\", (buf)=>{\n    const decoder = new TextDecoder(\"utf8\");\n    return \"u\" + decoder.decode(buf);\n}, (str)=>{\n    const encoder = new TextEncoder();\n    return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec(\"ascii\", \"a\", (buf)=>{\n    let string = \"a\";\n    for(let i = 0; i < buf.length; i++){\n        string += String.fromCharCode(buf[i]);\n    }\n    return string;\n}, (str)=>{\n    str = str.substring(1);\n    const buf = (0,_alloc_js__WEBPACK_IMPORTED_MODULE_1__.allocUnsafe)(str.length);\n    for(let i = 0; i < str.length; i++){\n        buf[i] = str.charCodeAt(i);\n    }\n    return buf;\n});\nconst BASES = {\n    utf8: string,\n    \"utf-8\": string,\n    hex: multiformats_basics__WEBPACK_IMPORTED_MODULE_0__.bases.base16,\n    latin1: ascii,\n    ascii: ascii,\n    binary: ascii,\n    ...multiformats_basics__WEBPACK_IMPORTED_MODULE_0__.bases\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BASES);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy91dGlsL2Jhc2VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QztBQUNGO0FBQzFDLFNBQVNFLFlBQVlDLElBQUksRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLE1BQU07SUFDL0MsT0FBTztRQUNMSDtRQUNBQztRQUNBRyxTQUFTO1lBQ1BKO1lBQ0FDO1lBQ0FDO1FBQ0Y7UUFDQUcsU0FBUztZQUFFRjtRQUFPO0lBQ3BCO0FBQ0Y7QUFDQSxNQUFNRyxTQUFTUCxZQUFZLFFBQVEsS0FBS1EsQ0FBQUE7SUFDdEMsTUFBTUYsVUFBVSxJQUFJRyxZQUFZO0lBQ2hDLE9BQU8sTUFBTUgsUUFBUUYsTUFBTSxDQUFDSTtBQUM5QixHQUFHRSxDQUFBQTtJQUNELE1BQU1MLFVBQVUsSUFBSU07SUFDcEIsT0FBT04sUUFBUUYsTUFBTSxDQUFDTyxJQUFJRSxTQUFTLENBQUM7QUFDdEM7QUFDQSxNQUFNQyxRQUFRYixZQUFZLFNBQVMsS0FBS1EsQ0FBQUE7SUFDdEMsSUFBSUQsU0FBUztJQUNiLElBQUssSUFBSU8sSUFBSSxHQUFHQSxJQUFJTixJQUFJTyxNQUFNLEVBQUVELElBQUs7UUFDbkNQLFVBQVVTLE9BQU9DLFlBQVksQ0FBQ1QsR0FBRyxDQUFDTSxFQUFFO0lBQ3RDO0lBQ0EsT0FBT1A7QUFDVCxHQUFHRyxDQUFBQTtJQUNEQSxNQUFNQSxJQUFJRSxTQUFTLENBQUM7SUFDcEIsTUFBTUosTUFBTVQsc0RBQVdBLENBQUNXLElBQUlLLE1BQU07SUFDbEMsSUFBSyxJQUFJRCxJQUFJLEdBQUdBLElBQUlKLElBQUlLLE1BQU0sRUFBRUQsSUFBSztRQUNuQ04sR0FBRyxDQUFDTSxFQUFFLEdBQUdKLElBQUlRLFVBQVUsQ0FBQ0o7SUFDMUI7SUFDQSxPQUFPTjtBQUNUO0FBQ0EsTUFBTVcsUUFBUTtJQUNaQyxNQUFNYjtJQUNOLFNBQVNBO0lBQ1RjLEtBQUt2QixzREFBS0EsQ0FBQ3dCLE1BQU07SUFDakJDLFFBQVFWO0lBQ1JBLE9BQU9BO0lBQ1BXLFFBQVFYO0lBQ1IsR0FBR2Ysc0RBQUs7QUFDVjtBQUNBLGlFQUFlcUIsS0FBS0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BzZS0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9yZWxheS1hdXRoL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL3V0aWwvYmFzZXMuanM/YzBmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYXNlcyB9IGZyb20gJ211bHRpZm9ybWF0cy9iYXNpY3MnO1xuaW1wb3J0IHsgYWxsb2NVbnNhZmUgfSBmcm9tICcuLi9hbGxvYy5qcyc7XG5mdW5jdGlvbiBjcmVhdGVDb2RlYyhuYW1lLCBwcmVmaXgsIGVuY29kZSwgZGVjb2RlKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICBwcmVmaXgsXG4gICAgZW5jb2Rlcjoge1xuICAgICAgbmFtZSxcbiAgICAgIHByZWZpeCxcbiAgICAgIGVuY29kZVxuICAgIH0sXG4gICAgZGVjb2RlcjogeyBkZWNvZGUgfVxuICB9O1xufVxuY29uc3Qgc3RyaW5nID0gY3JlYXRlQ29kZWMoJ3V0ZjgnLCAndScsIGJ1ZiA9PiB7XG4gIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ3V0ZjgnKTtcbiAgcmV0dXJuICd1JyArIGRlY29kZXIuZGVjb2RlKGJ1Zik7XG59LCBzdHIgPT4ge1xuICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gIHJldHVybiBlbmNvZGVyLmVuY29kZShzdHIuc3Vic3RyaW5nKDEpKTtcbn0pO1xuY29uc3QgYXNjaWkgPSBjcmVhdGVDb2RlYygnYXNjaWknLCAnYScsIGJ1ZiA9PiB7XG4gIGxldCBzdHJpbmcgPSAnYSc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKTtcbiAgfVxuICByZXR1cm4gc3RyaW5nO1xufSwgc3RyID0+IHtcbiAgc3RyID0gc3RyLnN1YnN0cmluZygxKTtcbiAgY29uc3QgYnVmID0gYWxsb2NVbnNhZmUoc3RyLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgYnVmW2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgcmV0dXJuIGJ1Zjtcbn0pO1xuY29uc3QgQkFTRVMgPSB7XG4gIHV0Zjg6IHN0cmluZyxcbiAgJ3V0Zi04Jzogc3RyaW5nLFxuICBoZXg6IGJhc2VzLmJhc2UxNixcbiAgbGF0aW4xOiBhc2NpaSxcbiAgYXNjaWk6IGFzY2lpLFxuICBiaW5hcnk6IGFzY2lpLFxuICAuLi5iYXNlc1xufTtcbmV4cG9ydCBkZWZhdWx0IEJBU0VTOyJdLCJuYW1lcyI6WyJiYXNlcyIsImFsbG9jVW5zYWZlIiwiY3JlYXRlQ29kZWMiLCJuYW1lIiwicHJlZml4IiwiZW5jb2RlIiwiZGVjb2RlIiwiZW5jb2RlciIsImRlY29kZXIiLCJzdHJpbmciLCJidWYiLCJUZXh0RGVjb2RlciIsInN0ciIsIlRleHRFbmNvZGVyIiwic3Vic3RyaW5nIiwiYXNjaWkiLCJpIiwibGVuZ3RoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2hhckNvZGVBdCIsIkJBU0VTIiwidXRmOCIsImhleCIsImJhc2UxNiIsImxhdGluMSIsImJpbmFyeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-auth/node_modules/uint8arrays/esm/src/util/bases.js\n");

/***/ })

};
;