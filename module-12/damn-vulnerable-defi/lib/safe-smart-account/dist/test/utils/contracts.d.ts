export declare const killLibSource = "\ncontract Test {\n    function killme() public {\n        selfdestruct(payable(msg.sender));\n    }\n\n    function expose() public returns (address handler) {\n        bytes32 slot = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\n        assembly {\n            handler := sload(slot)\n        }\n    }\n\n    function estimate(address to, bytes memory data) public returns (uint256) {\n        uint256 startGas = gasleft();\n        (bool success,) = to.call{ gas: gasleft() }(data);\n        require(success, \"Transaction failed\");\n        return startGas - gasleft();\n    }\n\n    address singleton;\n    uint256 public value = 0;\n    function updateAndGet() public returns (uint256) {\n        value++;\n        return value;\n    }\n\n    function trever() public returns (address handler) {\n        revert(\"Why are you doing this?\");\n    }\n}";
export declare const killLibContract: (deployer: Wallet) => Promise<Contract>;
