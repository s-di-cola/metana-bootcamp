"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var hardhat_1 = require("hardhat");
require("@nomiclabs/hardhat-ethers");
var constants_1 = require("@ethersproject/constants");
var units_1 = require("@ethersproject/units");
var abi_1 = require("@ethersproject/abi");
var setup_1 = require("../utils/setup");
var execution_1 = require("../../src/utils/execution");
describe("Safe", function () { return __awaiter(void 0, void 0, void 0, function () {
    var _a, user1, user2, setupTests;
    return __generator(this, function (_b) {
        _a = hardhat_1.waffle.provider.getWallets(), user1 = _a[0], user2 = _a[1];
        setupTests = hardhat_1.deployments.createFixture(function (_a) { return __awaiter(void 0, [_a], void 0, function (_b) {
            var handler, ownerSafe, messageHandler;
            var _c;
            var deployments = _b.deployments;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, deployments.fixture()];
                    case 1:
                        _d.sent();
                        return [4 /*yield*/, (0, setup_1.getCompatFallbackHandler)()];
                    case 2:
                        handler = _d.sent();
                        return [4 /*yield*/, (0, setup_1.getSafeWithOwners)([user1.address, user2.address], 2, handler.address)];
                    case 3:
                        ownerSafe = _d.sent();
                        messageHandler = handler.attach(ownerSafe.address);
                        _c = {};
                        return [4 /*yield*/, (0, setup_1.getSafeWithOwners)([ownerSafe.address, user1.address], 1)];
                    case 4: return [2 /*return*/, (_c.safe = _d.sent(),
                            _c.ownerSafe = ownerSafe,
                            _c.messageHandler = messageHandler,
                            _c)];
                }
            });
        }); });
        describe("0xExploit", function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                /*
                 * In case of 0x it was possible to use EIP-1271 (contract signatures) to generate a valid signature for EOA accounts.
                 * See https://samczsun.com/the-0x-vulnerability-explained/
                 */
                it("should not be able to use EIP-1271 (contract signatures) for EOA", function () { return __awaiter(void 0, void 0, void 0, function () {
                    var _a, safe, ownerSafe, messageHandler, _b, operation, to, value, data, nonce, messageData, messageHash, ownerSigs, _c, _d, encodedOwnerSigns, sigs, _e, _f;
                    return __generator(this, function (_g) {
                        switch (_g.label) {
                            case 0: return [4 /*yield*/, setupTests()];
                            case 1:
                                _a = _g.sent(), safe = _a.safe, ownerSafe = _a.ownerSafe, messageHandler = _a.messageHandler;
                                // Safe should be empty again
                                return [4 /*yield*/, user1.sendTransaction({ to: safe.address, value: (0, units_1.parseEther)("1") })];
                            case 2:
                                // Safe should be empty again
                                _g.sent();
                                _b = chai_1.expect;
                                return [4 /*yield*/, hardhat_1.default.ethers.provider.getBalance(safe.address)];
                            case 3: return [4 /*yield*/, _b.apply(void 0, [_g.sent()]).to.be.deep.eq((0, units_1.parseEther)("1"))];
                            case 4:
                                _g.sent();
                                operation = 0;
                                to = user1.address;
                                value = (0, units_1.parseEther)("1");
                                data = "0x";
                                return [4 /*yield*/, safe.nonce()];
                            case 5:
                                nonce = _g.sent();
                                return [4 /*yield*/, safe.encodeTransactionData(to, value, data, operation, 0, 0, 0, constants_1.AddressZero, constants_1.AddressZero, nonce)];
                            case 6:
                                messageData = _g.sent();
                                return [4 /*yield*/, messageHandler.getMessageHash(messageData)];
                            case 7:
                                messageHash = _g.sent();
                                _c = execution_1.buildSignatureBytes;
                                return [4 /*yield*/, (0, execution_1.signHash)(user1, messageHash)];
                            case 8:
                                _d = [_g.sent()];
                                return [4 /*yield*/, (0, execution_1.signHash)(user2, messageHash)];
                            case 9: return [4 /*yield*/, _c.apply(void 0, [_d.concat([_g.sent()])])];
                            case 10:
                                ownerSigs = _g.sent();
                                encodedOwnerSigns = abi_1.defaultAbiCoder.encode(["bytes"], [ownerSigs]).slice(66);
                                sigs = "0x" +
                                    "000000000000000000000000" +
                                    user2.address.slice(2) +
                                    "0000000000000000000000000000000000000000000000000000000000000041" +
                                    "00" + // r, s, v
                                    encodedOwnerSigns;
                                // Transaction should fail (invalid signatures should revert the Ethereum transaction)
                                return [4 /*yield*/, (0, chai_1.expect)(safe.execTransaction(to, value, data, operation, 0, 0, 0, constants_1.AddressZero, constants_1.AddressZero, sigs), "Transaction should fail if invalid signature is provided").to.be.reverted];
                            case 11:
                                // Transaction should fail (invalid signatures should revert the Ethereum transaction)
                                _g.sent();
                                _e = chai_1.expect;
                                return [4 /*yield*/, hardhat_1.default.ethers.provider.getBalance(safe.address)];
                            case 12: return [4 /*yield*/, _e.apply(void 0, [_g.sent()]).to.be.deep.eq((0, units_1.parseEther)("1"))];
                            case 13:
                                _g.sent();
                                // Use Safe owner
                                sigs =
                                    "0x" +
                                        "000000000000000000000000" +
                                        ownerSafe.address.slice(2) +
                                        "0000000000000000000000000000000000000000000000000000000000000041" +
                                        "00" + // r, s, v
                                        encodedOwnerSigns;
                                return [4 /*yield*/, safe.execTransaction(to, value, data, operation, 0, 0, 0, constants_1.AddressZero, constants_1.AddressZero, sigs)];
                            case 14:
                                _g.sent();
                                _f = chai_1.expect;
                                return [4 /*yield*/, hardhat_1.default.ethers.provider.getBalance(safe.address)];
                            case 15: 
                            // Safe should be empty again
                            return [4 /*yield*/, _f.apply(void 0, [_g.sent()]).to.be.deep.eq((0, units_1.parseEther)("0"))];
                            case 16:
                                // Safe should be empty again
                                _g.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
                it("should revert if EIP-1271 check changes state", function () { return __awaiter(void 0, void 0, void 0, function () {
                    var _a, safe, ownerSafe, messageHandler, source, testValidator, _b, _c, operation, to, value, data, nonce, messageData, messageHash, ownerSigs, _d, _e, encodedOwnerSigns, sigs, _f, _g;
                    return __generator(this, function (_h) {
                        switch (_h.label) {
                            case 0: return [4 /*yield*/, setupTests()];
                            case 1:
                                _a = _h.sent(), safe = _a.safe, ownerSafe = _a.ownerSafe, messageHandler = _a.messageHandler;
                                source = "\n            contract Test {\n                bool public changeState;\n                uint256 public nonce;\n                function isValidSignature(bytes memory _data, bytes memory _signature) public returns (bytes4) {\n                    if (changeState) {\n                        nonce = nonce + 1;\n                    }\n                    return 0x20c13b0b;\n                }\n    \n                function shouldChangeState(bool value) public {\n                    changeState = value;\n                }\n            }";
                                return [4 /*yield*/, (0, setup_1.deployContract)(user1, source)];
                            case 2:
                                testValidator = _h.sent();
                                return [4 /*yield*/, testValidator.shouldChangeState(true)];
                            case 3:
                                _h.sent();
                                return [4 /*yield*/, (0, execution_1.executeContractCallWithSigners)(safe, safe, "addOwnerWithThreshold", [testValidator.address, 1], [user1])];
                            case 4:
                                _h.sent();
                                _b = chai_1.expect;
                                return [4 /*yield*/, safe.getOwners()];
                            case 5: return [4 /*yield*/, _b.apply(void 0, [_h.sent()]).to.be.deep.eq([testValidator.address, ownerSafe.address, user1.address])];
                            case 6:
                                _h.sent();
                                // Deposit 1 ETH + some spare money for execution
                                return [4 /*yield*/, user1.sendTransaction({ to: safe.address, value: (0, units_1.parseEther)("1") })];
                            case 7:
                                // Deposit 1 ETH + some spare money for execution
                                _h.sent();
                                _c = chai_1.expect;
                                return [4 /*yield*/, hardhat_1.default.ethers.provider.getBalance(safe.address)];
                            case 8: return [4 /*yield*/, _c.apply(void 0, [_h.sent()]).to.be.deep.eq((0, units_1.parseEther)("1"))];
                            case 9:
                                _h.sent();
                                operation = 0;
                                to = user1.address;
                                value = (0, units_1.parseEther)("1");
                                data = "0x";
                                return [4 /*yield*/, safe.nonce()];
                            case 10:
                                nonce = _h.sent();
                                return [4 /*yield*/, safe.encodeTransactionData(to, value, data, operation, 0, 0, 0, constants_1.AddressZero, constants_1.AddressZero, nonce)];
                            case 11:
                                messageData = _h.sent();
                                return [4 /*yield*/, messageHandler.getMessageHash(messageData)];
                            case 12:
                                messageHash = _h.sent();
                                _d = execution_1.buildSignatureBytes;
                                return [4 /*yield*/, (0, execution_1.signHash)(user1, messageHash)];
                            case 13:
                                _e = [_h.sent()];
                                return [4 /*yield*/, (0, execution_1.signHash)(user2, messageHash)];
                            case 14: return [4 /*yield*/, _d.apply(void 0, [_e.concat([_h.sent()])])];
                            case 15:
                                ownerSigs = _h.sent();
                                encodedOwnerSigns = abi_1.defaultAbiCoder.encode(["bytes"], [ownerSigs]).slice(66);
                                sigs = "0x" +
                                    "000000000000000000000000" +
                                    testValidator.address.slice(2) +
                                    "0000000000000000000000000000000000000000000000000000000000000041" +
                                    "00" + // r, s, v
                                    encodedOwnerSigns;
                                // Transaction should fail (state changing signature check should revert)
                                return [4 /*yield*/, (0, chai_1.expect)(safe.execTransaction(to, value, data, operation, 0, 0, 0, constants_1.AddressZero, constants_1.AddressZero, sigs), "Transaction should fail if invalid signature is provided").to.be.reverted];
                            case 16:
                                // Transaction should fail (state changing signature check should revert)
                                _h.sent();
                                _f = chai_1.expect;
                                return [4 /*yield*/, hardhat_1.default.ethers.provider.getBalance(safe.address)];
                            case 17: return [4 /*yield*/, _f.apply(void 0, [_h.sent()]).to.be.deep.eq((0, units_1.parseEther)("1"))];
                            case 18:
                                _h.sent();
                                return [4 /*yield*/, testValidator.shouldChangeState(false)];
                            case 19:
                                _h.sent();
                                return [4 /*yield*/, safe.execTransaction(to, value, data, operation, 0, 0, 0, constants_1.AddressZero, constants_1.AddressZero, sigs)];
                            case 20:
                                _h.sent();
                                _g = chai_1.expect;
                                return [4 /*yield*/, hardhat_1.default.ethers.provider.getBalance(safe.address)];
                            case 21: 
                            // Safe should be empty again
                            return [4 /*yield*/, _g.apply(void 0, [_h.sent()]).to.be.deep.eq((0, units_1.parseEther)("0"))];
                            case 22:
                                // Safe should be empty again
                                _h.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
                return [2 /*return*/];
            });
        }); });
        return [2 /*return*/];
    });
}); });
