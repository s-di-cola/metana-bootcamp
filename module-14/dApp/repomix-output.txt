This file is a merged representation of the entire codebase, combined into a single document.
Generated by Repomix on: 2025-02-14T09:04:10.431Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  lib/
    components/
      OrderDetails.svelte
      OrdersOverview.svelte
      PlaceOrder.svelte
      Welcome.svelte
    configs/
      tenderly.config.ts
      wallet.config.ts
    contract/
      abis/
        LimitOrder.json
      cancel-order.ts
      place-order.ts
    graphql/
      graphql.ts
      subscription.ts
    utils/
      token.ts
    index.ts
    types.ts
  routes/
    +layout.svelte
    +page.svelte
  app.css
  app.d.ts
  app.html
.gitignore
.npmrc
.prettierignore
.prettierrc
package.json
README.md
svelte.config.js
tailwind.config.ts
tsconfig.json
vite.config.ts

================================================================
Files
================================================================

================
File: src/lib/components/OrderDetails.svelte
================
<script lang="ts">
	import { Card, Badge, Button, P, Label } from 'svelte-5-ui-lib';
	import { LinkOutline, CloseCircleSolid } from 'flowbite-svelte-icons';
	import { type Address } from 'viem';
	import { getTokenInfo, formatTokenAmount } from '$lib/utils/token';
	import type { Order } from '$lib/types';
	import cancelOrder from '$lib/contract/cancel-order';
	import { virtual_mainnet } from '$lib/configs/tenderly.config';

	let { order, onTransactionStatus } = $props<{
		order: Order,
		onTransactionStatus: (status: { success: boolean, message: string }) => void
	}>();
	let tokenPair = $state('Loading...');
	let amount = $state('Loading...');
	let isLoading = $state(false);

	function formatTimestamp(timestamp: string | number): string {
		try {
			const date = new Date(Number(timestamp) * 1000);
			if (isNaN(date.getTime())) {
				return 'Invalid Date';
			}
			return new Intl.DateTimeFormat('default', {
				day: 'numeric',
				month: 'short',
				year: 'numeric',
				hour: '2-digit',
				minute: '2-digit'
			}).format(date);
		} catch (error) {
			console.error('Error formatting timestamp:', error);
			return 'Invalid Date';
		}
	}

	function formatExpiry(expiry: bigint): string {
		try {
			const date = new Date(Number(expiry) * 1000);
			if (isNaN(date.getTime())) {
				return 'No expiry';
			}
			return new Intl.DateTimeFormat('default', {
				day: 'numeric',
				month: 'short',
				year: 'numeric',
				hour: '2-digit',
				minute: '2-digit'
			}).format(date);
		} catch (error) {
			console.error('Error formatting expiry:', error);
			return 'No expiry';
		}
	}

	function getExplorerLink(hash: string): string {
		return `${virtual_mainnet.blockExplorers.default.url}/tx/${hash}`;
	}

	async function handleCancel() {
		if (!order.orderID) return;
		try {
			isLoading = true;
			const tx = await cancelOrder(BigInt(order.orderID));
			onTransactionStatus({
				success: true,
				message: `Order #${order.orderID} cancelled successfully`
			});
		} catch (error) {
			console.error('Error cancelling order:', error);
			onTransactionStatus({
				success: false,
				message: 'Failed to cancel order. Please try again.'
			});
		} finally {
			isLoading = false;
		}
	}

	$effect(() => {
		Promise.all([
			getTokenInfo(order.tokenIn as Address),
			getTokenInfo(order.tokenOut as Address)
		]).then(([inToken, outToken]) => {
			tokenPair = `${inToken.symbol}/${outToken.symbol}`;
			amount = formatTokenAmount(order.amount, inToken.decimals);
		});
	});

	const statusColors = {
		PLACED: 'yellow',
		EXECUTED: 'green',
		CANCELLED: 'red'
	};
</script>

<Card
	size="lg"
	padding="xl"
	class="max-w-4xl mx-auto bg-white hover:shadow-xl transition-all duration-200"
	rounded="xl"
>
	<div class="flex justify-between items-start mb-6">
		<div class="space-y-1">
			<div class="flex items-center gap-3">
				<P size="lg" weight="semibold">Order #{order.orderID}</P>
				<Badge
					color={statusColors[order.state]}
					rounded="full"
					gradient
					border
					size="lg"
					class="uppercase tracking-wider"
				>
					{order.state}
				</Badge>
			</div>
			<P size="sm" color="muted">Created {formatTimestamp(order.timestamp)}</P>
		</div>

		{#if order.transactionHash}
			<a
				href={getExplorerLink(order.transactionHash)}
				target="_blank"
				rel="noopener noreferrer"
				class="text-primary-600 hover:text-primary-700 p-2 hover:bg-gray-50 rounded-full transition-colors"
			>
				<LinkOutline class="w-5 h-5" />
			</a>
		{/if}
	</div>

	<div class="grid grid-cols-4 gap-x-12 gap-y-4">
		<div>
			<Label class="mb-2 text-xs font-medium text-gray-500 uppercase tracking-wider">Trading Pair</Label>
			<P weight="medium">{tokenPair}</P>
		</div>
		<div>
			<Label class="mb-2 text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</Label>
			<P weight="medium">{amount}</P>
		</div>
		<div>
			<Label class="mb-2 text-xs font-medium text-gray-500 uppercase tracking-wider">Limit Price</Label>
			<P weight="medium">
				${formatTokenAmount(order.targetPrice, 18)} USDC
			</P>
		</div>
		<div>
			<Label class="mb-2 text-xs font-medium text-gray-500 uppercase tracking-wider">Expiry</Label>
			<P weight="medium">{formatExpiry(order.expiry)}</P>
		</div>
	</div>

	{#if order.state === 'PLACED'}
		<div class="mt-6 flex justify-end">
			<Button
				variant="outline"
				color="error"
				size="sm"
				disabled={isLoading}
				onclick={handleCancel}
				class="uppercase tracking-wider px-4"
			>
				<CloseCircleSolid class="w-4 h-4 mr-2" />
				Cancel Order
			</Button>
		</div>
	{/if}
</Card>

================
File: src/lib/components/OrdersOverview.svelte
================
<script lang="ts">
	import { Card, Label, P } from 'svelte-5-ui-lib';
	import type { Order } from '$lib/types';

	let { orders, onStateClick, selectedState } = $props<{
		orders: Order[],
		onStateClick: (state: string | null) => void,
		selectedState: string | null
	}>();

	let counts = $derived({
		PLACED: orders.filter(o => o.state === 'PLACED').length,
		EXECUTED: orders.filter(o => o.state === 'EXECUTED').length,
		CANCELLED: orders.filter(o => o.state === 'CANCELLED').length
	});

	const stateConfig = {
		PLACED: {
			label: 'PENDING ORDERS',
			icon: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>`,
			color: 'text-yellow-500'
		},
		EXECUTED: {
			label: 'EXECUTED ORDERS',
			icon: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>`,
			color: 'text-green-500'
		},
		CANCELLED: {
			label: 'CANCELLED ORDERS',
			icon: `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>`,
			color: 'text-red-500'
		}
	};
</script>

<div class="grid grid-cols-3 gap-4 mb-6 max-w-4xl mx-auto">
	{#each Object.entries(stateConfig) as [state, config]}
		<Card
			size="lg"
			padding="lg"
			rounded="xl"
			class={`cursor-pointer transition-all duration-200 bg-white hover:shadow-xl
				${selectedState === state ? 'ring-2 ring-primary-500' : 'hover:ring-2 hover:ring-primary-200'}`}
			onclick={() => onStateClick(state)}
		>
			<div class="p-4">
				<div class="flex items-center justify-between mb-3">
					<Label class="text-xs font-medium text-gray-500 uppercase tracking-wider">{config.label}</Label>
					<svg class={`w-5 h-5 ${config.color}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
						{@html config.icon}
					</svg>
				</div>
				<P size="3xl" weight="bold" class="mt-2">{counts[state]}</P>
			</div>
		</Card>
	{/each}
</div>

================
File: src/lib/components/PlaceOrder.svelte
================
<script lang="ts">
	import { Button, Card, Input, Label, Modal, Select } from 'svelte-5-ui-lib';
	import { ArrowDownToBracketOutline, ArrowRightToBracketOutline } from 'flowbite-svelte-icons';

	let { isOpen = false, onOrderCreated } = $props<{
		isOpen: boolean;
		onOrderCreated: (order: typeof orderForm) => void;
	}>();

	const tokens = [
		{ value: 'ETH', label: 'Ethereum (ETH)' },
		{ value: 'USDC', label: 'USD Coin (USDC)' },
		{ value: 'WBTC', label: 'Wrapped Bitcoin (WBTC)' },
		{ value: 'BNB', label: 'Binance Coin (BNB)' },
		{ value: 'ADA', label: 'Cardano (ADA)' },
		{ value: 'DOT', label: 'Polkadot (DOT)' },
		{ value: 'USDT', label: 'Tether (USDT)' }
	];

	let orderForm = $state({
		fromToken: '',
		toToken: '',
		amount: null as number | null,
		limitPrice: null as number | null,
		orderType: 'buy'
	});

	let isFormValid = $derived(
		orderForm.fromToken &&
		orderForm.toToken &&
		orderForm.fromToken !== orderForm.toToken &&
		orderForm.amount !== null &&
		orderForm.amount > 0 &&
		orderForm.limitPrice !== null &&
		orderForm.limitPrice > 0
	);

	function createOrder() {
		if (isFormValid) {
			onOrderCreated(orderForm);
			isOpen = false;
			resetForm();
		}
	}

	function resetForm() {
		orderForm = {
			fromToken: '',
			toToken: '',
			amount: null,
			limitPrice: null,
			orderType: 'buy'
		};
	}

	function handleAmountInput(event: Event) {
		const input = event.target as HTMLInputElement;
		const value = parseFloat(input.value);
		orderForm.amount = isNaN(value) || value < 0 ? null : value;
	}

	function handleLimitPriceInput(event: Event) {
		const input = event.target as HTMLInputElement;
		const value = parseFloat(input.value);
		orderForm.limitPrice = isNaN(value) || value < 0 ? null : value;
	}

	$effect(() => {
		if (!isOpen) {
			resetForm();
		}
	});
</script>

<Modal {isOpen} onClose={() => isOpen = false} size="lg">
	<Card padding="lg" rounded="lg" class="w-full max-w-2xl mx-auto">
		<div class="flex justify-between items-center mb-6">
			<h2 class="text-2xl font-bold">Create New Limit Order</h2>
		</div>

		<form onsubmit={(e) => { e.preventDefault(); createOrder(); }} class="space-y-6">
			<div class="grid grid-cols-2 gap-6">
				<div>
					<Label for="fromToken" class="mb-2">From Token</Label>
					<Select
						items={tokens}
						bind:value={orderForm.fromToken}
						placeholder="Select token"
					/>
				</div>

				<div>
					<Label for="toToken" class="mb-2">To Token</Label>
					<Select
						items={tokens.filter(t => t.value !== orderForm.fromToken)}
						bind:value={orderForm.toToken}
						placeholder="Select token"
					/>
				</div>
			</div>

			<div class="space-y-4">
				<div>
					<Label for="amount">Amount</Label>
					<Input
						id="amount"
						type="number"
						placeholder="Enter amount"
						value={orderForm.amount?.toString() ?? ''}
						oninput={handleAmountInput}
						min="0"
						step="0.0001"
					/>
				</div>

				<div>
					<Label for="limitPrice">Limit Price</Label>
					<Input
						id="limitPrice"
						type="number"
						placeholder="Enter limit price"
						value={orderForm.limitPrice?.toString() ?? ''}
						oninput={handleLimitPriceInput}
						min="0"
						step="0.0001"
					/>
				</div>
			</div>

			<div>
				<Label class="mb-3">Order Type</Label>
				<div class="grid grid-cols-2 gap-4">
					<Button
						type="button"
						color={orderForm.orderType === 'buy' ? 'success' : 'secondary'}
						class="w-full justify-center"
						onclick={() => orderForm.orderType = 'buy'}
					>
						<ArrowRightToBracketOutline class="w-5 h-5 mr-2" />
						Buy
					</Button>

					<Button
						type="button"
						color={orderForm.orderType === 'sell' ? 'error' : 'secondary'}
						class="w-full justify-center"
						onclick={() => orderForm.orderType = 'sell'}
					>
						<ArrowDownToBracketOutline class="w-5 h-5 mr-2" />
						Sell
					</Button>
				</div>
			</div>

			<div class="flex justify-end mt-6 pt-4 border-t">
				<Button
					type="submit"
					color="primary"
					size="lg"
					disabled={!isFormValid}
					class="w-full"
				>
					Create Order
				</Button>
			</div>
		</form>
	</Card>
</Modal>

================
File: src/lib/components/Welcome.svelte
================
<script>
	import { Button, Card, Heading, P } from 'svelte-5-ui-lib';
</script>

<div class="container mx-auto px-4 py-6 max-w-5xl">
	<div class="flex justify-center items-center min-h-[calc(100vh-100px)]">
		<Card
			class="text-center max-w-lg w-full bg-white shadow-lg rounded-xl"
			size="lg"
			padding="xl"
		>
			<Heading tag="h2" class="mb-4 text-2xl font-bold text-gray-900">
				Welcome to Limit Orders
			</Heading>
			<P class="mb-6 text-center text-base text-gray-600">
				Connect your wallet to start placing and managing limit orders for your crypto assets
			</P>
			<div class="flex justify-center">
				<appkit-button
					label="Connect Wallet"
					balance="hide"
					size="md"
					loadingLabel="Connecting..."
				/>
			</div>
		</Card>
	</div>
</div>

================
File: src/lib/configs/tenderly.config.ts
================
import { type Address, defineChain } from 'viem';
import limitOrderAbi from "$lib/contract/abis/LimitOrder.json";

export const virtual_mainnet = defineChain({
  id: 1,
  name: 'Virtual Mainnet',
  nativeCurrency: {
    name: 'VETH',
    symbol: 'VETH',
    decimals: 18
  },
  rpcUrls: {
    default: {
      http: ['https://virtual.mainnet.rpc.tenderly.co/0e2a2a18-76b8-43fb-965b-66733b18e203']
    }
  },
  blockExplorers: {
    default: {
      name: 'Tenderly Explorer',
      url: 'https://virtual.mainnet.rpc.tenderly.co/1f1b2436-23e6-4cbb-bd8c-b7ea63251768'
    }
  },
  network: 'mainnet',
  // Required for defineChain
  contracts: {},
  testnet: false,
  sourceId: 1
});

export const contract = {
  address: '0xa528fcef208123e69f794219e3e5efd2feacc2c5' as Address,
  abi: limitOrderAbi
};

================
File: src/lib/configs/wallet.config.ts
================
import { createAppKit } from '@reown/appkit';
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi';
import { virtual_mainnet } from "$lib/configs/tenderly.config";
import { PUBLIC_REOWN_PROJECT_ID } from '$env/static/public';

const projectId = PUBLIC_REOWN_PROJECT_ID;
export const networks = [virtual_mainnet];

export const wagmiAdapter = new WagmiAdapter({
    projectId,
    networks
});

export const modal = createAppKit({
    adapters: [wagmiAdapter],
    networks: [virtual_mainnet],
    metadata: {
        name: 'limit-order',
        description: 'Limit Order Demo dApp',
        url: 'https://reown.com/appkit',
        icons: ['https://assets.reown.com/reown-profile-pic.png']
    },
    projectId,
    features: {
        analytics: true
    }
});

================
File: src/lib/contract/abis/LimitOrder.json
================
{
  "_format": "hh-sol-artifact-1",
  "contractName": "LimitOrder",
  "sourceName": "contracts/LimitOrder.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderID",
          "type": "uint256"
        }
      ],
      "name": "OrderCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        }
      ],
      "name": "OrderExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetPrice",
          "type": "uint256"
        }
      ],
      "name": "OrderPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXECUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderID",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderID",
          "type": "uint256"
        }
      ],
      "name": "executeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orders",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LimitOrder.OrderType",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "fee",
          "type": "uint16"
        }
      ],
      "name": "placeOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_orders",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "fee",
          "type": "uint16"
        },
        {
          "internalType": "enum LimitOrder.OrderType",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "internalType": "enum LimitOrder.OrderState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161165738038061165783398101604081905261002f9161013f565b6001600160a01b03831660805261004760008361007b565b506100727fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e638261007b565b5050505061018c565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1661011d576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556100d53390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610121565b5060005b92915050565b6001600160a01b038116811461013c57600080fd5b50565b60008060006060848603121561015457600080fd5b835161015f81610127565b602085015190935061017081610127565b604085015190925061018181610127565b809150509250925092565b6080516114a26101b5600039600081816102230152818161075f015261086b01526114a26000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806391d148541161008c578063a6f3c50f11610066578063a6f3c50f146101e0578063b8f234a81461020b578063c31c9c071461021e578063d547741f1461025d57600080fd5b806391d14854146101b257806394f61134146101c5578063a217fddf146101d857600080fd5b80632e2dc43e116100c85780632e2dc43e1461016f5780632f2ff15d1461017757806336568abe1461018c578063514fcac71461019f57600080fd5b806301ffc9a7146100ef57806307bd026514610117578063248a9ca31461014c575b600080fd5b6101026100fd36600461113c565b610270565b60405190151581526020015b60405180910390f35b61013e7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b60405190815260200161010e565b61013e61015a36600461116d565b60009081526020819052604090206001015490565b60015461013e565b61018a6101853660046111a2565b6102a7565b005b61018a61019a3660046111a2565b6102d2565b61018a6101ad36600461116d565b61030a565b6101026101c03660046111a2565b6104f8565b61018a6101d336600461116d565b610521565b61013e600081565b6101f36101ee36600461116d565b610948565b60405161010e9c9b9a999897969594939291906111e4565b61013e610219366004611278565b6109d7565b6102457f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010e565b61018a61026b3660046111a2565b610dc6565b60006001600160e01b03198216637965db0b60e01b14806102a157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546102c281610deb565b6102cc8383610df8565b50505050565b6001600160a01b03811633146102fb5760405163334bd91960e11b815260040160405180910390fd5b6103058282610e8a565b505050565b60015481106103575760405162461bcd60e51b815260206004820152601460248201527313dc99195c88191bd95cc81b9bdd08195e1a5cdd60621b60448201526064015b60405180910390fd5b336001600160a01b031660018281548110610374576103746112fa565b6000918252602090912060089091020154600160281b90046001600160a01b0316146103d45760405162461bcd60e51b815260206004820152600f60248201526e2737ba1037b93232b91036b0b5b2b960891b604482015260640161034e565b600181815481106103e7576103e76112fa565b6000918252602090912060089091020154640100000000900460ff16156104435760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b604482015260640161034e565b600260018281548110610458576104586112fa565b60009182526020909120600890910201805463ff00000019166301000000836002811115610488576104886111ce565b021790555060018082815481106104a1576104a16112fa565b60009182526020822060089091020180549215156401000000000264ff00000000199093169290921790915560405182917f61b9399f2f0f32ca39ce8d7be32caed5ec22fe07a6daba3a467ed479ec60658291a250565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6361054b81610deb565b60015482106105935760405162461bcd60e51b815260206004820152601460248201527313dc99195c88191bd95cc81b9bdd08195e1a5cdd60621b604482015260640161034e565b336001600160a01b0316600183815481106105b0576105b06112fa565b6000918252602090912060089091020154600160281b90046001600160a01b0316036106115760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21032bc32b1baba37b960811b604482015260640161034e565b60018281548110610624576106246112fa565b6000918252602090912060089091020154640100000000900460ff16156106805760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b604482015260640161034e565b4260018381548110610694576106946112fa565b906000526020600020906008020160060154116106dd5760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b604482015260640161034e565b6000600183815481106106f2576106f26112fa565b60009182526020909120600890910201805464ffff00000019166401010000001780825560018201546003830154929350610745926001600160a01b0391821692600160281b9004909116903090610ef5565b60018101546003820154610784916001600160a01b0316907f000000000000000000000000000000000000000000000000000000000000000090610fff565b600080825462010000900460ff1660018111156107a3576107a36111ce565b146107d457670de0b6b3a7640000826004015483600301546107c59190611326565b6107cf919061133d565b6107e8565b816004015482600301546107e8919061133d565b604080516101008101825260018501546001600160a01b039081168252600286015481166020830152855461ffff811693830193909352600160281b90920490911660608201529091506000906080810161084442603c61135f565b81526020018460030154815260200183815260200160006001600160a01b031681525090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663414bf389826040518263ffffffff1660e01b81526004016108b59190611372565b6020604051808303816000875af11580156108d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f891906113ef565b50610904600143611408565b406007840181905560405190815285907f42a09ea063cf94c2bfccd1f9269e4979615c8b34caaf993364922fae96892df89060200160405180910390a25050505050565b6001818154811061095857600080fd5b60009182526020909120600890910201805460018201546002830154600384015460048501546005860154600687015460079097015461ffff8716985060ff620100008804811698630100000089048216986401000000008104909216976001600160a01b03600160281b90930483169790831696921694919391928c565b6000428311610a195760405162461bcd60e51b815260206004820152600e60248201526d496e76616c69642065787069727960901b604482015260640161034e565b60008511610a695760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161034e565b60008411610ac55760405162461bcd60e51b815260206004820152602360248201527f546172676574207072696365206d75737420626520677265617465722074686160448201526206e20360ec1b606482015260840161034e565b60008261ffff16118015610ade57506127108261ffff16105b610b185760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642066656560a81b604482015260640161034e565b856001600160a01b0316876001600160a01b031603610b6a5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420746f6b656e7360901b604482015260640161034e565b60006040518061018001604052808461ffff1681526020018a6001811115610b9457610b946111ce565b815260200160008152600060208083018290523360408401526001600160a01b038c811660608501528b16608084015260a083018a905260c083018990524260e0840152610100830188905261012090920181905260018054808201825591819052835160089092027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805461ffff90931661ffff1984168117825593850151949550859490939092849262ffffff199091169091179062010000908490811115610c6257610c626111ce565b021790555060408201518154829063ff00000019166301000000836002811115610c8e57610c8e6111ce565b0217905550606082015181546080840151640100000000600160c81b03199091166401000000009215159290920265010000000000600160c81b03191691909117600160281b6001600160a01b039283160217825560a0830151600180840180546001600160a01b031990811693851693909317905560c0850151600285018054909316931692909217905560e08301516003830155610100830151600483015561012083015160058301556101408301516006830155610160909201516007909101558054600091610d6091611408565b604080516001600160a01b038c811682528b16602082015290810189905260608101889052909150339082907f2da1ae6a26515607ae8c5f62b5490ae88aff22f4be4cb17e94217f06f060c9bc9060800160405180910390a39998505050505050505050565b600082815260208190526040902060010154610de181610deb565b6102cc8383610e8a565b610df581336110ff565b50565b6000610e0483836104f8565b610e82576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055610e3a3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016102a1565b5060006102a1565b6000610e9683836104f8565b15610e82576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016102a1565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691610f59919061141b565b6000604051808303816000865af19150503d8060008114610f96576040519150601f19603f3d011682016040523d82523d6000602084013e610f9b565b606091505b5091509150818015610fc5575080511580610fc5575080806020019051810190610fc5919061144a565b610ff75760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b604482015260640161034e565b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b179052915160009283929087169161105b919061141b565b6000604051808303816000865af19150503d8060008114611098576040519150601f19603f3d011682016040523d82523d6000602084013e61109d565b606091505b50915091508180156110c75750805115806110c75750808060200190518101906110c7919061144a565b6110f85760405162461bcd60e51b8152602060048201526002602482015261534160f01b604482015260640161034e565b5050505050565b61110982826104f8565b6111385760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161034e565b5050565b60006020828403121561114e57600080fd5b81356001600160e01b03198116811461116657600080fd5b9392505050565b60006020828403121561117f57600080fd5b5035919050565b80356001600160a01b038116811461119d57600080fd5b919050565b600080604083850312156111b557600080fd5b823591506111c560208401611186565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b61ffff8d168152610180810160028d10611200576112006111ce565b8c602083015260038c10611216576112166111ce565b8b604083015261122a606083018c15159052565b6001600160a01b03998a16608083015297891660a08201529590971660c086015260e08501939093526101008401919091526101208301526101408201526101600191909152949350505050565b600080600080600080600060e0888a03121561129357600080fd5b8735600281106112a257600080fd5b96506112b060208901611186565b95506112be60408901611186565b9450606088013593506080880135925060a0880135915060c088013561ffff811681146112ea57600080fd5b8091505092959891949750929550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176102a1576102a1611310565b60008261135a57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156102a1576102a1611310565b81516001600160a01b03908116825260208084015182169083015260408084015162ffffff169083015260608084015191821690830152610100820190506080830151608083015260a083015160a083015260c083015160c083015260e08301516113e860e08401826001600160a01b03169052565b5092915050565b60006020828403121561140157600080fd5b5051919050565b818103818111156102a1576102a1611310565b6000825160005b8181101561143c5760208186018101518583015201611422565b506000920191825250919050565b60006020828403121561145c57600080fd5b8151801515811461116657600080fdfea26469706673582212202d9eefea8d2487d6ab1841b3b4d9092139e6ff846ff517bf305034d716db0b4464736f6c634300081c0033",
  "deployedBytecode": "",
  "linkReferences": {},
  "deployedLinkReferences": {}
}

================
File: src/lib/contract/cancel-order.ts
================
import { contract, virtual_mainnet } from '$lib/configs/tenderly.config';
import { createPublicClient, createWalletClient, custom, http, type Hex, type Abi } from 'viem';

const publicClient = createPublicClient({
	chain: virtual_mainnet,
	transport: http()
});

async function cancelOrder(orderId: bigint): Promise<Hex> {
	const walletClient = createWalletClient({
		chain: virtual_mainnet,
		transport: custom(window.ethereum)
	});

	const [account] = await walletClient.requestAddresses();

	const { request } = await publicClient.simulateContract({
		account,
		abi: contract.abi as any,
		address: contract.address,
		functionName: 'cancelOrder',
		args: [orderId]
	});

	const hash = await walletClient.writeContract(request);
	const receipt = await publicClient.waitForTransactionReceipt({ hash });
	return receipt.transactionHash;
}

export default cancelOrder;

================
File: src/lib/contract/place-order.ts
================
import { createPublicClient, createWalletClient, custom, http, type Hash } from 'viem';
import { contract, virtual_mainnet } from "$lib/configs/tenderly.config";
import type { Order } from "$lib/types";

const publicClient = createPublicClient({
    chain: virtual_mainnet,
    transport: http()
});

async function placeOrder(order: Order): Promise<Hash> {
    const walletClient = createWalletClient({
        chain: virtual_mainnet,
        transport: custom(window.ethereum)
    });

    const [account] = await walletClient.requestAddresses();

    const { request } = await publicClient.simulateContract({
        account,
        address: contract.address,
        abi: contract.abi as any,
        functionName: 'placeOrder',
        args: [
            order.orderType,
            order.tokenIn,
            order.tokenOut,
            order.amount,
            order.targetPrice,
            order.expiry,
            order.fee
        ],
    });

    const hash = await walletClient.writeContract(request);
    const receipt = await publicClient.waitForTransactionReceipt({ hash });
    return receipt.transactionHash;
}

export { placeOrder };

================
File: src/lib/graphql/graphql.ts
================
import { gql, request } from 'graphql-request';
import type { Order } from '$lib/types';

const endpoint = "http://localhost:8000/subgraphs/name/limit-order-subgraph";

const document = gql`
    query GetOrders($userAddress: Bytes) {
        orders(where: { maker: $userAddress }) {
            id
            orderID
            maker
            tokenIn
            tokenOut
            amount
            targetPrice
            state
            timestamp
            transactionHash
            executedTransactionHash
            executedAt
            cancelledAt
        }
    }
`;

export async function fetchOrders(userAddress: string): Promise<Order[]> {
    const response = await request(endpoint, document, { userAddress });
    return response.orders;
}

================
File: src/lib/graphql/subscription.ts
================
// src/lib/graphql/subscription.ts
import { createClient } from 'graphql-ws';
import { browser } from '$app/environment';

const client = browser ? createClient({
    url: 'ws://localhost:8000/subgraphs/name/limit-order-subgraph'
}) : null;

export function createSubscription<T>(
    query: string,
    variables: Record<string, any>,
    onData: (data: T) => void
) {
    if (!client) return () => {};

    return client.subscribe(
        { query, variables },
        {
            next: (result: any) => {
                if (result.data) {
                    onData(result.data);
                }
            },
            error: (error) => {
                console.error('Subscription error:', error);
            },
            complete: () => {
                console.log('Subscription completed');
            }
        }
    );
}

================
File: src/lib/utils/token.ts
================
import { createPublicClient, http, type Address, formatUnits } from 'viem';
import { virtual_mainnet } from '$lib/configs/tenderly.config';

const erc20Abi = [
	{
		name: 'symbol',
		type: 'function',
		stateMutability: 'view',
		inputs: [],
		outputs: [{ type: 'string' }]
	},
	{
		name: 'decimals',
		type: 'function',
		stateMutability: 'view',
		inputs: [],
		outputs: [{ type: 'uint8' }]
	}
] as const;

const client = createPublicClient({
	chain: virtual_mainnet,
	transport: http()
});

export interface TokenInfo {
	symbol: string;
	decimals: number;
}

// Cache for token info to avoid repeated calls
const tokenInfoCache = new Map<string, TokenInfo>();

export async function getTokenInfo(address: Address): Promise<TokenInfo> {
	const cached = tokenInfoCache.get(address);
	if (cached) return cached;

	try {
		const [symbol, decimals] = await Promise.all([
			client.readContract({
				address,
				abi: erc20Abi,
				functionName: 'symbol',
			}),
			client.readContract({
				address,
				abi: erc20Abi,
				functionName: 'decimals',
			})
		]);

		const tokenInfo = { symbol, decimals };
		tokenInfoCache.set(address, tokenInfo);
		return tokenInfo;
	} catch (error) {
		console.error(`Error fetching token info for ${address}:`, error);
		// Return a fallback with shortened address as symbol and 18 decimals
		return {
			symbol: `${address.slice(0, 6)}...${address.slice(-4)}`,
			decimals: 18
		};
	}
}

export function formatTokenAmount(amount: bigint, decimals: number): string {
	try {
		const formatted = formatUnits(amount, decimals);
		return formatted.replace(/\.?0+$/, '');
	} catch (error) {
		console.error('Error formatting token amount:', error);
		return amount.toString();
	}
}

================
File: src/lib/index.ts
================
// place files you want to import through the `$lib` alias in this folder.

================
File: src/lib/types.ts
================
import type {Address} from "viem";

export enum OrderType {
    BUY = 0,
    SELL = 1
}

export enum OrderState {
    PLACED = "PLACED",
    EXECUTED = "EXECUTED",
    CANCELLED = "CANCELLED"
}

export interface Order {
    id?: string;
    orderID?: string;
    fee: number;
    orderType: OrderType;
    state?: OrderState;
    executed?: boolean;
    maker?: string;
    tokenIn: string;
    tokenOut: string;
    amount: bigint;
    targetPrice: bigint;
    expiry: bigint;
    transactionHash?: string;
}

================
File: src/routes/+layout.svelte
================
<script lang="ts">
	import '../app.css';
	let { children } = $props();
</script>

{@render children()}

================
File: src/routes/+page.svelte
================
<script lang="ts">
	import { Card, Heading, P, Span, Toast } from 'svelte-5-ui-lib';
	import { onMount } from 'svelte';
	import { type Address, createPublicClient } from 'viem';
	import { http } from 'wagmi';
	import { virtual_mainnet } from '$lib/configs/tenderly.config';
	import { modal } from '$lib/configs/wallet.config';
	import type { Order } from '$lib/types';
	import type { PublicStateControllerState, UseAppKitAccountReturn } from '@reown/appkit';
	import { fetchOrders } from '$lib/graphql/graphql';
	import OrdersOverview from '$lib/components/OrdersOverview.svelte';
	import OrderDetails from '$lib/components/OrderDetails.svelte';
	import Welcome from '$lib/components/Welcome.svelte';

	let isConnected = $state(false);
	let orders = $state<Order[]>([]);
	let account = $state<Address | undefined>();
	let unwatch: (() => void) | undefined;
	let selectedState = $state<string | null>(null);
	let showToast = $state(false);
	let toastMessage = $state('');
	let toastType = $state<'success' | 'error'>('success');

	let filteredOrders = $derived(selectedState
		? orders.filter(o => o.state === selectedState)
		: orders
	);

	const publicClient = createPublicClient({
		chain: virtual_mainnet,
		transport: http()
	});

	async function startWatchingBlocks() {
		if (unwatch) {
			unwatch();
		}
		unwatch = publicClient.watchBlocks({
			onBlock: async () => {
				console.log('New block mined! Refreshing orders...');
				await refreshOrders();
			}
		});
	}

	async function refreshOrders() {
		if (!account) return;
		try {
			orders = await fetchOrders(account.toString());
		} catch (error) {
			console.error('Error fetching orders:', error);
		}
	}

	function handleStateClick(state: string | null) {
		selectedState = selectedState === state ? null : state;
	}

	function handleTransactionStatus({ success, message }: { success: boolean, message: string }) {
		toastMessage = message;
		toastType = success ? 'success' : 'error';
		showToast = true;
		setTimeout(() => showToast = false, 5000);
	}

	onMount(() => {
		// Subscribe to account changes (address, connection status)
		modal.subscribeAccount((newAccount: UseAppKitAccountReturn) => {
			account = newAccount.address as Address;
			isConnected = !!account;
			if (account) {
				refreshOrders();
				startWatchingBlocks();
			}
		});
	});
</script>

<div class="min-h-screen bg-gray-50">
	{#if !isConnected}
		<Welcome />
	{:else}
		<div class="container mx-auto px-4 py-6 max-w-5xl">
			<div class="flex justify-end">
				<appkit-button balance="hide"> </appkit-button>
			</div>
			<div class="flex justify-center items-center flex-col mb-6">
				<Heading tag="h1" class="mb-2 text-4xl font-extrabold md:text-5xl text-center">
					<Span gradient="amberToEmerald">Limit Order</Span> Dashboard
				</Heading>
				<P class="text-gray-600">Place and manage your limit orders with ease</P>
			</div>
			<OrdersOverview
				{orders}
				onStateClick={handleStateClick}
				selectedState={selectedState}
			/>

			<div class="mt-6 space-y-3">
				{#each filteredOrders as order (order.orderID)}
					<OrderDetails
						{order}
						onTransactionStatus={handleTransactionStatus}
					/>
				{/each}
			</div>
		</div>
	{/if}
</div>

{#if showToast}
	<Toast
		position="bottom-right"
		color={toastType}
		dismissible
		transitionType="fade"
		onClose={() => showToast = false}
	>
		{toastMessage}
	</Toast>
{/if}

================
File: src/app.css
================
@import 'tailwindcss';

================
File: src/app.d.ts
================
// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface PageState {}
		// interface Platform {}
	}
}

export {};

================
File: src/app.html
================
<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>

================
File: .gitignore
================
node_modules

# Output
.output
.vercel
.netlify
.wrangler
/.svelte-kit
/build

# OS
.DS_Store
Thumbs.db

# Env
.env
.env.*
!.env.example
!.env.test

# Vite
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

================
File: .npmrc
================
engine-strict=true

================
File: .prettierignore
================
# Package Managers
package-lock.json
pnpm-lock.yaml
yarn.lock

================
File: .prettierrc
================
{
	"useTabs": true,
	"singleQuote": true,
	"trailingComma": "none",
	"printWidth": 100,
	"plugins": ["prettier-plugin-svelte", "prettier-plugin-tailwindcss"],
	"overrides": [
		{
			"files": "*.svelte",
			"options": {
				"parser": "svelte"
			}
		}
	]
}

================
File: package.json
================
{
	"name": "limit-order-dapp",
	"private": true,
	"version": "0.0.1",
	"type": "module",
	"scripts": {
		"dev": "vite dev",
		"build": "vite build",
		"preview": "vite preview",
		"prepare": "svelte-kit sync || echo ''",
		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
		"format": "prettier --write .",
		"lint": "prettier --check ."
	},
	"devDependencies": {
		"@sveltejs/adapter-auto": "^4.0.0",
		"@sveltejs/kit": "^2.16.0",
		"@sveltejs/vite-plugin-svelte": "^5.0.0",
		"@tailwindcss/vite": "^4.0.0",
		"flowbite-svelte-icons": "^2.0.2",
		"prettier": "^3.4.2",
		"prettier-plugin-svelte": "^3.3.3",
		"prettier-plugin-tailwindcss": "^0.6.11",
		"svelte": "^5.0.0",
		"svelte-5-ui-lib": "^0.12.2",
		"svelte-check": "^4.0.0",
		"tailwindcss": "^4.0.6",
		"typescript": "^5.0.0",
		"vite": "^6.0.0"
	},
	"dependencies": {
		"@reown/appkit": "^1.6.8",
		"@reown/appkit-adapter-wagmi": "^1.6.8",
		"@tanstack/react-query": "^5.66.0",
		"graphql": "^16.10.0",
		"graphql-request": "^7.1.2",
		"viem": "^2.23.2",
		"wagmi": "^2.14.11"
	}
}

================
File: README.md
================
# sv

Everything you need to build a Svelte project, powered by [`sv`](https://github.com/sveltejs/cli).

## Creating a project

If you're seeing this, you've probably already done this step. Congrats!

```bash
# create a new project in the current directory
npx sv create

# create a new project in my-app
npx sv create my-app
```

## Developing

Once you've created a project and installed dependencies with `npm install` (or `pnpm install` or `yarn`), start a development server:

```bash
npm run dev

# or start the server and open the app in a new browser tab
npm run dev -- --open
```

## Building

To create a production version of your app:

```bash
npm run build
```

You can preview the production build with `npm run preview`.

> To deploy your app, you may need to install an [adapter](https://svelte.dev/docs/kit/adapters) for your target environment.

================
File: svelte.config.js
================
import adapter from '@sveltejs/adapter-auto';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://svelte.dev/docs/kit/integrations
	// for more information about preprocessors
	preprocess: vitePreprocess(),

	kit: {
		// adapter-auto only supports some environments, see https://svelte.dev/docs/kit/adapter-auto for a list.
		// If your environment is not supported, or you settled on a specific environment, switch out the adapter.
		// See https://svelte.dev/docs/kit/adapters for more information about adapters.
		adapter: adapter()
	}
};

export default config;

================
File: tailwind.config.ts
================
import type { Config } from 'tailwindcss';

export default {
	content: ['./src/**/*.{html,js,svelte,ts}', './node_modules/svelte-5-ui-lib/**/*.{html,js,svelte,ts}'],
	darkMode: 'selector',
	theme: {
		extend: {
			colors: {
				primary: { 50: '#FFF5F2', 100: '#FFF1EE', 200: '#FFE4DE', 300: '#FFD5CC', 400: '#FFBCAD', 500: '#FE795D', 600: '#EF562F', 700: '#EB4F27', 800: '#CC4522', 900: '#A5371B' },
				secondary: { "50": "#f0f9ff", "100": "#e0f2fe", "200": "#bae6fd", "300": "#7dd3fc", "400": "#38bdf8", "500": "#0ea5e9", "600": "#0284c7", "700": "#0369a1", "800": "#075985", "900": "#0c4a6e" },
			}
		}
	},
} as Config;

================
File: tsconfig.json
================
{
	"extends": "./.svelte-kit/tsconfig.json",
	"compilerOptions": {
		"allowJs": true,
		"checkJs": true,
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true,
		"skipLibCheck": true,
		"sourceMap": true,
		"strict": true,
		"moduleResolution": "bundler"
	}
	// Path aliases are handled by https://svelte.dev/docs/kit/configuration#alias
	// except $lib which is handled by https://svelte.dev/docs/kit/configuration#files
	//
	// If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
	// from the referenced tsconfig.json - TypeScript does not merge them in
}

================
File: vite.config.ts
================
import tailwindcss from '@tailwindcss/vite';
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';

export default defineConfig({
	plugins: [sveltekit(), tailwindcss()]
});



================================================================
End of Codebase
================================================================
